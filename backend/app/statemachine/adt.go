// Code generated by go generate; DO NOT EDIT.
// Generated ADT boilerplate and enums for adtenum.Enum types

package statemachine

import (
	"github.com/chris-tomich/adtenum"
)

// OperationType is the discriminator enum for Operation
type OperationType string

const (
	OperationTypeArchiveDelete  OperationType = "ArchiveDelete"
	OperationTypeArchiveRefresh OperationType = "ArchiveRefresh"
	OperationTypeArchiveRename  OperationType = "ArchiveRename"
	OperationTypeBackup         OperationType = "Backup"
	OperationTypeDelete         OperationType = "Delete"
	OperationTypePrune          OperationType = "Prune"
)

// Operation variant wrappers
type ArchiveDeleteVariant adtenum.OneVariantValue[OpArchiveDelete]
type ArchiveRefreshVariant adtenum.OneVariantValue[OpArchiveRefresh]
type ArchiveRenameVariant adtenum.OneVariantValue[OpArchiveRename]
type BackupVariant adtenum.OneVariantValue[OpBackup]
type DeleteVariant adtenum.OneVariantValue[OpDelete]
type PruneVariant adtenum.OneVariantValue[OpPrune]

// Operation constructors
var NewOperationArchiveDelete = adtenum.CreateOneVariantValueConstructor[ArchiveDeleteVariant]()
var NewOperationArchiveRefresh = adtenum.CreateOneVariantValueConstructor[ArchiveRefreshVariant]()
var NewOperationArchiveRename = adtenum.CreateOneVariantValueConstructor[ArchiveRenameVariant]()
var NewOperationBackup = adtenum.CreateOneVariantValueConstructor[BackupVariant]()
var NewOperationDelete = adtenum.CreateOneVariantValueConstructor[DeleteVariant]()
var NewOperationPrune = adtenum.CreateOneVariantValueConstructor[PruneVariant]()

// EnumType methods for Operation variants
func (v ArchiveDeleteVariant) EnumType() Operation  { return v }
func (v ArchiveRefreshVariant) EnumType() Operation { return v }
func (v ArchiveRenameVariant) EnumType() Operation  { return v }
func (v BackupVariant) EnumType() Operation         { return v }
func (v DeleteVariant) EnumType() Operation         { return v }
func (v PruneVariant) EnumType() Operation          { return v }

// OperationUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
type OperationUnion struct {
	Type OperationType `json:"type"` // Discriminator field

	// Variant fields - only one will be non-nil
	Backup         *OpBackup         `json:"backup,omitempty"`
	Prune          *OpPrune          `json:"prune,omitempty"`
	Delete         *OpDelete         `json:"delete,omitempty"`
	ArchiveRefresh *OpArchiveRefresh `json:"archiveRefresh,omitempty"`
	ArchiveDelete  *OpArchiveDelete  `json:"archiveDelete,omitempty"`
	ArchiveRename  *OpArchiveRename  `json:"archiveRename,omitempty"`
}

// ToOperationUnion converts an ADT Operation to an OperationUnion
func ToOperationUnion(r Operation) OperationUnion {
	switch i := r.(type) {
	case BackupVariant:
		data := i()
		return OperationUnion{
			Type:   OperationTypeBackup,
			Backup: &data,
		}
	case PruneVariant:
		data := i()
		return OperationUnion{
			Type:  OperationTypePrune,
			Prune: &data,
		}
	case DeleteVariant:
		data := i()
		return OperationUnion{
			Type:   OperationTypeDelete,
			Delete: &data,
		}
	case ArchiveRefreshVariant:
		data := i()
		return OperationUnion{
			Type:           OperationTypeArchiveRefresh,
			ArchiveRefresh: &data,
		}
	case ArchiveDeleteVariant:
		data := i()
		return OperationUnion{
			Type:          OperationTypeArchiveDelete,
			ArchiveDelete: &data,
		}
	case ArchiveRenameVariant:
		data := i()
		return OperationUnion{
			Type:          OperationTypeArchiveRename,
			ArchiveRename: &data,
		}
	default:
		return OperationUnion{
			Type:          OperationTypeArchiveDelete,
			ArchiveDelete: &OpArchiveDelete{},
		}
	}
}

// RepositoryStateType is the discriminator enum for RepositoryState
type RepositoryStateType string

const (
	RepositoryStateTypeBackingUp  RepositoryStateType = "BackingUp"
	RepositoryStateTypeDeleting   RepositoryStateType = "Deleting"
	RepositoryStateTypeError      RepositoryStateType = "Error"
	RepositoryStateTypeIdle       RepositoryStateType = "Idle"
	RepositoryStateTypeMounted    RepositoryStateType = "Mounted"
	RepositoryStateTypePruning    RepositoryStateType = "Pruning"
	RepositoryStateTypeQueued     RepositoryStateType = "Queued"
	RepositoryStateTypeRefreshing RepositoryStateType = "Refreshing"
)

// RepositoryState variant wrappers
type BackingUpVariant adtenum.OneVariantValue[StateBackingUp]
type DeletingVariant adtenum.OneVariantValue[StateDeleting]
type ErrorVariant adtenum.OneVariantValue[StateError]
type IdleVariant adtenum.OneVariantValue[StateIdle]
type MountedVariant adtenum.OneVariantValue[StateMounted]
type PruningVariant adtenum.OneVariantValue[StatePruning]
type QueuedVariant adtenum.OneVariantValue[StateQueued]
type RefreshingVariant adtenum.OneVariantValue[StateRefreshing]

// RepositoryState constructors
var NewRepositoryStateBackingUp = adtenum.CreateOneVariantValueConstructor[BackingUpVariant]()
var NewRepositoryStateDeleting = adtenum.CreateOneVariantValueConstructor[DeletingVariant]()
var NewRepositoryStateError = adtenum.CreateOneVariantValueConstructor[ErrorVariant]()
var NewRepositoryStateIdle = adtenum.CreateOneVariantValueConstructor[IdleVariant]()
var NewRepositoryStateMounted = adtenum.CreateOneVariantValueConstructor[MountedVariant]()
var NewRepositoryStatePruning = adtenum.CreateOneVariantValueConstructor[PruningVariant]()
var NewRepositoryStateQueued = adtenum.CreateOneVariantValueConstructor[QueuedVariant]()
var NewRepositoryStateRefreshing = adtenum.CreateOneVariantValueConstructor[RefreshingVariant]()

// EnumType methods for RepositoryState variants
func (v BackingUpVariant) EnumType() RepositoryState  { return v }
func (v DeletingVariant) EnumType() RepositoryState   { return v }
func (v ErrorVariant) EnumType() RepositoryState      { return v }
func (v IdleVariant) EnumType() RepositoryState       { return v }
func (v MountedVariant) EnumType() RepositoryState    { return v }
func (v PruningVariant) EnumType() RepositoryState    { return v }
func (v QueuedVariant) EnumType() RepositoryState     { return v }
func (v RefreshingVariant) EnumType() RepositoryState { return v }

// RepositoryStateUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
type RepositoryStateUnion struct {
	Type RepositoryStateType `json:"type"` // Discriminator field

	// Variant fields - only one will be non-nil
	Idle       *StateIdle       `json:"idle,omitempty"`
	Queued     *StateQueued     `json:"queued,omitempty"`
	BackingUp  *StateBackingUp  `json:"backingUp,omitempty"`
	Pruning    *StatePruning    `json:"pruning,omitempty"`
	Deleting   *StateDeleting   `json:"deleting,omitempty"`
	Refreshing *StateRefreshing `json:"refreshing,omitempty"`
	Mounted    *StateMounted    `json:"mounted,omitempty"`
	Error      *StateError      `json:"error,omitempty"`
}

// ToRepositoryStateUnion converts an ADT RepositoryState to an RepositoryStateUnion
func ToRepositoryStateUnion(r RepositoryState) RepositoryStateUnion {
	switch i := r.(type) {
	case IdleVariant:
		data := i()
		return RepositoryStateUnion{
			Type: RepositoryStateTypeIdle,
			Idle: &data,
		}
	case QueuedVariant:
		data := i()
		return RepositoryStateUnion{
			Type:   RepositoryStateTypeQueued,
			Queued: &data,
		}
	case BackingUpVariant:
		data := i()
		return RepositoryStateUnion{
			Type:      RepositoryStateTypeBackingUp,
			BackingUp: &data,
		}
	case PruningVariant:
		data := i()
		return RepositoryStateUnion{
			Type:    RepositoryStateTypePruning,
			Pruning: &data,
		}
	case DeletingVariant:
		data := i()
		return RepositoryStateUnion{
			Type:     RepositoryStateTypeDeleting,
			Deleting: &data,
		}
	case RefreshingVariant:
		data := i()
		return RepositoryStateUnion{
			Type:       RepositoryStateTypeRefreshing,
			Refreshing: &data,
		}
	case MountedVariant:
		data := i()
		return RepositoryStateUnion{
			Type:    RepositoryStateTypeMounted,
			Mounted: &data,
		}
	case ErrorVariant:
		data := i()
		return RepositoryStateUnion{
			Type:  RepositoryStateTypeError,
			Error: &data,
		}
	default:
		return RepositoryStateUnion{
			Type:      RepositoryStateTypeBackingUp,
			BackingUp: &StateBackingUp{},
		}
	}
}
