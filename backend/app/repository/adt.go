// Code generated by go generate; DO NOT EDIT.
// Generated ADT boilerplate and enums for adtenum.Enum types

package repository

import (
	"github.com/chris-tomich/adtenum"
)

// OperationStatusType is the discriminator enum for OperationStatus
type OperationStatusType string

const (
	OperationStatusTypeCompleted OperationStatusType = "Completed"
	OperationStatusTypeExpired   OperationStatusType = "Expired"
	OperationStatusTypeFailed    OperationStatusType = "Failed"
	OperationStatusTypeQueued    OperationStatusType = "Queued"
	OperationStatusTypeRunning   OperationStatusType = "Running"
)

// OperationStatus variant wrappers
type CompletedVariant adtenum.OneVariantValue[StatusCompleted]
type ExpiredVariant adtenum.OneVariantValue[StatusExpired]
type FailedVariant adtenum.OneVariantValue[StatusFailed]
type QueuedVariant adtenum.OneVariantValue[StatusQueued]
type RunningVariant adtenum.OneVariantValue[StatusRunning]

// OperationStatus constructors
var NewOperationStatusCompleted = adtenum.CreateOneVariantValueConstructor[CompletedVariant]()
var NewOperationStatusExpired = adtenum.CreateOneVariantValueConstructor[ExpiredVariant]()
var NewOperationStatusFailed = adtenum.CreateOneVariantValueConstructor[FailedVariant]()
var NewOperationStatusQueued = adtenum.CreateOneVariantValueConstructor[QueuedVariant]()
var NewOperationStatusRunning = adtenum.CreateOneVariantValueConstructor[RunningVariant]()

// EnumType methods for OperationStatus variants
func (v CompletedVariant) EnumType() OperationStatus { return v }
func (v ExpiredVariant) EnumType() OperationStatus   { return v }
func (v FailedVariant) EnumType() OperationStatus    { return v }
func (v QueuedVariant) EnumType() OperationStatus    { return v }
func (v RunningVariant) EnumType() OperationStatus   { return v }

// OperationStatusUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
type OperationStatusUnion struct {
	Type OperationStatusType `json:"type"` // Discriminator field

	// Variant fields - only one will be non-nil
	Queued    *StatusQueued    `json:"queued,omitempty"`
	Running   *StatusRunning   `json:"running,omitempty"`
	Completed *StatusCompleted `json:"completed,omitempty"`
	Failed    *StatusFailed    `json:"failed,omitempty"`
	Expired   *StatusExpired   `json:"expired,omitempty"`
}

// ToOperationStatusUnion converts an ADT OperationStatus to an OperationStatusUnion
func ToOperationStatusUnion(r OperationStatus) OperationStatusUnion {
	switch i := r.(type) {
	case QueuedVariant:
		data := i()
		return OperationStatusUnion{
			Type:   OperationStatusTypeQueued,
			Queued: &data,
		}
	case RunningVariant:
		data := i()
		return OperationStatusUnion{
			Type:    OperationStatusTypeRunning,
			Running: &data,
		}
	case CompletedVariant:
		data := i()
		return OperationStatusUnion{
			Type:      OperationStatusTypeCompleted,
			Completed: &data,
		}
	case FailedVariant:
		data := i()
		return OperationStatusUnion{
			Type:   OperationStatusTypeFailed,
			Failed: &data,
		}
	case ExpiredVariant:
		data := i()
		return OperationStatusUnion{
			Type:    OperationStatusTypeExpired,
			Expired: &data,
		}
	default:
		return OperationStatusUnion{
			Type:      OperationStatusTypeCompleted,
			Completed: &StatusCompleted{},
		}
	}
}
