// Code generated by go generate; DO NOT EDIT.
// Generated ADT boilerplate and enums for adtenum.Enum types

package repository

import (
	"github.com/chris-tomich/adtenum"
)

// LocationType is the discriminator enum for Location
type LocationType string

const (
	LocationTypeArcoCloud LocationType = "ArcoCloud"
	LocationTypeLocal     LocationType = "Local"
	LocationTypeRemote    LocationType = "Remote"
)

// Location variant wrappers
type ArcoCloudVariant adtenum.OneVariantValue[ArcoCloud]
type LocalVariant adtenum.OneVariantValue[Local]
type RemoteVariant adtenum.OneVariantValue[Remote]

// Location constructors
var NewLocationArcoCloud = adtenum.CreateOneVariantValueConstructor[ArcoCloudVariant]()
var NewLocationLocal = adtenum.CreateOneVariantValueConstructor[LocalVariant]()
var NewLocationRemote = adtenum.CreateOneVariantValueConstructor[RemoteVariant]()

// EnumType methods for Location variants
func (v ArcoCloudVariant) EnumType() Location { return v }
func (v LocalVariant) EnumType() Location     { return v }
func (v RemoteVariant) EnumType() Location    { return v }

// LocationUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
type LocationUnion struct {
	Type LocationType `json:"type"` // Discriminator field

	// Variant fields - only one will be non-nil
	Local     *Local     `json:"local,omitempty"`
	Remote    *Remote    `json:"remote,omitempty"`
	ArcoCloud *ArcoCloud `json:"arcoCloud,omitempty"`
}

// ToLocationUnion converts an ADT Location to an LocationUnion
func ToLocationUnion(r Location) LocationUnion {
	switch i := r.(type) {
	case LocalVariant:
		data := i()
		return LocationUnion{
			Type:  LocationTypeLocal,
			Local: &data,
		}
	case RemoteVariant:
		data := i()
		return LocationUnion{
			Type:   LocationTypeRemote,
			Remote: &data,
		}
	case ArcoCloudVariant:
		data := i()
		return LocationUnion{
			Type:      LocationTypeArcoCloud,
			ArcoCloud: &data,
		}
	default:
		return LocationUnion{
			Type:      LocationTypeArcoCloud,
			ArcoCloud: &ArcoCloud{},
		}
	}
}

// OperationStatusType is the discriminator enum for OperationStatus
type OperationStatusType string

const (
	OperationStatusTypeCompleted OperationStatusType = "Completed"
	OperationStatusTypeExpired   OperationStatusType = "Expired"
	OperationStatusTypeFailed    OperationStatusType = "Failed"
	OperationStatusTypeQueued    OperationStatusType = "Queued"
	OperationStatusTypeRunning   OperationStatusType = "Running"
)

// OperationStatus variant wrappers
type CompletedVariant adtenum.OneVariantValue[Completed]
type ExpiredVariant adtenum.OneVariantValue[Expired]
type FailedVariant adtenum.OneVariantValue[Failed]
type QueuedVariant adtenum.OneVariantValue[Queued]
type RunningVariant adtenum.OneVariantValue[Running]

// OperationStatus constructors
var NewOperationStatusCompleted = adtenum.CreateOneVariantValueConstructor[CompletedVariant]()
var NewOperationStatusExpired = adtenum.CreateOneVariantValueConstructor[ExpiredVariant]()
var NewOperationStatusFailed = adtenum.CreateOneVariantValueConstructor[FailedVariant]()
var NewOperationStatusQueued = adtenum.CreateOneVariantValueConstructor[QueuedVariant]()
var NewOperationStatusRunning = adtenum.CreateOneVariantValueConstructor[RunningVariant]()

// EnumType methods for OperationStatus variants
func (v CompletedVariant) EnumType() OperationStatus { return v }
func (v ExpiredVariant) EnumType() OperationStatus   { return v }
func (v FailedVariant) EnumType() OperationStatus    { return v }
func (v QueuedVariant) EnumType() OperationStatus    { return v }
func (v RunningVariant) EnumType() OperationStatus   { return v }

// OperationStatusUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
type OperationStatusUnion struct {
	Type OperationStatusType `json:"type"` // Discriminator field

	// Variant fields - only one will be non-nil
	Queued    *Queued    `json:"queued,omitempty"`
	Running   *Running   `json:"running,omitempty"`
	Completed *Completed `json:"completed,omitempty"`
	Failed    *Failed    `json:"failed,omitempty"`
	Expired   *Expired   `json:"expired,omitempty"`
}

// ToOperationStatusUnion converts an ADT OperationStatus to an OperationStatusUnion
func ToOperationStatusUnion(r OperationStatus) OperationStatusUnion {
	switch i := r.(type) {
	case QueuedVariant:
		data := i()
		return OperationStatusUnion{
			Type:   OperationStatusTypeQueued,
			Queued: &data,
		}
	case RunningVariant:
		data := i()
		return OperationStatusUnion{
			Type:    OperationStatusTypeRunning,
			Running: &data,
		}
	case CompletedVariant:
		data := i()
		return OperationStatusUnion{
			Type:      OperationStatusTypeCompleted,
			Completed: &data,
		}
	case FailedVariant:
		data := i()
		return OperationStatusUnion{
			Type:   OperationStatusTypeFailed,
			Failed: &data,
		}
	case ExpiredVariant:
		data := i()
		return OperationStatusUnion{
			Type:    OperationStatusTypeExpired,
			Expired: &data,
		}
	default:
		return OperationStatusUnion{
			Type:      OperationStatusTypeCompleted,
			Completed: &Completed{},
		}
	}
}
