// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/loomi-labs/arco/backend/app/types (interfaces: EventEmitter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/event_emitter.go -package=mocks . EventEmitter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventEmitter is a mock of EventEmitter interface.
type MockEventEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEventEmitterMockRecorder
	isgomock struct{}
}

// MockEventEmitterMockRecorder is the mock recorder for MockEventEmitter.
type MockEventEmitterMockRecorder struct {
	mock *MockEventEmitter
}

// NewMockEventEmitter creates a new mock instance.
func NewMockEventEmitter(ctrl *gomock.Controller) *MockEventEmitter {
	mock := &MockEventEmitter{ctrl: ctrl}
	mock.recorder = &MockEventEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventEmitter) EXPECT() *MockEventEmitterMockRecorder {
	return m.recorder
}

// EmitEvent mocks base method.
func (m *MockEventEmitter) EmitEvent(ctx context.Context, event string, data ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, event}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "EmitEvent", varargs...)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockEventEmitterMockRecorder) EmitEvent(ctx, event any, data ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, event}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockEventEmitter)(nil).EmitEvent), varargs...)
}
