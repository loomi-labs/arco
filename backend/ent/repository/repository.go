// Code generated by ent, DO NOT EDIT.

package repository

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeBackupprofiles holds the string denoting the backupprofiles edge name in mutations.
	EdgeBackupprofiles = "backupprofiles"
	// EdgeArchives holds the string denoting the archives edge name in mutations.
	EdgeArchives = "archives"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// BackupprofilesTable is the table that holds the backupprofiles relation/edge. The primary key declared below.
	BackupprofilesTable = "backup_profile_repositories"
	// BackupprofilesInverseTable is the table name for the BackupProfile entity.
	// It exists in this package in order to avoid circular dependency with the "backupprofile" package.
	BackupprofilesInverseTable = "backup_profiles"
	// ArchivesTable is the table that holds the archives relation/edge.
	ArchivesTable = "archives"
	// ArchivesInverseTable is the table name for the Archive entity.
	// It exists in this package in order to avoid circular dependency with the "archive" package.
	ArchivesInverseTable = "archives"
	// ArchivesColumn is the table column denoting the archives relation/edge.
	ArchivesColumn = "archive_repository"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldPassword,
}

var (
	// BackupprofilesPrimaryKey and BackupprofilesColumn2 are the table columns denoting the
	// primary key for the backupprofiles relation (M2M).
	BackupprofilesPrimaryKey = []string{"backup_profile_id", "repository_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Repository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByBackupprofilesCount orders the results by backupprofiles count.
func ByBackupprofilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBackupprofilesStep(), opts...)
	}
}

// ByBackupprofiles orders the results by backupprofiles terms.
func ByBackupprofiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupprofilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArchivesCount orders the results by archives count.
func ByArchivesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArchivesStep(), opts...)
	}
}

// ByArchives orders the results by archives terms.
func ByArchives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchivesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBackupprofilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupprofilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BackupprofilesTable, BackupprofilesPrimaryKey...),
	)
}
func newArchivesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchivesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ArchivesTable, ArchivesColumn),
	)
}
