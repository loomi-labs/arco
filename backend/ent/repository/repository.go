// Code generated by ent, DO NOT EDIT.

package repository

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatsTotalChunks holds the string denoting the stats_total_chunks field in the database.
	FieldStatsTotalChunks = "stats_total_chunks"
	// FieldStatsTotalSize holds the string denoting the stats_total_size field in the database.
	FieldStatsTotalSize = "stats_total_size"
	// FieldStatsTotalCsize holds the string denoting the stats_total_csize field in the database.
	FieldStatsTotalCsize = "stats_total_csize"
	// FieldStatsTotalUniqueChunks holds the string denoting the stats_total_unique_chunks field in the database.
	FieldStatsTotalUniqueChunks = "stats_total_unique_chunks"
	// FieldStatsUniqueSize holds the string denoting the stats_unique_size field in the database.
	FieldStatsUniqueSize = "stats_unique_size"
	// FieldStatsUniqueCsize holds the string denoting the stats_unique_csize field in the database.
	FieldStatsUniqueCsize = "stats_unique_csize"
	// EdgeBackupProfiles holds the string denoting the backup_profiles edge name in mutations.
	EdgeBackupProfiles = "backup_profiles"
	// EdgeArchives holds the string denoting the archives edge name in mutations.
	EdgeArchives = "archives"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// BackupProfilesTable is the table that holds the backup_profiles relation/edge. The primary key declared below.
	BackupProfilesTable = "backup_profile_repositories"
	// BackupProfilesInverseTable is the table name for the BackupProfile entity.
	// It exists in this package in order to avoid circular dependency with the "backupprofile" package.
	BackupProfilesInverseTable = "backup_profiles"
	// ArchivesTable is the table that holds the archives relation/edge.
	ArchivesTable = "archives"
	// ArchivesInverseTable is the table name for the Archive entity.
	// It exists in this package in order to avoid circular dependency with the "archive" package.
	ArchivesInverseTable = "archives"
	// ArchivesColumn is the table column denoting the archives relation/edge.
	ArchivesColumn = "archive_repository"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldPassword,
	FieldStatsTotalChunks,
	FieldStatsTotalSize,
	FieldStatsTotalCsize,
	FieldStatsTotalUniqueChunks,
	FieldStatsUniqueSize,
	FieldStatsUniqueCsize,
}

var (
	// BackupProfilesPrimaryKey and BackupProfilesColumn2 are the table columns denoting the
	// primary key for the backup_profiles relation (M2M).
	BackupProfilesPrimaryKey = []string{"backup_profile_id", "repository_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatsTotalChunks holds the default value on creation for the "stats_total_chunks" field.
	DefaultStatsTotalChunks int
	// DefaultStatsTotalSize holds the default value on creation for the "stats_total_size" field.
	DefaultStatsTotalSize int
	// DefaultStatsTotalCsize holds the default value on creation for the "stats_total_csize" field.
	DefaultStatsTotalCsize int
	// DefaultStatsTotalUniqueChunks holds the default value on creation for the "stats_total_unique_chunks" field.
	DefaultStatsTotalUniqueChunks int
	// DefaultStatsUniqueSize holds the default value on creation for the "stats_unique_size" field.
	DefaultStatsUniqueSize int
	// DefaultStatsUniqueCsize holds the default value on creation for the "stats_unique_csize" field.
	DefaultStatsUniqueCsize int
)

// OrderOption defines the ordering options for the Repository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByStatsTotalChunks orders the results by the stats_total_chunks field.
func ByStatsTotalChunks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatsTotalChunks, opts...).ToFunc()
}

// ByStatsTotalSize orders the results by the stats_total_size field.
func ByStatsTotalSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatsTotalSize, opts...).ToFunc()
}

// ByStatsTotalCsize orders the results by the stats_total_csize field.
func ByStatsTotalCsize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatsTotalCsize, opts...).ToFunc()
}

// ByStatsTotalUniqueChunks orders the results by the stats_total_unique_chunks field.
func ByStatsTotalUniqueChunks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatsTotalUniqueChunks, opts...).ToFunc()
}

// ByStatsUniqueSize orders the results by the stats_unique_size field.
func ByStatsUniqueSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatsUniqueSize, opts...).ToFunc()
}

// ByStatsUniqueCsize orders the results by the stats_unique_csize field.
func ByStatsUniqueCsize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatsUniqueCsize, opts...).ToFunc()
}

// ByBackupProfilesCount orders the results by backup_profiles count.
func ByBackupProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBackupProfilesStep(), opts...)
	}
}

// ByBackupProfiles orders the results by backup_profiles terms.
func ByBackupProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArchivesCount orders the results by archives count.
func ByArchivesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArchivesStep(), opts...)
	}
}

// ByArchives orders the results by archives terms.
func ByArchives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchivesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBackupProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BackupProfilesTable, BackupProfilesPrimaryKey...),
	)
}
func newArchivesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchivesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ArchivesTable, ArchivesColumn),
	)
}
