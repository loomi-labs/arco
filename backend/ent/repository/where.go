// Code generated by ent, DO NOT EDIT.

package repository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLocation, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPassword, v))
}

// ArcoCloudID applies equality check predicate on the "arco_cloud_id" field. It's identical to ArcoCloudIDEQ.
func ArcoCloudID(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldArcoCloudID, v))
}

// NextIntegrityCheck applies equality check predicate on the "next_integrity_check" field. It's identical to NextIntegrityCheckEQ.
func NextIntegrityCheck(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNextIntegrityCheck, v))
}

// StatsTotalChunks applies equality check predicate on the "stats_total_chunks" field. It's identical to StatsTotalChunksEQ.
func StatsTotalChunks(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalChunks, v))
}

// StatsTotalSize applies equality check predicate on the "stats_total_size" field. It's identical to StatsTotalSizeEQ.
func StatsTotalSize(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalSize, v))
}

// StatsTotalCsize applies equality check predicate on the "stats_total_csize" field. It's identical to StatsTotalCsizeEQ.
func StatsTotalCsize(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalCsize, v))
}

// StatsTotalUniqueChunks applies equality check predicate on the "stats_total_unique_chunks" field. It's identical to StatsTotalUniqueChunksEQ.
func StatsTotalUniqueChunks(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalUniqueChunks, v))
}

// StatsUniqueSize applies equality check predicate on the "stats_unique_size" field. It's identical to StatsUniqueSizeEQ.
func StatsUniqueSize(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsUniqueSize, v))
}

// StatsUniqueCsize applies equality check predicate on the "stats_unique_csize" field. It's identical to StatsUniqueCsizeEQ.
func StatsUniqueCsize(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsUniqueCsize, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldName, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldLocation, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldPassword, v))
}

// ArcoCloudIDEQ applies the EQ predicate on the "arco_cloud_id" field.
func ArcoCloudIDEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldArcoCloudID, v))
}

// ArcoCloudIDNEQ applies the NEQ predicate on the "arco_cloud_id" field.
func ArcoCloudIDNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldArcoCloudID, v))
}

// ArcoCloudIDIn applies the In predicate on the "arco_cloud_id" field.
func ArcoCloudIDIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldArcoCloudID, vs...))
}

// ArcoCloudIDNotIn applies the NotIn predicate on the "arco_cloud_id" field.
func ArcoCloudIDNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldArcoCloudID, vs...))
}

// ArcoCloudIDGT applies the GT predicate on the "arco_cloud_id" field.
func ArcoCloudIDGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldArcoCloudID, v))
}

// ArcoCloudIDGTE applies the GTE predicate on the "arco_cloud_id" field.
func ArcoCloudIDGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldArcoCloudID, v))
}

// ArcoCloudIDLT applies the LT predicate on the "arco_cloud_id" field.
func ArcoCloudIDLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldArcoCloudID, v))
}

// ArcoCloudIDLTE applies the LTE predicate on the "arco_cloud_id" field.
func ArcoCloudIDLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldArcoCloudID, v))
}

// ArcoCloudIDContains applies the Contains predicate on the "arco_cloud_id" field.
func ArcoCloudIDContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldArcoCloudID, v))
}

// ArcoCloudIDHasPrefix applies the HasPrefix predicate on the "arco_cloud_id" field.
func ArcoCloudIDHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldArcoCloudID, v))
}

// ArcoCloudIDHasSuffix applies the HasSuffix predicate on the "arco_cloud_id" field.
func ArcoCloudIDHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldArcoCloudID, v))
}

// ArcoCloudIDIsNil applies the IsNil predicate on the "arco_cloud_id" field.
func ArcoCloudIDIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldArcoCloudID))
}

// ArcoCloudIDNotNil applies the NotNil predicate on the "arco_cloud_id" field.
func ArcoCloudIDNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldArcoCloudID))
}

// ArcoCloudIDEqualFold applies the EqualFold predicate on the "arco_cloud_id" field.
func ArcoCloudIDEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldArcoCloudID, v))
}

// ArcoCloudIDContainsFold applies the ContainsFold predicate on the "arco_cloud_id" field.
func ArcoCloudIDContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldArcoCloudID, v))
}

// NextIntegrityCheckEQ applies the EQ predicate on the "next_integrity_check" field.
func NextIntegrityCheckEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNextIntegrityCheck, v))
}

// NextIntegrityCheckNEQ applies the NEQ predicate on the "next_integrity_check" field.
func NextIntegrityCheckNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldNextIntegrityCheck, v))
}

// NextIntegrityCheckIn applies the In predicate on the "next_integrity_check" field.
func NextIntegrityCheckIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldNextIntegrityCheck, vs...))
}

// NextIntegrityCheckNotIn applies the NotIn predicate on the "next_integrity_check" field.
func NextIntegrityCheckNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldNextIntegrityCheck, vs...))
}

// NextIntegrityCheckGT applies the GT predicate on the "next_integrity_check" field.
func NextIntegrityCheckGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldNextIntegrityCheck, v))
}

// NextIntegrityCheckGTE applies the GTE predicate on the "next_integrity_check" field.
func NextIntegrityCheckGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldNextIntegrityCheck, v))
}

// NextIntegrityCheckLT applies the LT predicate on the "next_integrity_check" field.
func NextIntegrityCheckLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldNextIntegrityCheck, v))
}

// NextIntegrityCheckLTE applies the LTE predicate on the "next_integrity_check" field.
func NextIntegrityCheckLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldNextIntegrityCheck, v))
}

// NextIntegrityCheckIsNil applies the IsNil predicate on the "next_integrity_check" field.
func NextIntegrityCheckIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldNextIntegrityCheck))
}

// NextIntegrityCheckNotNil applies the NotNil predicate on the "next_integrity_check" field.
func NextIntegrityCheckNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldNextIntegrityCheck))
}

// StatsTotalChunksEQ applies the EQ predicate on the "stats_total_chunks" field.
func StatsTotalChunksEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalChunks, v))
}

// StatsTotalChunksNEQ applies the NEQ predicate on the "stats_total_chunks" field.
func StatsTotalChunksNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatsTotalChunks, v))
}

// StatsTotalChunksIn applies the In predicate on the "stats_total_chunks" field.
func StatsTotalChunksIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatsTotalChunks, vs...))
}

// StatsTotalChunksNotIn applies the NotIn predicate on the "stats_total_chunks" field.
func StatsTotalChunksNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatsTotalChunks, vs...))
}

// StatsTotalChunksGT applies the GT predicate on the "stats_total_chunks" field.
func StatsTotalChunksGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatsTotalChunks, v))
}

// StatsTotalChunksGTE applies the GTE predicate on the "stats_total_chunks" field.
func StatsTotalChunksGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatsTotalChunks, v))
}

// StatsTotalChunksLT applies the LT predicate on the "stats_total_chunks" field.
func StatsTotalChunksLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatsTotalChunks, v))
}

// StatsTotalChunksLTE applies the LTE predicate on the "stats_total_chunks" field.
func StatsTotalChunksLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatsTotalChunks, v))
}

// StatsTotalSizeEQ applies the EQ predicate on the "stats_total_size" field.
func StatsTotalSizeEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalSize, v))
}

// StatsTotalSizeNEQ applies the NEQ predicate on the "stats_total_size" field.
func StatsTotalSizeNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatsTotalSize, v))
}

// StatsTotalSizeIn applies the In predicate on the "stats_total_size" field.
func StatsTotalSizeIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatsTotalSize, vs...))
}

// StatsTotalSizeNotIn applies the NotIn predicate on the "stats_total_size" field.
func StatsTotalSizeNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatsTotalSize, vs...))
}

// StatsTotalSizeGT applies the GT predicate on the "stats_total_size" field.
func StatsTotalSizeGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatsTotalSize, v))
}

// StatsTotalSizeGTE applies the GTE predicate on the "stats_total_size" field.
func StatsTotalSizeGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatsTotalSize, v))
}

// StatsTotalSizeLT applies the LT predicate on the "stats_total_size" field.
func StatsTotalSizeLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatsTotalSize, v))
}

// StatsTotalSizeLTE applies the LTE predicate on the "stats_total_size" field.
func StatsTotalSizeLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatsTotalSize, v))
}

// StatsTotalCsizeEQ applies the EQ predicate on the "stats_total_csize" field.
func StatsTotalCsizeEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalCsize, v))
}

// StatsTotalCsizeNEQ applies the NEQ predicate on the "stats_total_csize" field.
func StatsTotalCsizeNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatsTotalCsize, v))
}

// StatsTotalCsizeIn applies the In predicate on the "stats_total_csize" field.
func StatsTotalCsizeIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatsTotalCsize, vs...))
}

// StatsTotalCsizeNotIn applies the NotIn predicate on the "stats_total_csize" field.
func StatsTotalCsizeNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatsTotalCsize, vs...))
}

// StatsTotalCsizeGT applies the GT predicate on the "stats_total_csize" field.
func StatsTotalCsizeGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatsTotalCsize, v))
}

// StatsTotalCsizeGTE applies the GTE predicate on the "stats_total_csize" field.
func StatsTotalCsizeGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatsTotalCsize, v))
}

// StatsTotalCsizeLT applies the LT predicate on the "stats_total_csize" field.
func StatsTotalCsizeLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatsTotalCsize, v))
}

// StatsTotalCsizeLTE applies the LTE predicate on the "stats_total_csize" field.
func StatsTotalCsizeLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatsTotalCsize, v))
}

// StatsTotalUniqueChunksEQ applies the EQ predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsTotalUniqueChunks, v))
}

// StatsTotalUniqueChunksNEQ applies the NEQ predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatsTotalUniqueChunks, v))
}

// StatsTotalUniqueChunksIn applies the In predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatsTotalUniqueChunks, vs...))
}

// StatsTotalUniqueChunksNotIn applies the NotIn predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatsTotalUniqueChunks, vs...))
}

// StatsTotalUniqueChunksGT applies the GT predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatsTotalUniqueChunks, v))
}

// StatsTotalUniqueChunksGTE applies the GTE predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatsTotalUniqueChunks, v))
}

// StatsTotalUniqueChunksLT applies the LT predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatsTotalUniqueChunks, v))
}

// StatsTotalUniqueChunksLTE applies the LTE predicate on the "stats_total_unique_chunks" field.
func StatsTotalUniqueChunksLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatsTotalUniqueChunks, v))
}

// StatsUniqueSizeEQ applies the EQ predicate on the "stats_unique_size" field.
func StatsUniqueSizeEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsUniqueSize, v))
}

// StatsUniqueSizeNEQ applies the NEQ predicate on the "stats_unique_size" field.
func StatsUniqueSizeNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatsUniqueSize, v))
}

// StatsUniqueSizeIn applies the In predicate on the "stats_unique_size" field.
func StatsUniqueSizeIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatsUniqueSize, vs...))
}

// StatsUniqueSizeNotIn applies the NotIn predicate on the "stats_unique_size" field.
func StatsUniqueSizeNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatsUniqueSize, vs...))
}

// StatsUniqueSizeGT applies the GT predicate on the "stats_unique_size" field.
func StatsUniqueSizeGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatsUniqueSize, v))
}

// StatsUniqueSizeGTE applies the GTE predicate on the "stats_unique_size" field.
func StatsUniqueSizeGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatsUniqueSize, v))
}

// StatsUniqueSizeLT applies the LT predicate on the "stats_unique_size" field.
func StatsUniqueSizeLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatsUniqueSize, v))
}

// StatsUniqueSizeLTE applies the LTE predicate on the "stats_unique_size" field.
func StatsUniqueSizeLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatsUniqueSize, v))
}

// StatsUniqueCsizeEQ applies the EQ predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatsUniqueCsize, v))
}

// StatsUniqueCsizeNEQ applies the NEQ predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatsUniqueCsize, v))
}

// StatsUniqueCsizeIn applies the In predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatsUniqueCsize, vs...))
}

// StatsUniqueCsizeNotIn applies the NotIn predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatsUniqueCsize, vs...))
}

// StatsUniqueCsizeGT applies the GT predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatsUniqueCsize, v))
}

// StatsUniqueCsizeGTE applies the GTE predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatsUniqueCsize, v))
}

// StatsUniqueCsizeLT applies the LT predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatsUniqueCsize, v))
}

// StatsUniqueCsizeLTE applies the LTE predicate on the "stats_unique_csize" field.
func StatsUniqueCsizeLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatsUniqueCsize, v))
}

// HasBackupProfiles applies the HasEdge predicate on the "backup_profiles" edge.
func HasBackupProfiles() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BackupProfilesTable, BackupProfilesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackupProfilesWith applies the HasEdge predicate on the "backup_profiles" edge with a given conditions (other predicates).
func HasBackupProfilesWith(preds ...predicate.BackupProfile) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newBackupProfilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArchives applies the HasEdge predicate on the "archives" edge.
func HasArchives() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ArchivesTable, ArchivesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArchivesWith applies the HasEdge predicate on the "archives" edge with a given conditions (other predicates).
func HasArchivesWith(preds ...predicate.Archive) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newArchivesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.NotPredicates(p))
}
