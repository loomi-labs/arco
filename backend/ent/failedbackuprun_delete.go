// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/failedbackuprun"
	"arco/backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FailedBackupRunDelete is the builder for deleting a FailedBackupRun entity.
type FailedBackupRunDelete struct {
	config
	hooks    []Hook
	mutation *FailedBackupRunMutation
}

// Where appends a list predicates to the FailedBackupRunDelete builder.
func (fbrd *FailedBackupRunDelete) Where(ps ...predicate.FailedBackupRun) *FailedBackupRunDelete {
	fbrd.mutation.Where(ps...)
	return fbrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fbrd *FailedBackupRunDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fbrd.sqlExec, fbrd.mutation, fbrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fbrd *FailedBackupRunDelete) ExecX(ctx context.Context) int {
	n, err := fbrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fbrd *FailedBackupRunDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(failedbackuprun.Table, sqlgraph.NewFieldSpec(failedbackuprun.FieldID, field.TypeInt))
	if ps := fbrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fbrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fbrd.mutation.done = true
	return affected, err
}

// FailedBackupRunDeleteOne is the builder for deleting a single FailedBackupRun entity.
type FailedBackupRunDeleteOne struct {
	fbrd *FailedBackupRunDelete
}

// Where appends a list predicates to the FailedBackupRunDelete builder.
func (fbrdo *FailedBackupRunDeleteOne) Where(ps ...predicate.FailedBackupRun) *FailedBackupRunDeleteOne {
	fbrdo.fbrd.mutation.Where(ps...)
	return fbrdo
}

// Exec executes the deletion query.
func (fbrdo *FailedBackupRunDeleteOne) Exec(ctx context.Context) error {
	n, err := fbrdo.fbrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{failedbackuprun.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fbrdo *FailedBackupRunDeleteOne) ExecX(ctx context.Context) {
	if err := fbrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
