// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// ArchiveCreate is the builder for creating a Archive entity.
type ArchiveCreate struct {
	config
	mutation *ArchiveMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *ArchiveCreate) SetCreatedAt(v time.Time) *ArchiveCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ArchiveCreate) SetNillableCreatedAt(v *time.Time) *ArchiveCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ArchiveCreate) SetUpdatedAt(v time.Time) *ArchiveCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ArchiveCreate) SetNillableUpdatedAt(v *time.Time) *ArchiveCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ArchiveCreate) SetName(v string) *ArchiveCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDuration sets the "duration" field.
func (_c *ArchiveCreate) SetDuration(v float64) *ArchiveCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetBorgID sets the "borg_id" field.
func (_c *ArchiveCreate) SetBorgID(v string) *ArchiveCreate {
	_c.mutation.SetBorgID(v)
	return _c
}

// SetWillBePruned sets the "will_be_pruned" field.
func (_c *ArchiveCreate) SetWillBePruned(v bool) *ArchiveCreate {
	_c.mutation.SetWillBePruned(v)
	return _c
}

// SetNillableWillBePruned sets the "will_be_pruned" field if the given value is not nil.
func (_c *ArchiveCreate) SetNillableWillBePruned(v *bool) *ArchiveCreate {
	if v != nil {
		_c.SetWillBePruned(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ArchiveCreate) SetID(v int) *ArchiveCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (_c *ArchiveCreate) SetRepositoryID(id int) *ArchiveCreate {
	_c.mutation.SetRepositoryID(id)
	return _c
}

// SetRepository sets the "repository" edge to the Repository entity.
func (_c *ArchiveCreate) SetRepository(v *Repository) *ArchiveCreate {
	return _c.SetRepositoryID(v.ID)
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (_c *ArchiveCreate) SetBackupProfileID(id int) *ArchiveCreate {
	_c.mutation.SetBackupProfileID(id)
	return _c
}

// SetNillableBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID if the given value is not nil.
func (_c *ArchiveCreate) SetNillableBackupProfileID(id *int) *ArchiveCreate {
	if id != nil {
		_c = _c.SetBackupProfileID(*id)
	}
	return _c
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (_c *ArchiveCreate) SetBackupProfile(v *BackupProfile) *ArchiveCreate {
	return _c.SetBackupProfileID(v.ID)
}

// Mutation returns the ArchiveMutation object of the builder.
func (_c *ArchiveCreate) Mutation() *ArchiveMutation {
	return _c.mutation
}

// Save creates the Archive in the database.
func (_c *ArchiveCreate) Save(ctx context.Context) (*Archive, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ArchiveCreate) SaveX(ctx context.Context) *Archive {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArchiveCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArchiveCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ArchiveCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := archive.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := archive.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.WillBePruned(); !ok {
		v := archive.DefaultWillBePruned
		_c.mutation.SetWillBePruned(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ArchiveCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Archive.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Archive.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Archive.name"`)}
	}
	if _, ok := _c.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Archive.duration"`)}
	}
	if _, ok := _c.mutation.BorgID(); !ok {
		return &ValidationError{Name: "borg_id", err: errors.New(`ent: missing required field "Archive.borg_id"`)}
	}
	if _, ok := _c.mutation.WillBePruned(); !ok {
		return &ValidationError{Name: "will_be_pruned", err: errors.New(`ent: missing required field "Archive.will_be_pruned"`)}
	}
	if len(_c.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "Archive.repository"`)}
	}
	return nil
}

func (_c *ArchiveCreate) sqlSave(ctx context.Context) (*Archive, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ArchiveCreate) createSpec() (*Archive, *sqlgraph.CreateSpec) {
	var (
		_node = &Archive{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(archive.Table, sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(archive.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(archive.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(archive.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(archive.FieldDuration, field.TypeFloat64, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.BorgID(); ok {
		_spec.SetField(archive.FieldBorgID, field.TypeString, value)
		_node.BorgID = value
	}
	if value, ok := _c.mutation.WillBePruned(); ok {
		_spec.SetField(archive.FieldWillBePruned, field.TypeBool, value)
		_node.WillBePruned = value
	}
	if nodes := _c.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.RepositoryTable,
			Columns: []string{archive.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.archive_repository = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.BackupProfileTable,
			Columns: []string{archive.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.archive_backup_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArchiveCreateBulk is the builder for creating many Archive entities in bulk.
type ArchiveCreateBulk struct {
	config
	err      error
	builders []*ArchiveCreate
}

// Save creates the Archive entities in the database.
func (_c *ArchiveCreateBulk) Save(ctx context.Context) ([]*Archive, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Archive, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArchiveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ArchiveCreateBulk) SaveX(ctx context.Context) []*Archive {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArchiveCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArchiveCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
