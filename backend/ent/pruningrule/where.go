// Code generated by ent, DO NOT EDIT.

package pruningrule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldID, id))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldUpdatedAt, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldIsEnabled, v))
}

// KeepHourly applies equality check predicate on the "keep_hourly" field. It's identical to KeepHourlyEQ.
func KeepHourly(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepHourly, v))
}

// KeepDaily applies equality check predicate on the "keep_daily" field. It's identical to KeepDailyEQ.
func KeepDaily(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepDaily, v))
}

// KeepWeekly applies equality check predicate on the "keep_weekly" field. It's identical to KeepWeeklyEQ.
func KeepWeekly(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepWeekly, v))
}

// KeepMonthly applies equality check predicate on the "keep_monthly" field. It's identical to KeepMonthlyEQ.
func KeepMonthly(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepMonthly, v))
}

// KeepYearly applies equality check predicate on the "keep_yearly" field. It's identical to KeepYearlyEQ.
func KeepYearly(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepYearly, v))
}

// KeepWithinDays applies equality check predicate on the "keep_within_days" field. It's identical to KeepWithinDaysEQ.
func KeepWithinDays(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepWithinDays, v))
}

// NextRun applies equality check predicate on the "next_run" field. It's identical to NextRunEQ.
func NextRun(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldNextRun, v))
}

// LastRun applies equality check predicate on the "last_run" field. It's identical to LastRunEQ.
func LastRun(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldLastRun, v))
}

// LastRunStatus applies equality check predicate on the "last_run_status" field. It's identical to LastRunStatusEQ.
func LastRunStatus(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldLastRunStatus, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldUpdatedAt, v))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldIsEnabled, v))
}

// KeepHourlyEQ applies the EQ predicate on the "keep_hourly" field.
func KeepHourlyEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepHourly, v))
}

// KeepHourlyNEQ applies the NEQ predicate on the "keep_hourly" field.
func KeepHourlyNEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldKeepHourly, v))
}

// KeepHourlyIn applies the In predicate on the "keep_hourly" field.
func KeepHourlyIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldKeepHourly, vs...))
}

// KeepHourlyNotIn applies the NotIn predicate on the "keep_hourly" field.
func KeepHourlyNotIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldKeepHourly, vs...))
}

// KeepHourlyGT applies the GT predicate on the "keep_hourly" field.
func KeepHourlyGT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldKeepHourly, v))
}

// KeepHourlyGTE applies the GTE predicate on the "keep_hourly" field.
func KeepHourlyGTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldKeepHourly, v))
}

// KeepHourlyLT applies the LT predicate on the "keep_hourly" field.
func KeepHourlyLT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldKeepHourly, v))
}

// KeepHourlyLTE applies the LTE predicate on the "keep_hourly" field.
func KeepHourlyLTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldKeepHourly, v))
}

// KeepDailyEQ applies the EQ predicate on the "keep_daily" field.
func KeepDailyEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepDaily, v))
}

// KeepDailyNEQ applies the NEQ predicate on the "keep_daily" field.
func KeepDailyNEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldKeepDaily, v))
}

// KeepDailyIn applies the In predicate on the "keep_daily" field.
func KeepDailyIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldKeepDaily, vs...))
}

// KeepDailyNotIn applies the NotIn predicate on the "keep_daily" field.
func KeepDailyNotIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldKeepDaily, vs...))
}

// KeepDailyGT applies the GT predicate on the "keep_daily" field.
func KeepDailyGT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldKeepDaily, v))
}

// KeepDailyGTE applies the GTE predicate on the "keep_daily" field.
func KeepDailyGTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldKeepDaily, v))
}

// KeepDailyLT applies the LT predicate on the "keep_daily" field.
func KeepDailyLT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldKeepDaily, v))
}

// KeepDailyLTE applies the LTE predicate on the "keep_daily" field.
func KeepDailyLTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldKeepDaily, v))
}

// KeepWeeklyEQ applies the EQ predicate on the "keep_weekly" field.
func KeepWeeklyEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepWeekly, v))
}

// KeepWeeklyNEQ applies the NEQ predicate on the "keep_weekly" field.
func KeepWeeklyNEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldKeepWeekly, v))
}

// KeepWeeklyIn applies the In predicate on the "keep_weekly" field.
func KeepWeeklyIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldKeepWeekly, vs...))
}

// KeepWeeklyNotIn applies the NotIn predicate on the "keep_weekly" field.
func KeepWeeklyNotIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldKeepWeekly, vs...))
}

// KeepWeeklyGT applies the GT predicate on the "keep_weekly" field.
func KeepWeeklyGT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldKeepWeekly, v))
}

// KeepWeeklyGTE applies the GTE predicate on the "keep_weekly" field.
func KeepWeeklyGTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldKeepWeekly, v))
}

// KeepWeeklyLT applies the LT predicate on the "keep_weekly" field.
func KeepWeeklyLT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldKeepWeekly, v))
}

// KeepWeeklyLTE applies the LTE predicate on the "keep_weekly" field.
func KeepWeeklyLTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldKeepWeekly, v))
}

// KeepMonthlyEQ applies the EQ predicate on the "keep_monthly" field.
func KeepMonthlyEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepMonthly, v))
}

// KeepMonthlyNEQ applies the NEQ predicate on the "keep_monthly" field.
func KeepMonthlyNEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldKeepMonthly, v))
}

// KeepMonthlyIn applies the In predicate on the "keep_monthly" field.
func KeepMonthlyIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldKeepMonthly, vs...))
}

// KeepMonthlyNotIn applies the NotIn predicate on the "keep_monthly" field.
func KeepMonthlyNotIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldKeepMonthly, vs...))
}

// KeepMonthlyGT applies the GT predicate on the "keep_monthly" field.
func KeepMonthlyGT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldKeepMonthly, v))
}

// KeepMonthlyGTE applies the GTE predicate on the "keep_monthly" field.
func KeepMonthlyGTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldKeepMonthly, v))
}

// KeepMonthlyLT applies the LT predicate on the "keep_monthly" field.
func KeepMonthlyLT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldKeepMonthly, v))
}

// KeepMonthlyLTE applies the LTE predicate on the "keep_monthly" field.
func KeepMonthlyLTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldKeepMonthly, v))
}

// KeepYearlyEQ applies the EQ predicate on the "keep_yearly" field.
func KeepYearlyEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepYearly, v))
}

// KeepYearlyNEQ applies the NEQ predicate on the "keep_yearly" field.
func KeepYearlyNEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldKeepYearly, v))
}

// KeepYearlyIn applies the In predicate on the "keep_yearly" field.
func KeepYearlyIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldKeepYearly, vs...))
}

// KeepYearlyNotIn applies the NotIn predicate on the "keep_yearly" field.
func KeepYearlyNotIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldKeepYearly, vs...))
}

// KeepYearlyGT applies the GT predicate on the "keep_yearly" field.
func KeepYearlyGT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldKeepYearly, v))
}

// KeepYearlyGTE applies the GTE predicate on the "keep_yearly" field.
func KeepYearlyGTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldKeepYearly, v))
}

// KeepYearlyLT applies the LT predicate on the "keep_yearly" field.
func KeepYearlyLT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldKeepYearly, v))
}

// KeepYearlyLTE applies the LTE predicate on the "keep_yearly" field.
func KeepYearlyLTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldKeepYearly, v))
}

// KeepWithinDaysEQ applies the EQ predicate on the "keep_within_days" field.
func KeepWithinDaysEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldKeepWithinDays, v))
}

// KeepWithinDaysNEQ applies the NEQ predicate on the "keep_within_days" field.
func KeepWithinDaysNEQ(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldKeepWithinDays, v))
}

// KeepWithinDaysIn applies the In predicate on the "keep_within_days" field.
func KeepWithinDaysIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldKeepWithinDays, vs...))
}

// KeepWithinDaysNotIn applies the NotIn predicate on the "keep_within_days" field.
func KeepWithinDaysNotIn(vs ...int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldKeepWithinDays, vs...))
}

// KeepWithinDaysGT applies the GT predicate on the "keep_within_days" field.
func KeepWithinDaysGT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldKeepWithinDays, v))
}

// KeepWithinDaysGTE applies the GTE predicate on the "keep_within_days" field.
func KeepWithinDaysGTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldKeepWithinDays, v))
}

// KeepWithinDaysLT applies the LT predicate on the "keep_within_days" field.
func KeepWithinDaysLT(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldKeepWithinDays, v))
}

// KeepWithinDaysLTE applies the LTE predicate on the "keep_within_days" field.
func KeepWithinDaysLTE(v int) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldKeepWithinDays, v))
}

// NextRunEQ applies the EQ predicate on the "next_run" field.
func NextRunEQ(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldNextRun, v))
}

// NextRunNEQ applies the NEQ predicate on the "next_run" field.
func NextRunNEQ(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldNextRun, v))
}

// NextRunIn applies the In predicate on the "next_run" field.
func NextRunIn(vs ...time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldNextRun, vs...))
}

// NextRunNotIn applies the NotIn predicate on the "next_run" field.
func NextRunNotIn(vs ...time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldNextRun, vs...))
}

// NextRunGT applies the GT predicate on the "next_run" field.
func NextRunGT(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldNextRun, v))
}

// NextRunGTE applies the GTE predicate on the "next_run" field.
func NextRunGTE(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldNextRun, v))
}

// NextRunLT applies the LT predicate on the "next_run" field.
func NextRunLT(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldNextRun, v))
}

// NextRunLTE applies the LTE predicate on the "next_run" field.
func NextRunLTE(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldNextRun, v))
}

// NextRunIsNil applies the IsNil predicate on the "next_run" field.
func NextRunIsNil() predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIsNull(FieldNextRun))
}

// NextRunNotNil applies the NotNil predicate on the "next_run" field.
func NextRunNotNil() predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotNull(FieldNextRun))
}

// LastRunEQ applies the EQ predicate on the "last_run" field.
func LastRunEQ(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldLastRun, v))
}

// LastRunNEQ applies the NEQ predicate on the "last_run" field.
func LastRunNEQ(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldLastRun, v))
}

// LastRunIn applies the In predicate on the "last_run" field.
func LastRunIn(vs ...time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldLastRun, vs...))
}

// LastRunNotIn applies the NotIn predicate on the "last_run" field.
func LastRunNotIn(vs ...time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldLastRun, vs...))
}

// LastRunGT applies the GT predicate on the "last_run" field.
func LastRunGT(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldLastRun, v))
}

// LastRunGTE applies the GTE predicate on the "last_run" field.
func LastRunGTE(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldLastRun, v))
}

// LastRunLT applies the LT predicate on the "last_run" field.
func LastRunLT(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldLastRun, v))
}

// LastRunLTE applies the LTE predicate on the "last_run" field.
func LastRunLTE(v time.Time) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldLastRun, v))
}

// LastRunIsNil applies the IsNil predicate on the "last_run" field.
func LastRunIsNil() predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIsNull(FieldLastRun))
}

// LastRunNotNil applies the NotNil predicate on the "last_run" field.
func LastRunNotNil() predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotNull(FieldLastRun))
}

// LastRunStatusEQ applies the EQ predicate on the "last_run_status" field.
func LastRunStatusEQ(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEQ(FieldLastRunStatus, v))
}

// LastRunStatusNEQ applies the NEQ predicate on the "last_run_status" field.
func LastRunStatusNEQ(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNEQ(FieldLastRunStatus, v))
}

// LastRunStatusIn applies the In predicate on the "last_run_status" field.
func LastRunStatusIn(vs ...string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIn(FieldLastRunStatus, vs...))
}

// LastRunStatusNotIn applies the NotIn predicate on the "last_run_status" field.
func LastRunStatusNotIn(vs ...string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotIn(FieldLastRunStatus, vs...))
}

// LastRunStatusGT applies the GT predicate on the "last_run_status" field.
func LastRunStatusGT(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGT(FieldLastRunStatus, v))
}

// LastRunStatusGTE applies the GTE predicate on the "last_run_status" field.
func LastRunStatusGTE(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldGTE(FieldLastRunStatus, v))
}

// LastRunStatusLT applies the LT predicate on the "last_run_status" field.
func LastRunStatusLT(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLT(FieldLastRunStatus, v))
}

// LastRunStatusLTE applies the LTE predicate on the "last_run_status" field.
func LastRunStatusLTE(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldLTE(FieldLastRunStatus, v))
}

// LastRunStatusContains applies the Contains predicate on the "last_run_status" field.
func LastRunStatusContains(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldContains(FieldLastRunStatus, v))
}

// LastRunStatusHasPrefix applies the HasPrefix predicate on the "last_run_status" field.
func LastRunStatusHasPrefix(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldHasPrefix(FieldLastRunStatus, v))
}

// LastRunStatusHasSuffix applies the HasSuffix predicate on the "last_run_status" field.
func LastRunStatusHasSuffix(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldHasSuffix(FieldLastRunStatus, v))
}

// LastRunStatusIsNil applies the IsNil predicate on the "last_run_status" field.
func LastRunStatusIsNil() predicate.PruningRule {
	return predicate.PruningRule(sql.FieldIsNull(FieldLastRunStatus))
}

// LastRunStatusNotNil applies the NotNil predicate on the "last_run_status" field.
func LastRunStatusNotNil() predicate.PruningRule {
	return predicate.PruningRule(sql.FieldNotNull(FieldLastRunStatus))
}

// LastRunStatusEqualFold applies the EqualFold predicate on the "last_run_status" field.
func LastRunStatusEqualFold(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldEqualFold(FieldLastRunStatus, v))
}

// LastRunStatusContainsFold applies the ContainsFold predicate on the "last_run_status" field.
func LastRunStatusContainsFold(v string) predicate.PruningRule {
	return predicate.PruningRule(sql.FieldContainsFold(FieldLastRunStatus, v))
}

// HasBackupProfile applies the HasEdge predicate on the "backup_profile" edge.
func HasBackupProfile() predicate.PruningRule {
	return predicate.PruningRule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BackupProfileTable, BackupProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackupProfileWith applies the HasEdge predicate on the "backup_profile" edge with a given conditions (other predicates).
func HasBackupProfileWith(preds ...predicate.BackupProfile) predicate.PruningRule {
	return predicate.PruningRule(func(s *sql.Selector) {
		step := newBackupProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PruningRule) predicate.PruningRule {
	return predicate.PruningRule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PruningRule) predicate.PruningRule {
	return predicate.PruningRule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PruningRule) predicate.PruningRule {
	return predicate.PruningRule(sql.NotPredicates(p))
}
