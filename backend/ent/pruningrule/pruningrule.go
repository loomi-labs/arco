// Code generated by ent, DO NOT EDIT.

package pruningrule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pruningrule type in the database.
	Label = "pruning_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldKeepHourly holds the string denoting the keep_hourly field in the database.
	FieldKeepHourly = "keep_hourly"
	// FieldKeepDaily holds the string denoting the keep_daily field in the database.
	FieldKeepDaily = "keep_daily"
	// FieldKeepWeekly holds the string denoting the keep_weekly field in the database.
	FieldKeepWeekly = "keep_weekly"
	// FieldKeepMonthly holds the string denoting the keep_monthly field in the database.
	FieldKeepMonthly = "keep_monthly"
	// FieldKeepYearly holds the string denoting the keep_yearly field in the database.
	FieldKeepYearly = "keep_yearly"
	// FieldKeepWithinDays holds the string denoting the keep_within_days field in the database.
	FieldKeepWithinDays = "keep_within_days"
	// FieldNextRun holds the string denoting the next_run field in the database.
	FieldNextRun = "next_run"
	// FieldLastRun holds the string denoting the last_run field in the database.
	FieldLastRun = "last_run"
	// FieldLastRunStatus holds the string denoting the last_run_status field in the database.
	FieldLastRunStatus = "last_run_status"
	// EdgeBackupProfile holds the string denoting the backup_profile edge name in mutations.
	EdgeBackupProfile = "backup_profile"
	// Table holds the table name of the pruningrule in the database.
	Table = "pruning_rules"
	// BackupProfileTable is the table that holds the backup_profile relation/edge.
	BackupProfileTable = "pruning_rules"
	// BackupProfileInverseTable is the table name for the BackupProfile entity.
	// It exists in this package in order to avoid circular dependency with the "backupprofile" package.
	BackupProfileInverseTable = "backup_profiles"
	// BackupProfileColumn is the table column denoting the backup_profile relation/edge.
	BackupProfileColumn = "backup_profile_pruning_rule"
)

// Columns holds all SQL columns for pruningrule fields.
var Columns = []string{
	FieldID,
	FieldUpdatedAt,
	FieldIsEnabled,
	FieldKeepHourly,
	FieldKeepDaily,
	FieldKeepWeekly,
	FieldKeepMonthly,
	FieldKeepYearly,
	FieldKeepWithinDays,
	FieldNextRun,
	FieldLastRun,
	FieldLastRunStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pruning_rules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"backup_profile_pruning_rule",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PruningRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsEnabled orders the results by the is_enabled field.
func ByIsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnabled, opts...).ToFunc()
}

// ByKeepHourly orders the results by the keep_hourly field.
func ByKeepHourly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepHourly, opts...).ToFunc()
}

// ByKeepDaily orders the results by the keep_daily field.
func ByKeepDaily(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepDaily, opts...).ToFunc()
}

// ByKeepWeekly orders the results by the keep_weekly field.
func ByKeepWeekly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepWeekly, opts...).ToFunc()
}

// ByKeepMonthly orders the results by the keep_monthly field.
func ByKeepMonthly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepMonthly, opts...).ToFunc()
}

// ByKeepYearly orders the results by the keep_yearly field.
func ByKeepYearly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepYearly, opts...).ToFunc()
}

// ByKeepWithinDays orders the results by the keep_within_days field.
func ByKeepWithinDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepWithinDays, opts...).ToFunc()
}

// ByNextRun orders the results by the next_run field.
func ByNextRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRun, opts...).ToFunc()
}

// ByLastRun orders the results by the last_run field.
func ByLastRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRun, opts...).ToFunc()
}

// ByLastRunStatus orders the results by the last_run_status field.
func ByLastRunStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunStatus, opts...).ToFunc()
}

// ByBackupProfileField orders the results by backup_profile field.
func ByBackupProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newBackupProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BackupProfileTable, BackupProfileColumn),
	)
}
