// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArchivesColumns holds the columns for the "archives" table.
	ArchivesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "duration", Type: field.TypeTime},
		{Name: "borg_id", Type: field.TypeString},
		{Name: "archive_repository", Type: field.TypeInt},
		{Name: "repository_archives", Type: field.TypeInt, Nullable: true},
	}
	// ArchivesTable holds the schema information for the "archives" table.
	ArchivesTable = &schema.Table{
		Name:       "archives",
		Columns:    ArchivesColumns,
		PrimaryKey: []*schema.Column{ArchivesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "archives_repositories_repository",
				Columns:    []*schema.Column{ArchivesColumns[5]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "archives_repositories_archives",
				Columns:    []*schema.Column{ArchivesColumns[6]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BackupProfilesColumns holds the columns for the "backup_profiles" table.
	BackupProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "prefix", Type: field.TypeString},
		{Name: "directories", Type: field.TypeJSON},
		{Name: "has_periodic_backups", Type: field.TypeBool, Default: false},
		{Name: "periodic_backup_time", Type: field.TypeTime, Nullable: true},
		{Name: "is_setup_complete", Type: field.TypeBool, Default: false},
	}
	// BackupProfilesTable holds the schema information for the "backup_profiles" table.
	BackupProfilesTable = &schema.Table{
		Name:       "backup_profiles",
		Columns:    BackupProfilesColumns,
		PrimaryKey: []*schema.Column{BackupProfilesColumns[0]},
	}
	// RepositoriesColumns holds the columns for the "repositories" table.
	RepositoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
	}
	// RepositoriesTable holds the schema information for the "repositories" table.
	RepositoriesTable = &schema.Table{
		Name:       "repositories",
		Columns:    RepositoriesColumns,
		PrimaryKey: []*schema.Column{RepositoriesColumns[0]},
	}
	// BackupProfileRepositoriesColumns holds the columns for the "backup_profile_repositories" table.
	BackupProfileRepositoriesColumns = []*schema.Column{
		{Name: "backup_profile_id", Type: field.TypeInt},
		{Name: "repository_id", Type: field.TypeInt},
	}
	// BackupProfileRepositoriesTable holds the schema information for the "backup_profile_repositories" table.
	BackupProfileRepositoriesTable = &schema.Table{
		Name:       "backup_profile_repositories",
		Columns:    BackupProfileRepositoriesColumns,
		PrimaryKey: []*schema.Column{BackupProfileRepositoriesColumns[0], BackupProfileRepositoriesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "backup_profile_repositories_backup_profile_id",
				Columns:    []*schema.Column{BackupProfileRepositoriesColumns[0]},
				RefColumns: []*schema.Column{BackupProfilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "backup_profile_repositories_repository_id",
				Columns:    []*schema.Column{BackupProfileRepositoriesColumns[1]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArchivesTable,
		BackupProfilesTable,
		RepositoriesTable,
		BackupProfileRepositoriesTable,
	}
)

func init() {
	ArchivesTable.ForeignKeys[0].RefTable = RepositoriesTable
	ArchivesTable.ForeignKeys[1].RefTable = RepositoriesTable
	BackupProfileRepositoriesTable.ForeignKeys[0].RefTable = BackupProfilesTable
	BackupProfileRepositoriesTable.ForeignKeys[1].RefTable = RepositoriesTable
}
