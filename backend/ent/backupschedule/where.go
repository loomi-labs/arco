// Code generated by ent, DO NOT EDIT.

package backupschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// DailyAt applies equality check predicate on the "daily_at" field. It's identical to DailyAtEQ.
func DailyAt(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldDailyAt, v))
}

// WeeklyAt applies equality check predicate on the "weekly_at" field. It's identical to WeeklyAtEQ.
func WeeklyAt(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldWeeklyAt, v))
}

// Monthday applies equality check predicate on the "monthday" field. It's identical to MonthdayEQ.
func Monthday(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldMonthday, v))
}

// MonthlyAt applies equality check predicate on the "monthly_at" field. It's identical to MonthlyAtEQ.
func MonthlyAt(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldMonthlyAt, v))
}

// NextRun applies equality check predicate on the "next_run" field. It's identical to NextRunEQ.
func NextRun(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldNextRun, v))
}

// LastRun applies equality check predicate on the "last_run" field. It's identical to LastRunEQ.
func LastRun(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldLastRun, v))
}

// LastRunStatus applies equality check predicate on the "last_run_status" field. It's identical to LastRunStatusEQ.
func LastRunStatus(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldLastRunStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldUpdatedAt, v))
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v Mode) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldMode, v))
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v Mode) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldMode, v))
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...Mode) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldMode, vs...))
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...Mode) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldMode, vs...))
}

// DailyAtEQ applies the EQ predicate on the "daily_at" field.
func DailyAtEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldDailyAt, v))
}

// DailyAtNEQ applies the NEQ predicate on the "daily_at" field.
func DailyAtNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldDailyAt, v))
}

// DailyAtIn applies the In predicate on the "daily_at" field.
func DailyAtIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldDailyAt, vs...))
}

// DailyAtNotIn applies the NotIn predicate on the "daily_at" field.
func DailyAtNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldDailyAt, vs...))
}

// DailyAtGT applies the GT predicate on the "daily_at" field.
func DailyAtGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldDailyAt, v))
}

// DailyAtGTE applies the GTE predicate on the "daily_at" field.
func DailyAtGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldDailyAt, v))
}

// DailyAtLT applies the LT predicate on the "daily_at" field.
func DailyAtLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldDailyAt, v))
}

// DailyAtLTE applies the LTE predicate on the "daily_at" field.
func DailyAtLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldDailyAt, v))
}

// WeekdayEQ applies the EQ predicate on the "weekday" field.
func WeekdayEQ(v Weekday) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldWeekday, v))
}

// WeekdayNEQ applies the NEQ predicate on the "weekday" field.
func WeekdayNEQ(v Weekday) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldWeekday, v))
}

// WeekdayIn applies the In predicate on the "weekday" field.
func WeekdayIn(vs ...Weekday) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldWeekday, vs...))
}

// WeekdayNotIn applies the NotIn predicate on the "weekday" field.
func WeekdayNotIn(vs ...Weekday) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldWeekday, vs...))
}

// WeeklyAtEQ applies the EQ predicate on the "weekly_at" field.
func WeeklyAtEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldWeeklyAt, v))
}

// WeeklyAtNEQ applies the NEQ predicate on the "weekly_at" field.
func WeeklyAtNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldWeeklyAt, v))
}

// WeeklyAtIn applies the In predicate on the "weekly_at" field.
func WeeklyAtIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldWeeklyAt, vs...))
}

// WeeklyAtNotIn applies the NotIn predicate on the "weekly_at" field.
func WeeklyAtNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldWeeklyAt, vs...))
}

// WeeklyAtGT applies the GT predicate on the "weekly_at" field.
func WeeklyAtGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldWeeklyAt, v))
}

// WeeklyAtGTE applies the GTE predicate on the "weekly_at" field.
func WeeklyAtGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldWeeklyAt, v))
}

// WeeklyAtLT applies the LT predicate on the "weekly_at" field.
func WeeklyAtLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldWeeklyAt, v))
}

// WeeklyAtLTE applies the LTE predicate on the "weekly_at" field.
func WeeklyAtLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldWeeklyAt, v))
}

// MonthdayEQ applies the EQ predicate on the "monthday" field.
func MonthdayEQ(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldMonthday, v))
}

// MonthdayNEQ applies the NEQ predicate on the "monthday" field.
func MonthdayNEQ(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldMonthday, v))
}

// MonthdayIn applies the In predicate on the "monthday" field.
func MonthdayIn(vs ...uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldMonthday, vs...))
}

// MonthdayNotIn applies the NotIn predicate on the "monthday" field.
func MonthdayNotIn(vs ...uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldMonthday, vs...))
}

// MonthdayGT applies the GT predicate on the "monthday" field.
func MonthdayGT(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldMonthday, v))
}

// MonthdayGTE applies the GTE predicate on the "monthday" field.
func MonthdayGTE(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldMonthday, v))
}

// MonthdayLT applies the LT predicate on the "monthday" field.
func MonthdayLT(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldMonthday, v))
}

// MonthdayLTE applies the LTE predicate on the "monthday" field.
func MonthdayLTE(v uint8) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldMonthday, v))
}

// MonthlyAtEQ applies the EQ predicate on the "monthly_at" field.
func MonthlyAtEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldMonthlyAt, v))
}

// MonthlyAtNEQ applies the NEQ predicate on the "monthly_at" field.
func MonthlyAtNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldMonthlyAt, v))
}

// MonthlyAtIn applies the In predicate on the "monthly_at" field.
func MonthlyAtIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldMonthlyAt, vs...))
}

// MonthlyAtNotIn applies the NotIn predicate on the "monthly_at" field.
func MonthlyAtNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldMonthlyAt, vs...))
}

// MonthlyAtGT applies the GT predicate on the "monthly_at" field.
func MonthlyAtGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldMonthlyAt, v))
}

// MonthlyAtGTE applies the GTE predicate on the "monthly_at" field.
func MonthlyAtGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldMonthlyAt, v))
}

// MonthlyAtLT applies the LT predicate on the "monthly_at" field.
func MonthlyAtLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldMonthlyAt, v))
}

// MonthlyAtLTE applies the LTE predicate on the "monthly_at" field.
func MonthlyAtLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldMonthlyAt, v))
}

// NextRunEQ applies the EQ predicate on the "next_run" field.
func NextRunEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldNextRun, v))
}

// NextRunNEQ applies the NEQ predicate on the "next_run" field.
func NextRunNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldNextRun, v))
}

// NextRunIn applies the In predicate on the "next_run" field.
func NextRunIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldNextRun, vs...))
}

// NextRunNotIn applies the NotIn predicate on the "next_run" field.
func NextRunNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldNextRun, vs...))
}

// NextRunGT applies the GT predicate on the "next_run" field.
func NextRunGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldNextRun, v))
}

// NextRunGTE applies the GTE predicate on the "next_run" field.
func NextRunGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldNextRun, v))
}

// NextRunLT applies the LT predicate on the "next_run" field.
func NextRunLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldNextRun, v))
}

// NextRunLTE applies the LTE predicate on the "next_run" field.
func NextRunLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldNextRun, v))
}

// NextRunIsNil applies the IsNil predicate on the "next_run" field.
func NextRunIsNil() predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIsNull(FieldNextRun))
}

// NextRunNotNil applies the NotNil predicate on the "next_run" field.
func NextRunNotNil() predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotNull(FieldNextRun))
}

// LastRunEQ applies the EQ predicate on the "last_run" field.
func LastRunEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldLastRun, v))
}

// LastRunNEQ applies the NEQ predicate on the "last_run" field.
func LastRunNEQ(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldLastRun, v))
}

// LastRunIn applies the In predicate on the "last_run" field.
func LastRunIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldLastRun, vs...))
}

// LastRunNotIn applies the NotIn predicate on the "last_run" field.
func LastRunNotIn(vs ...time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldLastRun, vs...))
}

// LastRunGT applies the GT predicate on the "last_run" field.
func LastRunGT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldLastRun, v))
}

// LastRunGTE applies the GTE predicate on the "last_run" field.
func LastRunGTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldLastRun, v))
}

// LastRunLT applies the LT predicate on the "last_run" field.
func LastRunLT(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldLastRun, v))
}

// LastRunLTE applies the LTE predicate on the "last_run" field.
func LastRunLTE(v time.Time) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldLastRun, v))
}

// LastRunIsNil applies the IsNil predicate on the "last_run" field.
func LastRunIsNil() predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIsNull(FieldLastRun))
}

// LastRunNotNil applies the NotNil predicate on the "last_run" field.
func LastRunNotNil() predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotNull(FieldLastRun))
}

// LastRunStatusEQ applies the EQ predicate on the "last_run_status" field.
func LastRunStatusEQ(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEQ(FieldLastRunStatus, v))
}

// LastRunStatusNEQ applies the NEQ predicate on the "last_run_status" field.
func LastRunStatusNEQ(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNEQ(FieldLastRunStatus, v))
}

// LastRunStatusIn applies the In predicate on the "last_run_status" field.
func LastRunStatusIn(vs ...string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIn(FieldLastRunStatus, vs...))
}

// LastRunStatusNotIn applies the NotIn predicate on the "last_run_status" field.
func LastRunStatusNotIn(vs ...string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotIn(FieldLastRunStatus, vs...))
}

// LastRunStatusGT applies the GT predicate on the "last_run_status" field.
func LastRunStatusGT(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGT(FieldLastRunStatus, v))
}

// LastRunStatusGTE applies the GTE predicate on the "last_run_status" field.
func LastRunStatusGTE(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldGTE(FieldLastRunStatus, v))
}

// LastRunStatusLT applies the LT predicate on the "last_run_status" field.
func LastRunStatusLT(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLT(FieldLastRunStatus, v))
}

// LastRunStatusLTE applies the LTE predicate on the "last_run_status" field.
func LastRunStatusLTE(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldLTE(FieldLastRunStatus, v))
}

// LastRunStatusContains applies the Contains predicate on the "last_run_status" field.
func LastRunStatusContains(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldContains(FieldLastRunStatus, v))
}

// LastRunStatusHasPrefix applies the HasPrefix predicate on the "last_run_status" field.
func LastRunStatusHasPrefix(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldHasPrefix(FieldLastRunStatus, v))
}

// LastRunStatusHasSuffix applies the HasSuffix predicate on the "last_run_status" field.
func LastRunStatusHasSuffix(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldHasSuffix(FieldLastRunStatus, v))
}

// LastRunStatusIsNil applies the IsNil predicate on the "last_run_status" field.
func LastRunStatusIsNil() predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldIsNull(FieldLastRunStatus))
}

// LastRunStatusNotNil applies the NotNil predicate on the "last_run_status" field.
func LastRunStatusNotNil() predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldNotNull(FieldLastRunStatus))
}

// LastRunStatusEqualFold applies the EqualFold predicate on the "last_run_status" field.
func LastRunStatusEqualFold(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldEqualFold(FieldLastRunStatus, v))
}

// LastRunStatusContainsFold applies the ContainsFold predicate on the "last_run_status" field.
func LastRunStatusContainsFold(v string) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.FieldContainsFold(FieldLastRunStatus, v))
}

// HasBackupProfile applies the HasEdge predicate on the "backup_profile" edge.
func HasBackupProfile() predicate.BackupSchedule {
	return predicate.BackupSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BackupProfileTable, BackupProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackupProfileWith applies the HasEdge predicate on the "backup_profile" edge with a given conditions (other predicates).
func HasBackupProfileWith(preds ...predicate.BackupProfile) predicate.BackupSchedule {
	return predicate.BackupSchedule(func(s *sql.Selector) {
		step := newBackupProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BackupSchedule) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BackupSchedule) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BackupSchedule) predicate.BackupSchedule {
	return predicate.BackupSchedule(sql.NotPredicates(p))
}
