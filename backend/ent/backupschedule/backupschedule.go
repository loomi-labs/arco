// Code generated by ent, DO NOT EDIT.

package backupschedule

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the backupschedule type in the database.
	Label = "backup_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMode holds the string denoting the mode field in the database.
	FieldMode = "mode"
	// FieldDailyAt holds the string denoting the daily_at field in the database.
	FieldDailyAt = "daily_at"
	// FieldWeekday holds the string denoting the weekday field in the database.
	FieldWeekday = "weekday"
	// FieldWeeklyAt holds the string denoting the weekly_at field in the database.
	FieldWeeklyAt = "weekly_at"
	// FieldMonthday holds the string denoting the monthday field in the database.
	FieldMonthday = "monthday"
	// FieldMonthlyAt holds the string denoting the monthly_at field in the database.
	FieldMonthlyAt = "monthly_at"
	// FieldNextRun holds the string denoting the next_run field in the database.
	FieldNextRun = "next_run"
	// FieldLastRun holds the string denoting the last_run field in the database.
	FieldLastRun = "last_run"
	// FieldLastRunStatus holds the string denoting the last_run_status field in the database.
	FieldLastRunStatus = "last_run_status"
	// EdgeBackupProfile holds the string denoting the backup_profile edge name in mutations.
	EdgeBackupProfile = "backup_profile"
	// Table holds the table name of the backupschedule in the database.
	Table = "backup_schedules"
	// BackupProfileTable is the table that holds the backup_profile relation/edge.
	BackupProfileTable = "backup_schedules"
	// BackupProfileInverseTable is the table name for the BackupProfile entity.
	// It exists in this package in order to avoid circular dependency with the "backupprofile" package.
	BackupProfileInverseTable = "backup_profiles"
	// BackupProfileColumn is the table column denoting the backup_profile relation/edge.
	BackupProfileColumn = "backup_profile_backup_schedule"
)

// Columns holds all SQL columns for backupschedule fields.
var Columns = []string{
	FieldID,
	FieldUpdatedAt,
	FieldMode,
	FieldDailyAt,
	FieldWeekday,
	FieldWeeklyAt,
	FieldMonthday,
	FieldMonthlyAt,
	FieldNextRun,
	FieldLastRun,
	FieldLastRunStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "backup_schedules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"backup_profile_backup_schedule",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// MonthdayValidator is a validator for the "monthday" field. It is called by the builders before save.
	MonthdayValidator func(uint8) error
)

// Mode defines the type for the "mode" enum field.
type Mode string

// ModeDisabled is the default value of the Mode enum.
const DefaultMode = ModeDisabled

// Mode values.
const (
	ModeDisabled Mode = "disabled"
	ModeHourly   Mode = "hourly"
	ModeDaily    Mode = "daily"
	ModeWeekly   Mode = "weekly"
	ModeMonthly  Mode = "monthly"
)

func (m Mode) String() string {
	return string(m)
}

// ModeValidator is a validator for the "mode" field enum values. It is called by the builders before save.
func ModeValidator(m Mode) error {
	switch m {
	case ModeDisabled, ModeHourly, ModeDaily, ModeWeekly, ModeMonthly:
		return nil
	default:
		return fmt.Errorf("backupschedule: invalid enum value for mode field: %q", m)
	}
}

// Weekday defines the type for the "weekday" enum field.
type Weekday string

// Weekday values.
const (
	WeekdayMonday    Weekday = "monday"
	WeekdayTuesday   Weekday = "tuesday"
	WeekdayWednesday Weekday = "wednesday"
	WeekdayThursday  Weekday = "thursday"
	WeekdayFriday    Weekday = "friday"
	WeekdaySaturday  Weekday = "saturday"
	WeekdaySunday    Weekday = "sunday"
)

func (w Weekday) String() string {
	return string(w)
}

// WeekdayValidator is a validator for the "weekday" field enum values. It is called by the builders before save.
func WeekdayValidator(w Weekday) error {
	switch w {
	case WeekdayMonday, WeekdayTuesday, WeekdayWednesday, WeekdayThursday, WeekdayFriday, WeekdaySaturday, WeekdaySunday:
		return nil
	default:
		return fmt.Errorf("backupschedule: invalid enum value for weekday field: %q", w)
	}
}

// OrderOption defines the ordering options for the BackupSchedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMode orders the results by the mode field.
func ByMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMode, opts...).ToFunc()
}

// ByDailyAt orders the results by the daily_at field.
func ByDailyAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDailyAt, opts...).ToFunc()
}

// ByWeekday orders the results by the weekday field.
func ByWeekday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeekday, opts...).ToFunc()
}

// ByWeeklyAt orders the results by the weekly_at field.
func ByWeeklyAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeeklyAt, opts...).ToFunc()
}

// ByMonthday orders the results by the monthday field.
func ByMonthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthday, opts...).ToFunc()
}

// ByMonthlyAt orders the results by the monthly_at field.
func ByMonthlyAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthlyAt, opts...).ToFunc()
}

// ByNextRun orders the results by the next_run field.
func ByNextRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRun, opts...).ToFunc()
}

// ByLastRun orders the results by the last_run field.
func ByLastRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRun, opts...).ToFunc()
}

// ByLastRunStatus orders the results by the last_run_status field.
func ByLastRunStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunStatus, opts...).ToFunc()
}

// ByBackupProfileField orders the results by backup_profile field.
func ByBackupProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newBackupProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BackupProfileTable, BackupProfileColumn),
	)
}
