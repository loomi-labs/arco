// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/backupschedule"
	"arco/backend/ent/predicate"
	"arco/backend/ent/repository"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BackupProfileUpdate is the builder for updating BackupProfile entities.
type BackupProfileUpdate struct {
	config
	hooks    []Hook
	mutation *BackupProfileMutation
}

// Where appends a list predicates to the BackupProfileUpdate builder.
func (bpu *BackupProfileUpdate) Where(ps ...predicate.BackupProfile) *BackupProfileUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetName sets the "name" field.
func (bpu *BackupProfileUpdate) SetName(s string) *BackupProfileUpdate {
	bpu.mutation.SetName(s)
	return bpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bpu *BackupProfileUpdate) SetNillableName(s *string) *BackupProfileUpdate {
	if s != nil {
		bpu.SetName(*s)
	}
	return bpu
}

// SetPrefix sets the "prefix" field.
func (bpu *BackupProfileUpdate) SetPrefix(s string) *BackupProfileUpdate {
	bpu.mutation.SetPrefix(s)
	return bpu
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (bpu *BackupProfileUpdate) SetNillablePrefix(s *string) *BackupProfileUpdate {
	if s != nil {
		bpu.SetPrefix(*s)
	}
	return bpu
}

// SetBackupPaths sets the "backup_paths" field.
func (bpu *BackupProfileUpdate) SetBackupPaths(s []string) *BackupProfileUpdate {
	bpu.mutation.SetBackupPaths(s)
	return bpu
}

// AppendBackupPaths appends s to the "backup_paths" field.
func (bpu *BackupProfileUpdate) AppendBackupPaths(s []string) *BackupProfileUpdate {
	bpu.mutation.AppendBackupPaths(s)
	return bpu
}

// SetExcludePaths sets the "exclude_paths" field.
func (bpu *BackupProfileUpdate) SetExcludePaths(s []string) *BackupProfileUpdate {
	bpu.mutation.SetExcludePaths(s)
	return bpu
}

// AppendExcludePaths appends s to the "exclude_paths" field.
func (bpu *BackupProfileUpdate) AppendExcludePaths(s []string) *BackupProfileUpdate {
	bpu.mutation.AppendExcludePaths(s)
	return bpu
}

// ClearExcludePaths clears the value of the "exclude_paths" field.
func (bpu *BackupProfileUpdate) ClearExcludePaths() *BackupProfileUpdate {
	bpu.mutation.ClearExcludePaths()
	return bpu
}

// SetIsSetupComplete sets the "is_setup_complete" field.
func (bpu *BackupProfileUpdate) SetIsSetupComplete(b bool) *BackupProfileUpdate {
	bpu.mutation.SetIsSetupComplete(b)
	return bpu
}

// SetNillableIsSetupComplete sets the "is_setup_complete" field if the given value is not nil.
func (bpu *BackupProfileUpdate) SetNillableIsSetupComplete(b *bool) *BackupProfileUpdate {
	if b != nil {
		bpu.SetIsSetupComplete(*b)
	}
	return bpu
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (bpu *BackupProfileUpdate) AddRepositoryIDs(ids ...int) *BackupProfileUpdate {
	bpu.mutation.AddRepositoryIDs(ids...)
	return bpu
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (bpu *BackupProfileUpdate) AddRepositories(r ...*Repository) *BackupProfileUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bpu.AddRepositoryIDs(ids...)
}

// SetBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by ID.
func (bpu *BackupProfileUpdate) SetBackupScheduleID(id int) *BackupProfileUpdate {
	bpu.mutation.SetBackupScheduleID(id)
	return bpu
}

// SetNillableBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by ID if the given value is not nil.
func (bpu *BackupProfileUpdate) SetNillableBackupScheduleID(id *int) *BackupProfileUpdate {
	if id != nil {
		bpu = bpu.SetBackupScheduleID(*id)
	}
	return bpu
}

// SetBackupSchedule sets the "backup_schedule" edge to the BackupSchedule entity.
func (bpu *BackupProfileUpdate) SetBackupSchedule(b *BackupSchedule) *BackupProfileUpdate {
	return bpu.SetBackupScheduleID(b.ID)
}

// Mutation returns the BackupProfileMutation object of the builder.
func (bpu *BackupProfileUpdate) Mutation() *BackupProfileMutation {
	return bpu.mutation
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (bpu *BackupProfileUpdate) ClearRepositories() *BackupProfileUpdate {
	bpu.mutation.ClearRepositories()
	return bpu
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (bpu *BackupProfileUpdate) RemoveRepositoryIDs(ids ...int) *BackupProfileUpdate {
	bpu.mutation.RemoveRepositoryIDs(ids...)
	return bpu
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (bpu *BackupProfileUpdate) RemoveRepositories(r ...*Repository) *BackupProfileUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bpu.RemoveRepositoryIDs(ids...)
}

// ClearBackupSchedule clears the "backup_schedule" edge to the BackupSchedule entity.
func (bpu *BackupProfileUpdate) ClearBackupSchedule() *BackupProfileUpdate {
	bpu.mutation.ClearBackupSchedule()
	return bpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BackupProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bpu.sqlSave, bpu.mutation, bpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BackupProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BackupProfileUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BackupProfileUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bpu *BackupProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(backupprofile.Table, backupprofile.Columns, sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt))
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.Name(); ok {
		_spec.SetField(backupprofile.FieldName, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Prefix(); ok {
		_spec.SetField(backupprofile.FieldPrefix, field.TypeString, value)
	}
	if value, ok := bpu.mutation.BackupPaths(); ok {
		_spec.SetField(backupprofile.FieldBackupPaths, field.TypeJSON, value)
	}
	if value, ok := bpu.mutation.AppendedBackupPaths(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, backupprofile.FieldBackupPaths, value)
		})
	}
	if value, ok := bpu.mutation.ExcludePaths(); ok {
		_spec.SetField(backupprofile.FieldExcludePaths, field.TypeJSON, value)
	}
	if value, ok := bpu.mutation.AppendedExcludePaths(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, backupprofile.FieldExcludePaths, value)
		})
	}
	if bpu.mutation.ExcludePathsCleared() {
		_spec.ClearField(backupprofile.FieldExcludePaths, field.TypeJSON)
	}
	if value, ok := bpu.mutation.IsSetupComplete(); ok {
		_spec.SetField(backupprofile.FieldIsSetupComplete, field.TypeBool, value)
	}
	if bpu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !bpu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.BackupScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   backupprofile.BackupScheduleTable,
			Columns: []string{backupprofile.BackupScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.BackupScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   backupprofile.BackupScheduleTable,
			Columns: []string{backupprofile.BackupScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{backupprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bpu.mutation.done = true
	return n, nil
}

// BackupProfileUpdateOne is the builder for updating a single BackupProfile entity.
type BackupProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BackupProfileMutation
}

// SetName sets the "name" field.
func (bpuo *BackupProfileUpdateOne) SetName(s string) *BackupProfileUpdateOne {
	bpuo.mutation.SetName(s)
	return bpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bpuo *BackupProfileUpdateOne) SetNillableName(s *string) *BackupProfileUpdateOne {
	if s != nil {
		bpuo.SetName(*s)
	}
	return bpuo
}

// SetPrefix sets the "prefix" field.
func (bpuo *BackupProfileUpdateOne) SetPrefix(s string) *BackupProfileUpdateOne {
	bpuo.mutation.SetPrefix(s)
	return bpuo
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (bpuo *BackupProfileUpdateOne) SetNillablePrefix(s *string) *BackupProfileUpdateOne {
	if s != nil {
		bpuo.SetPrefix(*s)
	}
	return bpuo
}

// SetBackupPaths sets the "backup_paths" field.
func (bpuo *BackupProfileUpdateOne) SetBackupPaths(s []string) *BackupProfileUpdateOne {
	bpuo.mutation.SetBackupPaths(s)
	return bpuo
}

// AppendBackupPaths appends s to the "backup_paths" field.
func (bpuo *BackupProfileUpdateOne) AppendBackupPaths(s []string) *BackupProfileUpdateOne {
	bpuo.mutation.AppendBackupPaths(s)
	return bpuo
}

// SetExcludePaths sets the "exclude_paths" field.
func (bpuo *BackupProfileUpdateOne) SetExcludePaths(s []string) *BackupProfileUpdateOne {
	bpuo.mutation.SetExcludePaths(s)
	return bpuo
}

// AppendExcludePaths appends s to the "exclude_paths" field.
func (bpuo *BackupProfileUpdateOne) AppendExcludePaths(s []string) *BackupProfileUpdateOne {
	bpuo.mutation.AppendExcludePaths(s)
	return bpuo
}

// ClearExcludePaths clears the value of the "exclude_paths" field.
func (bpuo *BackupProfileUpdateOne) ClearExcludePaths() *BackupProfileUpdateOne {
	bpuo.mutation.ClearExcludePaths()
	return bpuo
}

// SetIsSetupComplete sets the "is_setup_complete" field.
func (bpuo *BackupProfileUpdateOne) SetIsSetupComplete(b bool) *BackupProfileUpdateOne {
	bpuo.mutation.SetIsSetupComplete(b)
	return bpuo
}

// SetNillableIsSetupComplete sets the "is_setup_complete" field if the given value is not nil.
func (bpuo *BackupProfileUpdateOne) SetNillableIsSetupComplete(b *bool) *BackupProfileUpdateOne {
	if b != nil {
		bpuo.SetIsSetupComplete(*b)
	}
	return bpuo
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (bpuo *BackupProfileUpdateOne) AddRepositoryIDs(ids ...int) *BackupProfileUpdateOne {
	bpuo.mutation.AddRepositoryIDs(ids...)
	return bpuo
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (bpuo *BackupProfileUpdateOne) AddRepositories(r ...*Repository) *BackupProfileUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bpuo.AddRepositoryIDs(ids...)
}

// SetBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by ID.
func (bpuo *BackupProfileUpdateOne) SetBackupScheduleID(id int) *BackupProfileUpdateOne {
	bpuo.mutation.SetBackupScheduleID(id)
	return bpuo
}

// SetNillableBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by ID if the given value is not nil.
func (bpuo *BackupProfileUpdateOne) SetNillableBackupScheduleID(id *int) *BackupProfileUpdateOne {
	if id != nil {
		bpuo = bpuo.SetBackupScheduleID(*id)
	}
	return bpuo
}

// SetBackupSchedule sets the "backup_schedule" edge to the BackupSchedule entity.
func (bpuo *BackupProfileUpdateOne) SetBackupSchedule(b *BackupSchedule) *BackupProfileUpdateOne {
	return bpuo.SetBackupScheduleID(b.ID)
}

// Mutation returns the BackupProfileMutation object of the builder.
func (bpuo *BackupProfileUpdateOne) Mutation() *BackupProfileMutation {
	return bpuo.mutation
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (bpuo *BackupProfileUpdateOne) ClearRepositories() *BackupProfileUpdateOne {
	bpuo.mutation.ClearRepositories()
	return bpuo
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (bpuo *BackupProfileUpdateOne) RemoveRepositoryIDs(ids ...int) *BackupProfileUpdateOne {
	bpuo.mutation.RemoveRepositoryIDs(ids...)
	return bpuo
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (bpuo *BackupProfileUpdateOne) RemoveRepositories(r ...*Repository) *BackupProfileUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bpuo.RemoveRepositoryIDs(ids...)
}

// ClearBackupSchedule clears the "backup_schedule" edge to the BackupSchedule entity.
func (bpuo *BackupProfileUpdateOne) ClearBackupSchedule() *BackupProfileUpdateOne {
	bpuo.mutation.ClearBackupSchedule()
	return bpuo
}

// Where appends a list predicates to the BackupProfileUpdate builder.
func (bpuo *BackupProfileUpdateOne) Where(ps ...predicate.BackupProfile) *BackupProfileUpdateOne {
	bpuo.mutation.Where(ps...)
	return bpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BackupProfileUpdateOne) Select(field string, fields ...string) *BackupProfileUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BackupProfile entity.
func (bpuo *BackupProfileUpdateOne) Save(ctx context.Context) (*BackupProfile, error) {
	return withHooks(ctx, bpuo.sqlSave, bpuo.mutation, bpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BackupProfileUpdateOne) SaveX(ctx context.Context) *BackupProfile {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BackupProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BackupProfileUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bpuo *BackupProfileUpdateOne) sqlSave(ctx context.Context) (_node *BackupProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(backupprofile.Table, backupprofile.Columns, sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt))
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BackupProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, backupprofile.FieldID)
		for _, f := range fields {
			if !backupprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != backupprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpuo.mutation.Name(); ok {
		_spec.SetField(backupprofile.FieldName, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Prefix(); ok {
		_spec.SetField(backupprofile.FieldPrefix, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.BackupPaths(); ok {
		_spec.SetField(backupprofile.FieldBackupPaths, field.TypeJSON, value)
	}
	if value, ok := bpuo.mutation.AppendedBackupPaths(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, backupprofile.FieldBackupPaths, value)
		})
	}
	if value, ok := bpuo.mutation.ExcludePaths(); ok {
		_spec.SetField(backupprofile.FieldExcludePaths, field.TypeJSON, value)
	}
	if value, ok := bpuo.mutation.AppendedExcludePaths(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, backupprofile.FieldExcludePaths, value)
		})
	}
	if bpuo.mutation.ExcludePathsCleared() {
		_spec.ClearField(backupprofile.FieldExcludePaths, field.TypeJSON)
	}
	if value, ok := bpuo.mutation.IsSetupComplete(); ok {
		_spec.SetField(backupprofile.FieldIsSetupComplete, field.TypeBool, value)
	}
	if bpuo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !bpuo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.BackupScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   backupprofile.BackupScheduleTable,
			Columns: []string{backupprofile.BackupScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.BackupScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   backupprofile.BackupScheduleTable,
			Columns: []string{backupprofile.BackupScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BackupProfile{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{backupprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bpuo.mutation.done = true
	return _node, nil
}
