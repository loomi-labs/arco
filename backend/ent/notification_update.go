// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/notification"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationUpdate builder.
func (_u *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationUpdate) SetUpdatedAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSeen sets the "seen" field.
func (_u *NotificationUpdate) SetSeen(v bool) *NotificationUpdate {
	_u.mutation.SetSeen(v)
	return _u
}

// SetNillableSeen sets the "seen" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableSeen(v *bool) *NotificationUpdate {
	if v != nil {
		_u.SetSeen(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *NotificationUpdate) SetAction(v notification.Action) *NotificationUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableAction(v *notification.Action) *NotificationUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// ClearAction clears the value of the "action" field.
func (_u *NotificationUpdate) ClearAction() *NotificationUpdate {
	_u.mutation.ClearAction()
	return _u
}

// Mutation returns the NotificationMutation object of the builder.
func (_u *NotificationUpdate) Mutation() *NotificationMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationUpdate) check() error {
	if v, ok := _u.mutation.Action(); ok {
		if err := notification.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Notification.action": %w`, err)}
		}
	}
	if _u.mutation.BackupProfileCleared() && len(_u.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.backup_profile"`)
	}
	if _u.mutation.RepositoryCleared() && len(_u.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Seen(); ok {
		_spec.SetField(notification.FieldSeen, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(notification.FieldAction, field.TypeEnum, value)
	}
	if _u.mutation.ActionCleared() {
		_spec.ClearField(notification.FieldAction, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationUpdateOne) SetUpdatedAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSeen sets the "seen" field.
func (_u *NotificationUpdateOne) SetSeen(v bool) *NotificationUpdateOne {
	_u.mutation.SetSeen(v)
	return _u
}

// SetNillableSeen sets the "seen" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableSeen(v *bool) *NotificationUpdateOne {
	if v != nil {
		_u.SetSeen(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *NotificationUpdateOne) SetAction(v notification.Action) *NotificationUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableAction(v *notification.Action) *NotificationUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// ClearAction clears the value of the "action" field.
func (_u *NotificationUpdateOne) ClearAction() *NotificationUpdateOne {
	_u.mutation.ClearAction()
	return _u
}

// Mutation returns the NotificationMutation object of the builder.
func (_u *NotificationUpdateOne) Mutation() *NotificationMutation {
	return _u.mutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (_u *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Notification entity.
func (_u *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationUpdateOne) check() error {
	if v, ok := _u.mutation.Action(); ok {
		if err := notification.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Notification.action": %w`, err)}
		}
	}
	if _u.mutation.BackupProfileCleared() && len(_u.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.backup_profile"`)
	}
	if _u.mutation.RepositoryCleared() && len(_u.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Seen(); ok {
		_spec.SetField(notification.FieldSeen, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(notification.FieldAction, field.TypeEnum, value)
	}
	if _u.mutation.ActionCleared() {
		_spec.ClearField(notification.FieldAction, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Notification{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
