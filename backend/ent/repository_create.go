// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/notification"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RepositoryCreate) SetName(s string) *RepositoryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetLocation sets the "location" field.
func (rc *RepositoryCreate) SetLocation(s string) *RepositoryCreate {
	rc.mutation.SetLocation(s)
	return rc
}

// SetPassword sets the "password" field.
func (rc *RepositoryCreate) SetPassword(s string) *RepositoryCreate {
	rc.mutation.SetPassword(s)
	return rc
}

// SetNextIntegrityCheck sets the "next_integrity_check" field.
func (rc *RepositoryCreate) SetNextIntegrityCheck(t time.Time) *RepositoryCreate {
	rc.mutation.SetNextIntegrityCheck(t)
	return rc
}

// SetNillableNextIntegrityCheck sets the "next_integrity_check" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableNextIntegrityCheck(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetNextIntegrityCheck(*t)
	}
	return rc
}

// SetStatsTotalChunks sets the "stats_total_chunks" field.
func (rc *RepositoryCreate) SetStatsTotalChunks(i int) *RepositoryCreate {
	rc.mutation.SetStatsTotalChunks(i)
	return rc
}

// SetNillableStatsTotalChunks sets the "stats_total_chunks" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableStatsTotalChunks(i *int) *RepositoryCreate {
	if i != nil {
		rc.SetStatsTotalChunks(*i)
	}
	return rc
}

// SetStatsTotalSize sets the "stats_total_size" field.
func (rc *RepositoryCreate) SetStatsTotalSize(i int) *RepositoryCreate {
	rc.mutation.SetStatsTotalSize(i)
	return rc
}

// SetNillableStatsTotalSize sets the "stats_total_size" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableStatsTotalSize(i *int) *RepositoryCreate {
	if i != nil {
		rc.SetStatsTotalSize(*i)
	}
	return rc
}

// SetStatsTotalCsize sets the "stats_total_csize" field.
func (rc *RepositoryCreate) SetStatsTotalCsize(i int) *RepositoryCreate {
	rc.mutation.SetStatsTotalCsize(i)
	return rc
}

// SetNillableStatsTotalCsize sets the "stats_total_csize" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableStatsTotalCsize(i *int) *RepositoryCreate {
	if i != nil {
		rc.SetStatsTotalCsize(*i)
	}
	return rc
}

// SetStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field.
func (rc *RepositoryCreate) SetStatsTotalUniqueChunks(i int) *RepositoryCreate {
	rc.mutation.SetStatsTotalUniqueChunks(i)
	return rc
}

// SetNillableStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableStatsTotalUniqueChunks(i *int) *RepositoryCreate {
	if i != nil {
		rc.SetStatsTotalUniqueChunks(*i)
	}
	return rc
}

// SetStatsUniqueSize sets the "stats_unique_size" field.
func (rc *RepositoryCreate) SetStatsUniqueSize(i int) *RepositoryCreate {
	rc.mutation.SetStatsUniqueSize(i)
	return rc
}

// SetNillableStatsUniqueSize sets the "stats_unique_size" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableStatsUniqueSize(i *int) *RepositoryCreate {
	if i != nil {
		rc.SetStatsUniqueSize(*i)
	}
	return rc
}

// SetStatsUniqueCsize sets the "stats_unique_csize" field.
func (rc *RepositoryCreate) SetStatsUniqueCsize(i int) *RepositoryCreate {
	rc.mutation.SetStatsUniqueCsize(i)
	return rc
}

// SetNillableStatsUniqueCsize sets the "stats_unique_csize" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableStatsUniqueCsize(i *int) *RepositoryCreate {
	if i != nil {
		rc.SetStatsUniqueCsize(*i)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(i int) *RepositoryCreate {
	rc.mutation.SetID(i)
	return rc
}

// AddBackupProfileIDs adds the "backup_profiles" edge to the BackupProfile entity by IDs.
func (rc *RepositoryCreate) AddBackupProfileIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddBackupProfileIDs(ids...)
	return rc
}

// AddBackupProfiles adds the "backup_profiles" edges to the BackupProfile entity.
func (rc *RepositoryCreate) AddBackupProfiles(b ...*BackupProfile) *RepositoryCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rc.AddBackupProfileIDs(ids...)
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by IDs.
func (rc *RepositoryCreate) AddArchiveIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddArchiveIDs(ids...)
	return rc
}

// AddArchives adds the "archives" edges to the Archive entity.
func (rc *RepositoryCreate) AddArchives(a ...*Archive) *RepositoryCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddArchiveIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (rc *RepositoryCreate) AddNotificationIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddNotificationIDs(ids...)
	return rc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (rc *RepositoryCreate) AddNotifications(n ...*Notification) *RepositoryCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rc.AddNotificationIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RepositoryCreate) defaults() {
	if _, ok := rc.mutation.StatsTotalChunks(); !ok {
		v := repository.DefaultStatsTotalChunks
		rc.mutation.SetStatsTotalChunks(v)
	}
	if _, ok := rc.mutation.StatsTotalSize(); !ok {
		v := repository.DefaultStatsTotalSize
		rc.mutation.SetStatsTotalSize(v)
	}
	if _, ok := rc.mutation.StatsTotalCsize(); !ok {
		v := repository.DefaultStatsTotalCsize
		rc.mutation.SetStatsTotalCsize(v)
	}
	if _, ok := rc.mutation.StatsTotalUniqueChunks(); !ok {
		v := repository.DefaultStatsTotalUniqueChunks
		rc.mutation.SetStatsTotalUniqueChunks(v)
	}
	if _, ok := rc.mutation.StatsUniqueSize(); !ok {
		v := repository.DefaultStatsUniqueSize
		rc.mutation.SetStatsUniqueSize(v)
	}
	if _, ok := rc.mutation.StatsUniqueCsize(); !ok {
		v := repository.DefaultStatsUniqueCsize
		rc.mutation.SetStatsUniqueCsize(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if _, ok := rc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Repository.location"`)}
	}
	if _, ok := rc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Repository.password"`)}
	}
	if _, ok := rc.mutation.StatsTotalChunks(); !ok {
		return &ValidationError{Name: "stats_total_chunks", err: errors.New(`ent: missing required field "Repository.stats_total_chunks"`)}
	}
	if _, ok := rc.mutation.StatsTotalSize(); !ok {
		return &ValidationError{Name: "stats_total_size", err: errors.New(`ent: missing required field "Repository.stats_total_size"`)}
	}
	if _, ok := rc.mutation.StatsTotalCsize(); !ok {
		return &ValidationError{Name: "stats_total_csize", err: errors.New(`ent: missing required field "Repository.stats_total_csize"`)}
	}
	if _, ok := rc.mutation.StatsTotalUniqueChunks(); !ok {
		return &ValidationError{Name: "stats_total_unique_chunks", err: errors.New(`ent: missing required field "Repository.stats_total_unique_chunks"`)}
	}
	if _, ok := rc.mutation.StatsUniqueSize(); !ok {
		return &ValidationError{Name: "stats_unique_size", err: errors.New(`ent: missing required field "Repository.stats_unique_size"`)}
	}
	if _, ok := rc.mutation.StatsUniqueCsize(); !ok {
		return &ValidationError{Name: "stats_unique_csize", err: errors.New(`ent: missing required field "Repository.stats_unique_csize"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Location(); ok {
		_spec.SetField(repository.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := rc.mutation.Password(); ok {
		_spec.SetField(repository.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := rc.mutation.NextIntegrityCheck(); ok {
		_spec.SetField(repository.FieldNextIntegrityCheck, field.TypeTime, value)
		_node.NextIntegrityCheck = &value
	}
	if value, ok := rc.mutation.StatsTotalChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalChunks, field.TypeInt, value)
		_node.StatsTotalChunks = value
	}
	if value, ok := rc.mutation.StatsTotalSize(); ok {
		_spec.SetField(repository.FieldStatsTotalSize, field.TypeInt, value)
		_node.StatsTotalSize = value
	}
	if value, ok := rc.mutation.StatsTotalCsize(); ok {
		_spec.SetField(repository.FieldStatsTotalCsize, field.TypeInt, value)
		_node.StatsTotalCsize = value
	}
	if value, ok := rc.mutation.StatsTotalUniqueChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
		_node.StatsTotalUniqueChunks = value
	}
	if value, ok := rc.mutation.StatsUniqueSize(); ok {
		_spec.SetField(repository.FieldStatsUniqueSize, field.TypeInt, value)
		_node.StatsUniqueSize = value
	}
	if value, ok := rc.mutation.StatsUniqueCsize(); ok {
		_spec.SetField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
		_node.StatsUniqueCsize = value
	}
	if nodes := rc.mutation.BackupProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ArchivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	err      error
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
