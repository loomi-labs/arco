// Code generated by ent, DO NOT EDIT.

package settings

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTheme holds the string denoting the theme field in the database.
	FieldTheme = "theme"
	// FieldShowWelcome holds the string denoting the show_welcome field in the database.
	FieldShowWelcome = "show_welcome"
	// Table holds the table name of the settings in the database.
	Table = "settings"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldTheme,
	FieldShowWelcome,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultShowWelcome holds the default value on creation for the "show_welcome" field.
	DefaultShowWelcome bool
)

// Theme defines the type for the "theme" enum field.
type Theme string

// ThemeSystem is the default value of the Theme enum.
const DefaultTheme = ThemeSystem

// Theme values.
const (
	ThemeSystem Theme = "system"
	ThemeLight  Theme = "light"
	ThemeDark   Theme = "dark"
)

func (t Theme) String() string {
	return string(t)
}

// ThemeValidator is a validator for the "theme" field enum values. It is called by the builders before save.
func ThemeValidator(t Theme) error {
	switch t {
	case ThemeSystem, ThemeLight, ThemeDark:
		return nil
	default:
		return fmt.Errorf("settings: invalid enum value for theme field: %q", t)
	}
}

// OrderOption defines the ordering options for the Settings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTheme orders the results by the theme field.
func ByTheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTheme, opts...).ToFunc()
}

// ByShowWelcome orders the results by the show_welcome field.
func ByShowWelcome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowWelcome, opts...).ToFunc()
}
