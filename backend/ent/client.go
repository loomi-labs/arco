// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"timebender/backend/ent/migrate"

	"timebender/backend/ent/archive"
	"timebender/backend/ent/backupprofile"
	"timebender/backend/ent/repository"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Archive is the client for interacting with the Archive builders.
	Archive *ArchiveClient
	// BackupProfile is the client for interacting with the BackupProfile builders.
	BackupProfile *BackupProfileClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Archive = NewArchiveClient(c.config)
	c.BackupProfile = NewBackupProfileClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Archive:       NewArchiveClient(cfg),
		BackupProfile: NewBackupProfileClient(cfg),
		Repository:    NewRepositoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Archive:       NewArchiveClient(cfg),
		BackupProfile: NewBackupProfileClient(cfg),
		Repository:    NewRepositoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Archive.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Archive.Use(hooks...)
	c.BackupProfile.Use(hooks...)
	c.Repository.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Archive.Intercept(interceptors...)
	c.BackupProfile.Intercept(interceptors...)
	c.Repository.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArchiveMutation:
		return c.Archive.mutate(ctx, m)
	case *BackupProfileMutation:
		return c.BackupProfile.mutate(ctx, m)
	case *RepositoryMutation:
		return c.Repository.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ArchiveClient is a client for the Archive schema.
type ArchiveClient struct {
	config
}

// NewArchiveClient returns a client for the Archive from the given config.
func NewArchiveClient(c config) *ArchiveClient {
	return &ArchiveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `archive.Hooks(f(g(h())))`.
func (c *ArchiveClient) Use(hooks ...Hook) {
	c.hooks.Archive = append(c.hooks.Archive, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `archive.Intercept(f(g(h())))`.
func (c *ArchiveClient) Intercept(interceptors ...Interceptor) {
	c.inters.Archive = append(c.inters.Archive, interceptors...)
}

// Create returns a builder for creating a Archive entity.
func (c *ArchiveClient) Create() *ArchiveCreate {
	mutation := newArchiveMutation(c.config, OpCreate)
	return &ArchiveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Archive entities.
func (c *ArchiveClient) CreateBulk(builders ...*ArchiveCreate) *ArchiveCreateBulk {
	return &ArchiveCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArchiveClient) MapCreateBulk(slice any, setFunc func(*ArchiveCreate, int)) *ArchiveCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArchiveCreateBulk{err: fmt.Errorf("calling to ArchiveClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArchiveCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArchiveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Archive.
func (c *ArchiveClient) Update() *ArchiveUpdate {
	mutation := newArchiveMutation(c.config, OpUpdate)
	return &ArchiveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArchiveClient) UpdateOne(a *Archive) *ArchiveUpdateOne {
	mutation := newArchiveMutation(c.config, OpUpdateOne, withArchive(a))
	return &ArchiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArchiveClient) UpdateOneID(id int) *ArchiveUpdateOne {
	mutation := newArchiveMutation(c.config, OpUpdateOne, withArchiveID(id))
	return &ArchiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Archive.
func (c *ArchiveClient) Delete() *ArchiveDelete {
	mutation := newArchiveMutation(c.config, OpDelete)
	return &ArchiveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArchiveClient) DeleteOne(a *Archive) *ArchiveDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArchiveClient) DeleteOneID(id int) *ArchiveDeleteOne {
	builder := c.Delete().Where(archive.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArchiveDeleteOne{builder}
}

// Query returns a query builder for Archive.
func (c *ArchiveClient) Query() *ArchiveQuery {
	return &ArchiveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArchive},
		inters: c.Interceptors(),
	}
}

// Get returns a Archive entity by its id.
func (c *ArchiveClient) Get(ctx context.Context, id int) (*Archive, error) {
	return c.Query().Where(archive.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArchiveClient) GetX(ctx context.Context, id int) *Archive {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepository queries the repository edge of a Archive.
func (c *ArchiveClient) QueryRepository(a *Archive) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archive.Table, archive.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, archive.RepositoryTable, archive.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArchiveClient) Hooks() []Hook {
	return c.hooks.Archive
}

// Interceptors returns the client interceptors.
func (c *ArchiveClient) Interceptors() []Interceptor {
	return c.inters.Archive
}

func (c *ArchiveClient) mutate(ctx context.Context, m *ArchiveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArchiveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArchiveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArchiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArchiveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Archive mutation op: %q", m.Op())
	}
}

// BackupProfileClient is a client for the BackupProfile schema.
type BackupProfileClient struct {
	config
}

// NewBackupProfileClient returns a client for the BackupProfile from the given config.
func NewBackupProfileClient(c config) *BackupProfileClient {
	return &BackupProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `backupprofile.Hooks(f(g(h())))`.
func (c *BackupProfileClient) Use(hooks ...Hook) {
	c.hooks.BackupProfile = append(c.hooks.BackupProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `backupprofile.Intercept(f(g(h())))`.
func (c *BackupProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.BackupProfile = append(c.inters.BackupProfile, interceptors...)
}

// Create returns a builder for creating a BackupProfile entity.
func (c *BackupProfileClient) Create() *BackupProfileCreate {
	mutation := newBackupProfileMutation(c.config, OpCreate)
	return &BackupProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BackupProfile entities.
func (c *BackupProfileClient) CreateBulk(builders ...*BackupProfileCreate) *BackupProfileCreateBulk {
	return &BackupProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BackupProfileClient) MapCreateBulk(slice any, setFunc func(*BackupProfileCreate, int)) *BackupProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BackupProfileCreateBulk{err: fmt.Errorf("calling to BackupProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BackupProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BackupProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BackupProfile.
func (c *BackupProfileClient) Update() *BackupProfileUpdate {
	mutation := newBackupProfileMutation(c.config, OpUpdate)
	return &BackupProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BackupProfileClient) UpdateOne(bp *BackupProfile) *BackupProfileUpdateOne {
	mutation := newBackupProfileMutation(c.config, OpUpdateOne, withBackupProfile(bp))
	return &BackupProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BackupProfileClient) UpdateOneID(id int) *BackupProfileUpdateOne {
	mutation := newBackupProfileMutation(c.config, OpUpdateOne, withBackupProfileID(id))
	return &BackupProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BackupProfile.
func (c *BackupProfileClient) Delete() *BackupProfileDelete {
	mutation := newBackupProfileMutation(c.config, OpDelete)
	return &BackupProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BackupProfileClient) DeleteOne(bp *BackupProfile) *BackupProfileDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BackupProfileClient) DeleteOneID(id int) *BackupProfileDeleteOne {
	builder := c.Delete().Where(backupprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BackupProfileDeleteOne{builder}
}

// Query returns a query builder for BackupProfile.
func (c *BackupProfileClient) Query() *BackupProfileQuery {
	return &BackupProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBackupProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a BackupProfile entity by its id.
func (c *BackupProfileClient) Get(ctx context.Context, id int) (*BackupProfile, error) {
	return c.Query().Where(backupprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BackupProfileClient) GetX(ctx context.Context, id int) *BackupProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepositories queries the repositories edge of a BackupProfile.
func (c *BackupProfileClient) QueryRepositories(bp *BackupProfile) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(backupprofile.Table, backupprofile.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, backupprofile.RepositoriesTable, backupprofile.RepositoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BackupProfileClient) Hooks() []Hook {
	return c.hooks.BackupProfile
}

// Interceptors returns the client interceptors.
func (c *BackupProfileClient) Interceptors() []Interceptor {
	return c.inters.BackupProfile
}

func (c *BackupProfileClient) mutate(ctx context.Context, m *BackupProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BackupProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BackupProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BackupProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BackupProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BackupProfile mutation op: %q", m.Op())
	}
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repository.Intercept(f(g(h())))`.
func (c *RepositoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Repository = append(c.inters.Repository, interceptors...)
}

// Create returns a builder for creating a Repository entity.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepositoryClient) MapCreateBulk(slice any, setFunc func(*RepositoryCreate, int)) *RepositoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepositoryCreateBulk{err: fmt.Errorf("calling to RepositoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepositoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id int) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepositoryClient) DeleteOneID(id int) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepository},
		inters: c.Interceptors(),
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id int) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id int) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBackupprofiles queries the backupprofiles edge of a Repository.
func (c *RepositoryClient) QueryBackupprofiles(r *Repository) *BackupProfileQuery {
	query := (&BackupProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(backupprofile.Table, backupprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, repository.BackupprofilesTable, repository.BackupprofilesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchives queries the archives edge of a Repository.
func (c *RepositoryClient) QueryArchives(r *Repository) *ArchiveQuery {
	query := (&ArchiveClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(archive.Table, archive.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, repository.ArchivesTable, repository.ArchivesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}

// Interceptors returns the client interceptors.
func (c *RepositoryClient) Interceptors() []Interceptor {
	return c.inters.Repository
}

func (c *RepositoryClient) mutate(ctx context.Context, m *RepositoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Repository mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Archive, BackupProfile, Repository []ent.Hook
	}
	inters struct {
		Archive, BackupProfile, Repository []ent.Interceptor
	}
)
