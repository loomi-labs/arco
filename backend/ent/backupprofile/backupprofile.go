// Code generated by ent, DO NOT EDIT.

package backupprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the backupprofile type in the database.
	Label = "backup_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrefix holds the string denoting the prefix field in the database.
	FieldPrefix = "prefix"
	// FieldDirectories holds the string denoting the directories field in the database.
	FieldDirectories = "directories"
	// FieldIsSetupComplete holds the string denoting the is_setup_complete field in the database.
	FieldIsSetupComplete = "is_setup_complete"
	// EdgeRepositories holds the string denoting the repositories edge name in mutations.
	EdgeRepositories = "repositories"
	// EdgeBackupSchedule holds the string denoting the backup_schedule edge name in mutations.
	EdgeBackupSchedule = "backup_schedule"
	// Table holds the table name of the backupprofile in the database.
	Table = "backup_profiles"
	// RepositoriesTable is the table that holds the repositories relation/edge. The primary key declared below.
	RepositoriesTable = "backup_profile_repositories"
	// RepositoriesInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoriesInverseTable = "repositories"
	// BackupScheduleTable is the table that holds the backup_schedule relation/edge.
	BackupScheduleTable = "backup_schedules"
	// BackupScheduleInverseTable is the table name for the BackupSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "backupschedule" package.
	BackupScheduleInverseTable = "backup_schedules"
	// BackupScheduleColumn is the table column denoting the backup_schedule relation/edge.
	BackupScheduleColumn = "backup_profile_backup_schedule"
)

// Columns holds all SQL columns for backupprofile fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrefix,
	FieldDirectories,
	FieldIsSetupComplete,
}

var (
	// RepositoriesPrimaryKey and RepositoriesColumn2 are the table columns denoting the
	// primary key for the repositories relation (M2M).
	RepositoriesPrimaryKey = []string{"backup_profile_id", "repository_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsSetupComplete holds the default value on creation for the "is_setup_complete" field.
	DefaultIsSetupComplete bool
)

// OrderOption defines the ordering options for the BackupProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrefix orders the results by the prefix field.
func ByPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrefix, opts...).ToFunc()
}

// ByIsSetupComplete orders the results by the is_setup_complete field.
func ByIsSetupComplete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSetupComplete, opts...).ToFunc()
}

// ByRepositoriesCount orders the results by repositories count.
func ByRepositoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepositoriesStep(), opts...)
	}
}

// ByRepositories orders the results by repositories terms.
func ByRepositories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBackupScheduleField orders the results by backup_schedule field.
func ByBackupScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupScheduleStep(), sql.OrderByField(field, opts...))
	}
}
func newRepositoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RepositoriesTable, RepositoriesPrimaryKey...),
	)
}
func newBackupScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BackupScheduleTable, BackupScheduleColumn),
	)
}
