// Code generated by ent, DO NOT EDIT.

package backupprofile

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the backupprofile type in the database.
	Label = "backup_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrefix holds the string denoting the prefix field in the database.
	FieldPrefix = "prefix"
	// FieldBackupPaths holds the string denoting the backup_paths field in the database.
	FieldBackupPaths = "backup_paths"
	// FieldExcludePaths holds the string denoting the exclude_paths field in the database.
	FieldExcludePaths = "exclude_paths"
	// FieldIsSetupComplete holds the string denoting the is_setup_complete field in the database.
	FieldIsSetupComplete = "is_setup_complete"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// EdgeRepositories holds the string denoting the repositories edge name in mutations.
	EdgeRepositories = "repositories"
	// EdgeArchives holds the string denoting the archives edge name in mutations.
	EdgeArchives = "archives"
	// EdgeBackupSchedule holds the string denoting the backup_schedule edge name in mutations.
	EdgeBackupSchedule = "backup_schedule"
	// EdgeFailedBackupRuns holds the string denoting the failed_backup_runs edge name in mutations.
	EdgeFailedBackupRuns = "failed_backup_runs"
	// Table holds the table name of the backupprofile in the database.
	Table = "backup_profiles"
	// RepositoriesTable is the table that holds the repositories relation/edge. The primary key declared below.
	RepositoriesTable = "backup_profile_repositories"
	// RepositoriesInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoriesInverseTable = "repositories"
	// ArchivesTable is the table that holds the archives relation/edge.
	ArchivesTable = "archives"
	// ArchivesInverseTable is the table name for the Archive entity.
	// It exists in this package in order to avoid circular dependency with the "archive" package.
	ArchivesInverseTable = "archives"
	// ArchivesColumn is the table column denoting the archives relation/edge.
	ArchivesColumn = "backup_profile_archives"
	// BackupScheduleTable is the table that holds the backup_schedule relation/edge.
	BackupScheduleTable = "backup_schedules"
	// BackupScheduleInverseTable is the table name for the BackupSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "backupschedule" package.
	BackupScheduleInverseTable = "backup_schedules"
	// BackupScheduleColumn is the table column denoting the backup_schedule relation/edge.
	BackupScheduleColumn = "backup_profile_backup_schedule"
	// FailedBackupRunsTable is the table that holds the failed_backup_runs relation/edge.
	FailedBackupRunsTable = "failed_backup_runs"
	// FailedBackupRunsInverseTable is the table name for the FailedBackupRun entity.
	// It exists in this package in order to avoid circular dependency with the "failedbackuprun" package.
	FailedBackupRunsInverseTable = "failed_backup_runs"
	// FailedBackupRunsColumn is the table column denoting the failed_backup_runs relation/edge.
	FailedBackupRunsColumn = "failed_backup_run_backup_profile"
)

// Columns holds all SQL columns for backupprofile fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrefix,
	FieldBackupPaths,
	FieldExcludePaths,
	FieldIsSetupComplete,
	FieldIcon,
}

var (
	// RepositoriesPrimaryKey and RepositoriesColumn2 are the table columns denoting the
	// primary key for the repositories relation (M2M).
	RepositoriesPrimaryKey = []string{"backup_profile_id", "repository_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBackupPaths holds the default value on creation for the "backup_paths" field.
	DefaultBackupPaths []string
	// DefaultExcludePaths holds the default value on creation for the "exclude_paths" field.
	DefaultExcludePaths []string
	// DefaultIsSetupComplete holds the default value on creation for the "is_setup_complete" field.
	DefaultIsSetupComplete bool
)

// Icon defines the type for the "icon" enum field.
type Icon string

// Icon values.
const (
	IconHome      Icon = "home"
	IconBriefcase Icon = "briefcase"
	IconBook      Icon = "book"
	IconEnvelope  Icon = "envelope"
	IconCamera    Icon = "camera"
	IconFire      Icon = "fire"
)

func (i Icon) String() string {
	return string(i)
}

// IconValidator is a validator for the "icon" field enum values. It is called by the builders before save.
func IconValidator(i Icon) error {
	switch i {
	case IconHome, IconBriefcase, IconBook, IconEnvelope, IconCamera, IconFire:
		return nil
	default:
		return fmt.Errorf("backupprofile: invalid enum value for icon field: %q", i)
	}
}

// OrderOption defines the ordering options for the BackupProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrefix orders the results by the prefix field.
func ByPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrefix, opts...).ToFunc()
}

// ByIsSetupComplete orders the results by the is_setup_complete field.
func ByIsSetupComplete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSetupComplete, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByRepositoriesCount orders the results by repositories count.
func ByRepositoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepositoriesStep(), opts...)
	}
}

// ByRepositories orders the results by repositories terms.
func ByRepositories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArchivesCount orders the results by archives count.
func ByArchivesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArchivesStep(), opts...)
	}
}

// ByArchives orders the results by archives terms.
func ByArchives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchivesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBackupScheduleField orders the results by backup_schedule field.
func ByBackupScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupScheduleStep(), sql.OrderByField(field, opts...))
	}
}

// ByFailedBackupRunsCount orders the results by failed_backup_runs count.
func ByFailedBackupRunsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFailedBackupRunsStep(), opts...)
	}
}

// ByFailedBackupRuns orders the results by failed_backup_runs terms.
func ByFailedBackupRuns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFailedBackupRunsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRepositoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RepositoriesTable, RepositoriesPrimaryKey...),
	)
}
func newArchivesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchivesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArchivesTable, ArchivesColumn),
	)
}
func newBackupScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BackupScheduleTable, BackupScheduleColumn),
	)
}
func newFailedBackupRunsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FailedBackupRunsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FailedBackupRunsTable, FailedBackupRunsColumn),
	)
}
