// Code generated by ent, DO NOT EDIT.

package backupprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the backupprofile type in the database.
	Label = "backup_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrefix holds the string denoting the prefix field in the database.
	FieldPrefix = "prefix"
	// FieldDirectories holds the string denoting the directories field in the database.
	FieldDirectories = "directories"
	// FieldHasPeriodicBackups holds the string denoting the hasperiodicbackups field in the database.
	FieldHasPeriodicBackups = "has_periodic_backups"
	// FieldPeriodicBackupTime holds the string denoting the periodicbackuptime field in the database.
	FieldPeriodicBackupTime = "periodic_backup_time"
	// EdgeRepositories holds the string denoting the repositories edge name in mutations.
	EdgeRepositories = "repositories"
	// Table holds the table name of the backupprofile in the database.
	Table = "backup_profiles"
	// RepositoriesTable is the table that holds the repositories relation/edge. The primary key declared below.
	RepositoriesTable = "backup_profile_repositories"
	// RepositoriesInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoriesInverseTable = "repositories"
)

// Columns holds all SQL columns for backupprofile fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrefix,
	FieldDirectories,
	FieldHasPeriodicBackups,
	FieldPeriodicBackupTime,
}

var (
	// RepositoriesPrimaryKey and RepositoriesColumn2 are the table columns denoting the
	// primary key for the repositories relation (M2M).
	RepositoriesPrimaryKey = []string{"backup_profile_id", "repository_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHasPeriodicBackups holds the default value on creation for the "hasPeriodicBackups" field.
	DefaultHasPeriodicBackups bool
)

// OrderOption defines the ordering options for the BackupProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrefix orders the results by the prefix field.
func ByPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrefix, opts...).ToFunc()
}

// ByDirectories orders the results by the directories field.
func ByDirectories(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirectories, opts...).ToFunc()
}

// ByHasPeriodicBackups orders the results by the hasPeriodicBackups field.
func ByHasPeriodicBackups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasPeriodicBackups, opts...).ToFunc()
}

// ByPeriodicBackupTime orders the results by the periodicBackupTime field.
func ByPeriodicBackupTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodicBackupTime, opts...).ToFunc()
}

// ByRepositoriesCount orders the results by repositories count.
func ByRepositoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepositoriesStep(), opts...)
	}
}

// ByRepositories orders the results by repositories terms.
func ByRepositories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRepositoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RepositoriesTable, RepositoriesPrimaryKey...),
	)
}
