// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/backupschedule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BackupScheduleCreate is the builder for creating a BackupSchedule entity.
type BackupScheduleCreate struct {
	config
	mutation *BackupScheduleMutation
	hooks    []Hook
}

// SetUpdatedAt sets the "updated_at" field.
func (bsc *BackupScheduleCreate) SetUpdatedAt(t time.Time) *BackupScheduleCreate {
	bsc.mutation.SetUpdatedAt(t)
	return bsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bsc *BackupScheduleCreate) SetNillableUpdatedAt(t *time.Time) *BackupScheduleCreate {
	if t != nil {
		bsc.SetUpdatedAt(*t)
	}
	return bsc
}

// SetMode sets the "mode" field.
func (bsc *BackupScheduleCreate) SetMode(b backupschedule.Mode) *BackupScheduleCreate {
	bsc.mutation.SetMode(b)
	return bsc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (bsc *BackupScheduleCreate) SetNillableMode(b *backupschedule.Mode) *BackupScheduleCreate {
	if b != nil {
		bsc.SetMode(*b)
	}
	return bsc
}

// SetHourly sets the "hourly" field.
func (bsc *BackupScheduleCreate) SetHourly(b bool) *BackupScheduleCreate {
	bsc.mutation.SetHourly(b)
	return bsc
}

// SetNillableHourly sets the "hourly" field if the given value is not nil.
func (bsc *BackupScheduleCreate) SetNillableHourly(b *bool) *BackupScheduleCreate {
	if b != nil {
		bsc.SetHourly(*b)
	}
	return bsc
}

// SetDailyAt sets the "daily_at" field.
func (bsc *BackupScheduleCreate) SetDailyAt(t time.Time) *BackupScheduleCreate {
	bsc.mutation.SetDailyAt(t)
	return bsc
}

// SetWeekday sets the "weekday" field.
func (bsc *BackupScheduleCreate) SetWeekday(b backupschedule.Weekday) *BackupScheduleCreate {
	bsc.mutation.SetWeekday(b)
	return bsc
}

// SetWeeklyAt sets the "weekly_at" field.
func (bsc *BackupScheduleCreate) SetWeeklyAt(t time.Time) *BackupScheduleCreate {
	bsc.mutation.SetWeeklyAt(t)
	return bsc
}

// SetMonthday sets the "monthday" field.
func (bsc *BackupScheduleCreate) SetMonthday(u uint8) *BackupScheduleCreate {
	bsc.mutation.SetMonthday(u)
	return bsc
}

// SetMonthlyAt sets the "monthly_at" field.
func (bsc *BackupScheduleCreate) SetMonthlyAt(t time.Time) *BackupScheduleCreate {
	bsc.mutation.SetMonthlyAt(t)
	return bsc
}

// SetNextRun sets the "next_run" field.
func (bsc *BackupScheduleCreate) SetNextRun(t time.Time) *BackupScheduleCreate {
	bsc.mutation.SetNextRun(t)
	return bsc
}

// SetNillableNextRun sets the "next_run" field if the given value is not nil.
func (bsc *BackupScheduleCreate) SetNillableNextRun(t *time.Time) *BackupScheduleCreate {
	if t != nil {
		bsc.SetNextRun(*t)
	}
	return bsc
}

// SetLastRun sets the "last_run" field.
func (bsc *BackupScheduleCreate) SetLastRun(t time.Time) *BackupScheduleCreate {
	bsc.mutation.SetLastRun(t)
	return bsc
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (bsc *BackupScheduleCreate) SetNillableLastRun(t *time.Time) *BackupScheduleCreate {
	if t != nil {
		bsc.SetLastRun(*t)
	}
	return bsc
}

// SetLastRunStatus sets the "last_run_status" field.
func (bsc *BackupScheduleCreate) SetLastRunStatus(s string) *BackupScheduleCreate {
	bsc.mutation.SetLastRunStatus(s)
	return bsc
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (bsc *BackupScheduleCreate) SetNillableLastRunStatus(s *string) *BackupScheduleCreate {
	if s != nil {
		bsc.SetLastRunStatus(*s)
	}
	return bsc
}

// SetID sets the "id" field.
func (bsc *BackupScheduleCreate) SetID(i int) *BackupScheduleCreate {
	bsc.mutation.SetID(i)
	return bsc
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (bsc *BackupScheduleCreate) SetBackupProfileID(id int) *BackupScheduleCreate {
	bsc.mutation.SetBackupProfileID(id)
	return bsc
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (bsc *BackupScheduleCreate) SetBackupProfile(b *BackupProfile) *BackupScheduleCreate {
	return bsc.SetBackupProfileID(b.ID)
}

// Mutation returns the BackupScheduleMutation object of the builder.
func (bsc *BackupScheduleCreate) Mutation() *BackupScheduleMutation {
	return bsc.mutation
}

// Save creates the BackupSchedule in the database.
func (bsc *BackupScheduleCreate) Save(ctx context.Context) (*BackupSchedule, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BackupScheduleCreate) SaveX(ctx context.Context) *BackupSchedule {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BackupScheduleCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BackupScheduleCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BackupScheduleCreate) defaults() {
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		v := backupschedule.DefaultUpdatedAt()
		bsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bsc.mutation.Mode(); !ok {
		v := backupschedule.DefaultMode
		bsc.mutation.SetMode(v)
	}
	if _, ok := bsc.mutation.Hourly(); !ok {
		v := backupschedule.DefaultHourly
		bsc.mutation.SetHourly(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BackupScheduleCreate) check() error {
	if _, ok := bsc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "BackupSchedule.mode"`)}
	}
	if v, ok := bsc.mutation.Mode(); ok {
		if err := backupschedule.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.mode": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.Hourly(); !ok {
		return &ValidationError{Name: "hourly", err: errors.New(`ent: missing required field "BackupSchedule.hourly"`)}
	}
	if _, ok := bsc.mutation.DailyAt(); !ok {
		return &ValidationError{Name: "daily_at", err: errors.New(`ent: missing required field "BackupSchedule.daily_at"`)}
	}
	if _, ok := bsc.mutation.Weekday(); !ok {
		return &ValidationError{Name: "weekday", err: errors.New(`ent: missing required field "BackupSchedule.weekday"`)}
	}
	if v, ok := bsc.mutation.Weekday(); ok {
		if err := backupschedule.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.weekday": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.WeeklyAt(); !ok {
		return &ValidationError{Name: "weekly_at", err: errors.New(`ent: missing required field "BackupSchedule.weekly_at"`)}
	}
	if _, ok := bsc.mutation.Monthday(); !ok {
		return &ValidationError{Name: "monthday", err: errors.New(`ent: missing required field "BackupSchedule.monthday"`)}
	}
	if v, ok := bsc.mutation.Monthday(); ok {
		if err := backupschedule.MonthdayValidator(v); err != nil {
			return &ValidationError{Name: "monthday", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.monthday": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.MonthlyAt(); !ok {
		return &ValidationError{Name: "monthly_at", err: errors.New(`ent: missing required field "BackupSchedule.monthly_at"`)}
	}
	if len(bsc.mutation.BackupProfileIDs()) == 0 {
		return &ValidationError{Name: "backup_profile", err: errors.New(`ent: missing required edge "BackupSchedule.backup_profile"`)}
	}
	return nil
}

func (bsc *BackupScheduleCreate) sqlSave(ctx context.Context) (*BackupSchedule, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BackupScheduleCreate) createSpec() (*BackupSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &BackupSchedule{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(backupschedule.Table, sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt))
	)
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.SetField(backupschedule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bsc.mutation.Mode(); ok {
		_spec.SetField(backupschedule.FieldMode, field.TypeEnum, value)
		_node.Mode = value
	}
	if value, ok := bsc.mutation.Hourly(); ok {
		_spec.SetField(backupschedule.FieldHourly, field.TypeBool, value)
		_node.Hourly = value
	}
	if value, ok := bsc.mutation.DailyAt(); ok {
		_spec.SetField(backupschedule.FieldDailyAt, field.TypeTime, value)
		_node.DailyAt = value
	}
	if value, ok := bsc.mutation.Weekday(); ok {
		_spec.SetField(backupschedule.FieldWeekday, field.TypeEnum, value)
		_node.Weekday = value
	}
	if value, ok := bsc.mutation.WeeklyAt(); ok {
		_spec.SetField(backupschedule.FieldWeeklyAt, field.TypeTime, value)
		_node.WeeklyAt = value
	}
	if value, ok := bsc.mutation.Monthday(); ok {
		_spec.SetField(backupschedule.FieldMonthday, field.TypeUint8, value)
		_node.Monthday = value
	}
	if value, ok := bsc.mutation.MonthlyAt(); ok {
		_spec.SetField(backupschedule.FieldMonthlyAt, field.TypeTime, value)
		_node.MonthlyAt = value
	}
	if value, ok := bsc.mutation.NextRun(); ok {
		_spec.SetField(backupschedule.FieldNextRun, field.TypeTime, value)
		_node.NextRun = value
	}
	if value, ok := bsc.mutation.LastRun(); ok {
		_spec.SetField(backupschedule.FieldLastRun, field.TypeTime, value)
		_node.LastRun = &value
	}
	if value, ok := bsc.mutation.LastRunStatus(); ok {
		_spec.SetField(backupschedule.FieldLastRunStatus, field.TypeString, value)
		_node.LastRunStatus = &value
	}
	if nodes := bsc.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   backupschedule.BackupProfileTable,
			Columns: []string{backupschedule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.backup_profile_backup_schedule = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BackupScheduleCreateBulk is the builder for creating many BackupSchedule entities in bulk.
type BackupScheduleCreateBulk struct {
	config
	err      error
	builders []*BackupScheduleCreate
}

// Save creates the BackupSchedule entities in the database.
func (bscb *BackupScheduleCreateBulk) Save(ctx context.Context) ([]*BackupSchedule, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BackupSchedule, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BackupScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BackupScheduleCreateBulk) SaveX(ctx context.Context) []*BackupSchedule {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BackupScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BackupScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}
