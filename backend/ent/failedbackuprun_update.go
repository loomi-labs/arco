// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/failedbackuprun"
	"arco/backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FailedBackupRunUpdate is the builder for updating FailedBackupRun entities.
type FailedBackupRunUpdate struct {
	config
	hooks    []Hook
	mutation *FailedBackupRunMutation
}

// Where appends a list predicates to the FailedBackupRunUpdate builder.
func (fbru *FailedBackupRunUpdate) Where(ps ...predicate.FailedBackupRun) *FailedBackupRunUpdate {
	fbru.mutation.Where(ps...)
	return fbru
}

// Mutation returns the FailedBackupRunMutation object of the builder.
func (fbru *FailedBackupRunUpdate) Mutation() *FailedBackupRunMutation {
	return fbru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fbru *FailedBackupRunUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fbru.sqlSave, fbru.mutation, fbru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fbru *FailedBackupRunUpdate) SaveX(ctx context.Context) int {
	affected, err := fbru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fbru *FailedBackupRunUpdate) Exec(ctx context.Context) error {
	_, err := fbru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fbru *FailedBackupRunUpdate) ExecX(ctx context.Context) {
	if err := fbru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fbru *FailedBackupRunUpdate) check() error {
	if fbru.mutation.BackupProfileCleared() && len(fbru.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FailedBackupRun.backup_profile"`)
	}
	if fbru.mutation.RepositoryCleared() && len(fbru.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FailedBackupRun.repository"`)
	}
	return nil
}

func (fbru *FailedBackupRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fbru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(failedbackuprun.Table, failedbackuprun.Columns, sqlgraph.NewFieldSpec(failedbackuprun.FieldID, field.TypeInt))
	if ps := fbru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fbru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{failedbackuprun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fbru.mutation.done = true
	return n, nil
}

// FailedBackupRunUpdateOne is the builder for updating a single FailedBackupRun entity.
type FailedBackupRunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FailedBackupRunMutation
}

// Mutation returns the FailedBackupRunMutation object of the builder.
func (fbruo *FailedBackupRunUpdateOne) Mutation() *FailedBackupRunMutation {
	return fbruo.mutation
}

// Where appends a list predicates to the FailedBackupRunUpdate builder.
func (fbruo *FailedBackupRunUpdateOne) Where(ps ...predicate.FailedBackupRun) *FailedBackupRunUpdateOne {
	fbruo.mutation.Where(ps...)
	return fbruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fbruo *FailedBackupRunUpdateOne) Select(field string, fields ...string) *FailedBackupRunUpdateOne {
	fbruo.fields = append([]string{field}, fields...)
	return fbruo
}

// Save executes the query and returns the updated FailedBackupRun entity.
func (fbruo *FailedBackupRunUpdateOne) Save(ctx context.Context) (*FailedBackupRun, error) {
	return withHooks(ctx, fbruo.sqlSave, fbruo.mutation, fbruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fbruo *FailedBackupRunUpdateOne) SaveX(ctx context.Context) *FailedBackupRun {
	node, err := fbruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fbruo *FailedBackupRunUpdateOne) Exec(ctx context.Context) error {
	_, err := fbruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fbruo *FailedBackupRunUpdateOne) ExecX(ctx context.Context) {
	if err := fbruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fbruo *FailedBackupRunUpdateOne) check() error {
	if fbruo.mutation.BackupProfileCleared() && len(fbruo.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FailedBackupRun.backup_profile"`)
	}
	if fbruo.mutation.RepositoryCleared() && len(fbruo.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FailedBackupRun.repository"`)
	}
	return nil
}

func (fbruo *FailedBackupRunUpdateOne) sqlSave(ctx context.Context) (_node *FailedBackupRun, err error) {
	if err := fbruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(failedbackuprun.Table, failedbackuprun.Columns, sqlgraph.NewFieldSpec(failedbackuprun.FieldID, field.TypeInt))
	id, ok := fbruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FailedBackupRun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fbruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, failedbackuprun.FieldID)
		for _, f := range fields {
			if !failedbackuprun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != failedbackuprun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fbruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &FailedBackupRun{config: fbruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fbruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{failedbackuprun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fbruo.mutation.done = true
	return _node, nil
}
