// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/pruningrule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PruningRuleCreate is the builder for creating a PruningRule entity.
type PruningRuleCreate struct {
	config
	mutation *PruningRuleMutation
	hooks    []Hook
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PruningRuleCreate) SetUpdatedAt(t time.Time) *PruningRuleCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PruningRuleCreate) SetNillableUpdatedAt(t *time.Time) *PruningRuleCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetIsEnabled sets the "is_enabled" field.
func (prc *PruningRuleCreate) SetIsEnabled(b bool) *PruningRuleCreate {
	prc.mutation.SetIsEnabled(b)
	return prc
}

// SetKeepHourly sets the "keep_hourly" field.
func (prc *PruningRuleCreate) SetKeepHourly(i int) *PruningRuleCreate {
	prc.mutation.SetKeepHourly(i)
	return prc
}

// SetKeepDaily sets the "keep_daily" field.
func (prc *PruningRuleCreate) SetKeepDaily(i int) *PruningRuleCreate {
	prc.mutation.SetKeepDaily(i)
	return prc
}

// SetKeepWeekly sets the "keep_weekly" field.
func (prc *PruningRuleCreate) SetKeepWeekly(i int) *PruningRuleCreate {
	prc.mutation.SetKeepWeekly(i)
	return prc
}

// SetKeepMonthly sets the "keep_monthly" field.
func (prc *PruningRuleCreate) SetKeepMonthly(i int) *PruningRuleCreate {
	prc.mutation.SetKeepMonthly(i)
	return prc
}

// SetKeepYearly sets the "keep_yearly" field.
func (prc *PruningRuleCreate) SetKeepYearly(i int) *PruningRuleCreate {
	prc.mutation.SetKeepYearly(i)
	return prc
}

// SetKeepWithinDays sets the "keep_within_days" field.
func (prc *PruningRuleCreate) SetKeepWithinDays(i int) *PruningRuleCreate {
	prc.mutation.SetKeepWithinDays(i)
	return prc
}

// SetNextRun sets the "next_run" field.
func (prc *PruningRuleCreate) SetNextRun(t time.Time) *PruningRuleCreate {
	prc.mutation.SetNextRun(t)
	return prc
}

// SetNillableNextRun sets the "next_run" field if the given value is not nil.
func (prc *PruningRuleCreate) SetNillableNextRun(t *time.Time) *PruningRuleCreate {
	if t != nil {
		prc.SetNextRun(*t)
	}
	return prc
}

// SetLastRun sets the "last_run" field.
func (prc *PruningRuleCreate) SetLastRun(t time.Time) *PruningRuleCreate {
	prc.mutation.SetLastRun(t)
	return prc
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (prc *PruningRuleCreate) SetNillableLastRun(t *time.Time) *PruningRuleCreate {
	if t != nil {
		prc.SetLastRun(*t)
	}
	return prc
}

// SetLastRunStatus sets the "last_run_status" field.
func (prc *PruningRuleCreate) SetLastRunStatus(s string) *PruningRuleCreate {
	prc.mutation.SetLastRunStatus(s)
	return prc
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (prc *PruningRuleCreate) SetNillableLastRunStatus(s *string) *PruningRuleCreate {
	if s != nil {
		prc.SetLastRunStatus(*s)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *PruningRuleCreate) SetID(i int) *PruningRuleCreate {
	prc.mutation.SetID(i)
	return prc
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (prc *PruningRuleCreate) SetBackupProfileID(id int) *PruningRuleCreate {
	prc.mutation.SetBackupProfileID(id)
	return prc
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (prc *PruningRuleCreate) SetBackupProfile(b *BackupProfile) *PruningRuleCreate {
	return prc.SetBackupProfileID(b.ID)
}

// Mutation returns the PruningRuleMutation object of the builder.
func (prc *PruningRuleCreate) Mutation() *PruningRuleMutation {
	return prc.mutation
}

// Save creates the PruningRule in the database.
func (prc *PruningRuleCreate) Save(ctx context.Context) (*PruningRule, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PruningRuleCreate) SaveX(ctx context.Context) *PruningRule {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PruningRuleCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PruningRuleCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PruningRuleCreate) defaults() {
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := pruningrule.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PruningRuleCreate) check() error {
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PruningRule.updated_at"`)}
	}
	if _, ok := prc.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "PruningRule.is_enabled"`)}
	}
	if _, ok := prc.mutation.KeepHourly(); !ok {
		return &ValidationError{Name: "keep_hourly", err: errors.New(`ent: missing required field "PruningRule.keep_hourly"`)}
	}
	if _, ok := prc.mutation.KeepDaily(); !ok {
		return &ValidationError{Name: "keep_daily", err: errors.New(`ent: missing required field "PruningRule.keep_daily"`)}
	}
	if _, ok := prc.mutation.KeepWeekly(); !ok {
		return &ValidationError{Name: "keep_weekly", err: errors.New(`ent: missing required field "PruningRule.keep_weekly"`)}
	}
	if _, ok := prc.mutation.KeepMonthly(); !ok {
		return &ValidationError{Name: "keep_monthly", err: errors.New(`ent: missing required field "PruningRule.keep_monthly"`)}
	}
	if _, ok := prc.mutation.KeepYearly(); !ok {
		return &ValidationError{Name: "keep_yearly", err: errors.New(`ent: missing required field "PruningRule.keep_yearly"`)}
	}
	if _, ok := prc.mutation.KeepWithinDays(); !ok {
		return &ValidationError{Name: "keep_within_days", err: errors.New(`ent: missing required field "PruningRule.keep_within_days"`)}
	}
	if len(prc.mutation.BackupProfileIDs()) == 0 {
		return &ValidationError{Name: "backup_profile", err: errors.New(`ent: missing required edge "PruningRule.backup_profile"`)}
	}
	return nil
}

func (prc *PruningRuleCreate) sqlSave(ctx context.Context) (*PruningRule, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PruningRuleCreate) createSpec() (*PruningRule, *sqlgraph.CreateSpec) {
	var (
		_node = &PruningRule{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(pruningrule.Table, sqlgraph.NewFieldSpec(pruningrule.FieldID, field.TypeInt))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(pruningrule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.IsEnabled(); ok {
		_spec.SetField(pruningrule.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if value, ok := prc.mutation.KeepHourly(); ok {
		_spec.SetField(pruningrule.FieldKeepHourly, field.TypeInt, value)
		_node.KeepHourly = value
	}
	if value, ok := prc.mutation.KeepDaily(); ok {
		_spec.SetField(pruningrule.FieldKeepDaily, field.TypeInt, value)
		_node.KeepDaily = value
	}
	if value, ok := prc.mutation.KeepWeekly(); ok {
		_spec.SetField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
		_node.KeepWeekly = value
	}
	if value, ok := prc.mutation.KeepMonthly(); ok {
		_spec.SetField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
		_node.KeepMonthly = value
	}
	if value, ok := prc.mutation.KeepYearly(); ok {
		_spec.SetField(pruningrule.FieldKeepYearly, field.TypeInt, value)
		_node.KeepYearly = value
	}
	if value, ok := prc.mutation.KeepWithinDays(); ok {
		_spec.SetField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
		_node.KeepWithinDays = value
	}
	if value, ok := prc.mutation.NextRun(); ok {
		_spec.SetField(pruningrule.FieldNextRun, field.TypeTime, value)
		_node.NextRun = value
	}
	if value, ok := prc.mutation.LastRun(); ok {
		_spec.SetField(pruningrule.FieldLastRun, field.TypeTime, value)
		_node.LastRun = &value
	}
	if value, ok := prc.mutation.LastRunStatus(); ok {
		_spec.SetField(pruningrule.FieldLastRunStatus, field.TypeString, value)
		_node.LastRunStatus = &value
	}
	if nodes := prc.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.backup_profile_pruning_rule = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PruningRuleCreateBulk is the builder for creating many PruningRule entities in bulk.
type PruningRuleCreateBulk struct {
	config
	err      error
	builders []*PruningRuleCreate
}

// Save creates the PruningRule entities in the database.
func (prcb *PruningRuleCreateBulk) Save(ctx context.Context) ([]*PruningRule, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PruningRule, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PruningRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PruningRuleCreateBulk) SaveX(ctx context.Context) []*PruningRule {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PruningRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PruningRuleCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
