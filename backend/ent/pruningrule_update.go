// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/predicate"
	"github.com/loomi-labs/arco/backend/ent/pruningrule"
)

// PruningRuleUpdate is the builder for updating PruningRule entities.
type PruningRuleUpdate struct {
	config
	hooks     []Hook
	mutation  *PruningRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PruningRuleUpdate builder.
func (_u *PruningRuleUpdate) Where(ps ...predicate.PruningRule) *PruningRuleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PruningRuleUpdate) SetUpdatedAt(v time.Time) *PruningRuleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *PruningRuleUpdate) SetIsEnabled(v bool) *PruningRuleUpdate {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableIsEnabled(v *bool) *PruningRuleUpdate {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// SetKeepHourly sets the "keep_hourly" field.
func (_u *PruningRuleUpdate) SetKeepHourly(v int) *PruningRuleUpdate {
	_u.mutation.ResetKeepHourly()
	_u.mutation.SetKeepHourly(v)
	return _u
}

// SetNillableKeepHourly sets the "keep_hourly" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableKeepHourly(v *int) *PruningRuleUpdate {
	if v != nil {
		_u.SetKeepHourly(*v)
	}
	return _u
}

// AddKeepHourly adds value to the "keep_hourly" field.
func (_u *PruningRuleUpdate) AddKeepHourly(v int) *PruningRuleUpdate {
	_u.mutation.AddKeepHourly(v)
	return _u
}

// SetKeepDaily sets the "keep_daily" field.
func (_u *PruningRuleUpdate) SetKeepDaily(v int) *PruningRuleUpdate {
	_u.mutation.ResetKeepDaily()
	_u.mutation.SetKeepDaily(v)
	return _u
}

// SetNillableKeepDaily sets the "keep_daily" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableKeepDaily(v *int) *PruningRuleUpdate {
	if v != nil {
		_u.SetKeepDaily(*v)
	}
	return _u
}

// AddKeepDaily adds value to the "keep_daily" field.
func (_u *PruningRuleUpdate) AddKeepDaily(v int) *PruningRuleUpdate {
	_u.mutation.AddKeepDaily(v)
	return _u
}

// SetKeepWeekly sets the "keep_weekly" field.
func (_u *PruningRuleUpdate) SetKeepWeekly(v int) *PruningRuleUpdate {
	_u.mutation.ResetKeepWeekly()
	_u.mutation.SetKeepWeekly(v)
	return _u
}

// SetNillableKeepWeekly sets the "keep_weekly" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableKeepWeekly(v *int) *PruningRuleUpdate {
	if v != nil {
		_u.SetKeepWeekly(*v)
	}
	return _u
}

// AddKeepWeekly adds value to the "keep_weekly" field.
func (_u *PruningRuleUpdate) AddKeepWeekly(v int) *PruningRuleUpdate {
	_u.mutation.AddKeepWeekly(v)
	return _u
}

// SetKeepMonthly sets the "keep_monthly" field.
func (_u *PruningRuleUpdate) SetKeepMonthly(v int) *PruningRuleUpdate {
	_u.mutation.ResetKeepMonthly()
	_u.mutation.SetKeepMonthly(v)
	return _u
}

// SetNillableKeepMonthly sets the "keep_monthly" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableKeepMonthly(v *int) *PruningRuleUpdate {
	if v != nil {
		_u.SetKeepMonthly(*v)
	}
	return _u
}

// AddKeepMonthly adds value to the "keep_monthly" field.
func (_u *PruningRuleUpdate) AddKeepMonthly(v int) *PruningRuleUpdate {
	_u.mutation.AddKeepMonthly(v)
	return _u
}

// SetKeepYearly sets the "keep_yearly" field.
func (_u *PruningRuleUpdate) SetKeepYearly(v int) *PruningRuleUpdate {
	_u.mutation.ResetKeepYearly()
	_u.mutation.SetKeepYearly(v)
	return _u
}

// SetNillableKeepYearly sets the "keep_yearly" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableKeepYearly(v *int) *PruningRuleUpdate {
	if v != nil {
		_u.SetKeepYearly(*v)
	}
	return _u
}

// AddKeepYearly adds value to the "keep_yearly" field.
func (_u *PruningRuleUpdate) AddKeepYearly(v int) *PruningRuleUpdate {
	_u.mutation.AddKeepYearly(v)
	return _u
}

// SetKeepWithinDays sets the "keep_within_days" field.
func (_u *PruningRuleUpdate) SetKeepWithinDays(v int) *PruningRuleUpdate {
	_u.mutation.ResetKeepWithinDays()
	_u.mutation.SetKeepWithinDays(v)
	return _u
}

// SetNillableKeepWithinDays sets the "keep_within_days" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableKeepWithinDays(v *int) *PruningRuleUpdate {
	if v != nil {
		_u.SetKeepWithinDays(*v)
	}
	return _u
}

// AddKeepWithinDays adds value to the "keep_within_days" field.
func (_u *PruningRuleUpdate) AddKeepWithinDays(v int) *PruningRuleUpdate {
	_u.mutation.AddKeepWithinDays(v)
	return _u
}

// SetNextRun sets the "next_run" field.
func (_u *PruningRuleUpdate) SetNextRun(v time.Time) *PruningRuleUpdate {
	_u.mutation.SetNextRun(v)
	return _u
}

// SetNillableNextRun sets the "next_run" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableNextRun(v *time.Time) *PruningRuleUpdate {
	if v != nil {
		_u.SetNextRun(*v)
	}
	return _u
}

// ClearNextRun clears the value of the "next_run" field.
func (_u *PruningRuleUpdate) ClearNextRun() *PruningRuleUpdate {
	_u.mutation.ClearNextRun()
	return _u
}

// SetLastRun sets the "last_run" field.
func (_u *PruningRuleUpdate) SetLastRun(v time.Time) *PruningRuleUpdate {
	_u.mutation.SetLastRun(v)
	return _u
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableLastRun(v *time.Time) *PruningRuleUpdate {
	if v != nil {
		_u.SetLastRun(*v)
	}
	return _u
}

// ClearLastRun clears the value of the "last_run" field.
func (_u *PruningRuleUpdate) ClearLastRun() *PruningRuleUpdate {
	_u.mutation.ClearLastRun()
	return _u
}

// SetLastRunStatus sets the "last_run_status" field.
func (_u *PruningRuleUpdate) SetLastRunStatus(v string) *PruningRuleUpdate {
	_u.mutation.SetLastRunStatus(v)
	return _u
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (_u *PruningRuleUpdate) SetNillableLastRunStatus(v *string) *PruningRuleUpdate {
	if v != nil {
		_u.SetLastRunStatus(*v)
	}
	return _u
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (_u *PruningRuleUpdate) ClearLastRunStatus() *PruningRuleUpdate {
	_u.mutation.ClearLastRunStatus()
	return _u
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (_u *PruningRuleUpdate) SetBackupProfileID(id int) *PruningRuleUpdate {
	_u.mutation.SetBackupProfileID(id)
	return _u
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (_u *PruningRuleUpdate) SetBackupProfile(v *BackupProfile) *PruningRuleUpdate {
	return _u.SetBackupProfileID(v.ID)
}

// Mutation returns the PruningRuleMutation object of the builder.
func (_u *PruningRuleUpdate) Mutation() *PruningRuleMutation {
	return _u.mutation
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (_u *PruningRuleUpdate) ClearBackupProfile() *PruningRuleUpdate {
	_u.mutation.ClearBackupProfile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PruningRuleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PruningRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PruningRuleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PruningRuleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PruningRuleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := pruningrule.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PruningRuleUpdate) check() error {
	if _u.mutation.BackupProfileCleared() && len(_u.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PruningRule.backup_profile"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PruningRuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PruningRuleUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PruningRuleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pruningrule.Table, pruningrule.Columns, sqlgraph.NewFieldSpec(pruningrule.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(pruningrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(pruningrule.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.KeepHourly(); ok {
		_spec.SetField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepHourly(); ok {
		_spec.AddField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepDaily(); ok {
		_spec.SetField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepDaily(); ok {
		_spec.AddField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepWeekly(); ok {
		_spec.SetField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepWeekly(); ok {
		_spec.AddField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepMonthly(); ok {
		_spec.SetField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepMonthly(); ok {
		_spec.AddField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepYearly(); ok {
		_spec.SetField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepYearly(); ok {
		_spec.AddField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepWithinDays(); ok {
		_spec.SetField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepWithinDays(); ok {
		_spec.AddField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.NextRun(); ok {
		_spec.SetField(pruningrule.FieldNextRun, field.TypeTime, value)
	}
	if _u.mutation.NextRunCleared() {
		_spec.ClearField(pruningrule.FieldNextRun, field.TypeTime)
	}
	if value, ok := _u.mutation.LastRun(); ok {
		_spec.SetField(pruningrule.FieldLastRun, field.TypeTime, value)
	}
	if _u.mutation.LastRunCleared() {
		_spec.ClearField(pruningrule.FieldLastRun, field.TypeTime)
	}
	if value, ok := _u.mutation.LastRunStatus(); ok {
		_spec.SetField(pruningrule.FieldLastRunStatus, field.TypeString, value)
	}
	if _u.mutation.LastRunStatusCleared() {
		_spec.ClearField(pruningrule.FieldLastRunStatus, field.TypeString)
	}
	if _u.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pruningrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PruningRuleUpdateOne is the builder for updating a single PruningRule entity.
type PruningRuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PruningRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PruningRuleUpdateOne) SetUpdatedAt(v time.Time) *PruningRuleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *PruningRuleUpdateOne) SetIsEnabled(v bool) *PruningRuleUpdateOne {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableIsEnabled(v *bool) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// SetKeepHourly sets the "keep_hourly" field.
func (_u *PruningRuleUpdateOne) SetKeepHourly(v int) *PruningRuleUpdateOne {
	_u.mutation.ResetKeepHourly()
	_u.mutation.SetKeepHourly(v)
	return _u
}

// SetNillableKeepHourly sets the "keep_hourly" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableKeepHourly(v *int) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetKeepHourly(*v)
	}
	return _u
}

// AddKeepHourly adds value to the "keep_hourly" field.
func (_u *PruningRuleUpdateOne) AddKeepHourly(v int) *PruningRuleUpdateOne {
	_u.mutation.AddKeepHourly(v)
	return _u
}

// SetKeepDaily sets the "keep_daily" field.
func (_u *PruningRuleUpdateOne) SetKeepDaily(v int) *PruningRuleUpdateOne {
	_u.mutation.ResetKeepDaily()
	_u.mutation.SetKeepDaily(v)
	return _u
}

// SetNillableKeepDaily sets the "keep_daily" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableKeepDaily(v *int) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetKeepDaily(*v)
	}
	return _u
}

// AddKeepDaily adds value to the "keep_daily" field.
func (_u *PruningRuleUpdateOne) AddKeepDaily(v int) *PruningRuleUpdateOne {
	_u.mutation.AddKeepDaily(v)
	return _u
}

// SetKeepWeekly sets the "keep_weekly" field.
func (_u *PruningRuleUpdateOne) SetKeepWeekly(v int) *PruningRuleUpdateOne {
	_u.mutation.ResetKeepWeekly()
	_u.mutation.SetKeepWeekly(v)
	return _u
}

// SetNillableKeepWeekly sets the "keep_weekly" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableKeepWeekly(v *int) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetKeepWeekly(*v)
	}
	return _u
}

// AddKeepWeekly adds value to the "keep_weekly" field.
func (_u *PruningRuleUpdateOne) AddKeepWeekly(v int) *PruningRuleUpdateOne {
	_u.mutation.AddKeepWeekly(v)
	return _u
}

// SetKeepMonthly sets the "keep_monthly" field.
func (_u *PruningRuleUpdateOne) SetKeepMonthly(v int) *PruningRuleUpdateOne {
	_u.mutation.ResetKeepMonthly()
	_u.mutation.SetKeepMonthly(v)
	return _u
}

// SetNillableKeepMonthly sets the "keep_monthly" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableKeepMonthly(v *int) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetKeepMonthly(*v)
	}
	return _u
}

// AddKeepMonthly adds value to the "keep_monthly" field.
func (_u *PruningRuleUpdateOne) AddKeepMonthly(v int) *PruningRuleUpdateOne {
	_u.mutation.AddKeepMonthly(v)
	return _u
}

// SetKeepYearly sets the "keep_yearly" field.
func (_u *PruningRuleUpdateOne) SetKeepYearly(v int) *PruningRuleUpdateOne {
	_u.mutation.ResetKeepYearly()
	_u.mutation.SetKeepYearly(v)
	return _u
}

// SetNillableKeepYearly sets the "keep_yearly" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableKeepYearly(v *int) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetKeepYearly(*v)
	}
	return _u
}

// AddKeepYearly adds value to the "keep_yearly" field.
func (_u *PruningRuleUpdateOne) AddKeepYearly(v int) *PruningRuleUpdateOne {
	_u.mutation.AddKeepYearly(v)
	return _u
}

// SetKeepWithinDays sets the "keep_within_days" field.
func (_u *PruningRuleUpdateOne) SetKeepWithinDays(v int) *PruningRuleUpdateOne {
	_u.mutation.ResetKeepWithinDays()
	_u.mutation.SetKeepWithinDays(v)
	return _u
}

// SetNillableKeepWithinDays sets the "keep_within_days" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableKeepWithinDays(v *int) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetKeepWithinDays(*v)
	}
	return _u
}

// AddKeepWithinDays adds value to the "keep_within_days" field.
func (_u *PruningRuleUpdateOne) AddKeepWithinDays(v int) *PruningRuleUpdateOne {
	_u.mutation.AddKeepWithinDays(v)
	return _u
}

// SetNextRun sets the "next_run" field.
func (_u *PruningRuleUpdateOne) SetNextRun(v time.Time) *PruningRuleUpdateOne {
	_u.mutation.SetNextRun(v)
	return _u
}

// SetNillableNextRun sets the "next_run" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableNextRun(v *time.Time) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetNextRun(*v)
	}
	return _u
}

// ClearNextRun clears the value of the "next_run" field.
func (_u *PruningRuleUpdateOne) ClearNextRun() *PruningRuleUpdateOne {
	_u.mutation.ClearNextRun()
	return _u
}

// SetLastRun sets the "last_run" field.
func (_u *PruningRuleUpdateOne) SetLastRun(v time.Time) *PruningRuleUpdateOne {
	_u.mutation.SetLastRun(v)
	return _u
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableLastRun(v *time.Time) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetLastRun(*v)
	}
	return _u
}

// ClearLastRun clears the value of the "last_run" field.
func (_u *PruningRuleUpdateOne) ClearLastRun() *PruningRuleUpdateOne {
	_u.mutation.ClearLastRun()
	return _u
}

// SetLastRunStatus sets the "last_run_status" field.
func (_u *PruningRuleUpdateOne) SetLastRunStatus(v string) *PruningRuleUpdateOne {
	_u.mutation.SetLastRunStatus(v)
	return _u
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (_u *PruningRuleUpdateOne) SetNillableLastRunStatus(v *string) *PruningRuleUpdateOne {
	if v != nil {
		_u.SetLastRunStatus(*v)
	}
	return _u
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (_u *PruningRuleUpdateOne) ClearLastRunStatus() *PruningRuleUpdateOne {
	_u.mutation.ClearLastRunStatus()
	return _u
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (_u *PruningRuleUpdateOne) SetBackupProfileID(id int) *PruningRuleUpdateOne {
	_u.mutation.SetBackupProfileID(id)
	return _u
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (_u *PruningRuleUpdateOne) SetBackupProfile(v *BackupProfile) *PruningRuleUpdateOne {
	return _u.SetBackupProfileID(v.ID)
}

// Mutation returns the PruningRuleMutation object of the builder.
func (_u *PruningRuleUpdateOne) Mutation() *PruningRuleMutation {
	return _u.mutation
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (_u *PruningRuleUpdateOne) ClearBackupProfile() *PruningRuleUpdateOne {
	_u.mutation.ClearBackupProfile()
	return _u
}

// Where appends a list predicates to the PruningRuleUpdate builder.
func (_u *PruningRuleUpdateOne) Where(ps ...predicate.PruningRule) *PruningRuleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PruningRuleUpdateOne) Select(field string, fields ...string) *PruningRuleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PruningRule entity.
func (_u *PruningRuleUpdateOne) Save(ctx context.Context) (*PruningRule, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PruningRuleUpdateOne) SaveX(ctx context.Context) *PruningRule {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PruningRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PruningRuleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PruningRuleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := pruningrule.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PruningRuleUpdateOne) check() error {
	if _u.mutation.BackupProfileCleared() && len(_u.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PruningRule.backup_profile"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PruningRuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PruningRuleUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PruningRuleUpdateOne) sqlSave(ctx context.Context) (_node *PruningRule, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pruningrule.Table, pruningrule.Columns, sqlgraph.NewFieldSpec(pruningrule.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PruningRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pruningrule.FieldID)
		for _, f := range fields {
			if !pruningrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pruningrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(pruningrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(pruningrule.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.KeepHourly(); ok {
		_spec.SetField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepHourly(); ok {
		_spec.AddField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepDaily(); ok {
		_spec.SetField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepDaily(); ok {
		_spec.AddField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepWeekly(); ok {
		_spec.SetField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepWeekly(); ok {
		_spec.AddField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepMonthly(); ok {
		_spec.SetField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepMonthly(); ok {
		_spec.AddField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepYearly(); ok {
		_spec.SetField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepYearly(); ok {
		_spec.AddField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := _u.mutation.KeepWithinDays(); ok {
		_spec.SetField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedKeepWithinDays(); ok {
		_spec.AddField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.NextRun(); ok {
		_spec.SetField(pruningrule.FieldNextRun, field.TypeTime, value)
	}
	if _u.mutation.NextRunCleared() {
		_spec.ClearField(pruningrule.FieldNextRun, field.TypeTime)
	}
	if value, ok := _u.mutation.LastRun(); ok {
		_spec.SetField(pruningrule.FieldLastRun, field.TypeTime, value)
	}
	if _u.mutation.LastRunCleared() {
		_spec.ClearField(pruningrule.FieldLastRun, field.TypeTime)
	}
	if value, ok := _u.mutation.LastRunStatus(); ok {
		_spec.SetField(pruningrule.FieldLastRunStatus, field.TypeString, value)
	}
	if _u.mutation.LastRunStatusCleared() {
		_spec.ClearField(pruningrule.FieldLastRunStatus, field.TypeString)
	}
	if _u.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &PruningRule{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pruningrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
