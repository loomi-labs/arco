// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/predicate"
	"arco/backend/ent/pruningrule"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PruningRuleUpdate is the builder for updating PruningRule entities.
type PruningRuleUpdate struct {
	config
	hooks    []Hook
	mutation *PruningRuleMutation
}

// Where appends a list predicates to the PruningRuleUpdate builder.
func (pru *PruningRuleUpdate) Where(ps ...predicate.PruningRule) *PruningRuleUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetKeepHourly sets the "keep_hourly" field.
func (pru *PruningRuleUpdate) SetKeepHourly(i int) *PruningRuleUpdate {
	pru.mutation.ResetKeepHourly()
	pru.mutation.SetKeepHourly(i)
	return pru
}

// SetNillableKeepHourly sets the "keep_hourly" field if the given value is not nil.
func (pru *PruningRuleUpdate) SetNillableKeepHourly(i *int) *PruningRuleUpdate {
	if i != nil {
		pru.SetKeepHourly(*i)
	}
	return pru
}

// AddKeepHourly adds i to the "keep_hourly" field.
func (pru *PruningRuleUpdate) AddKeepHourly(i int) *PruningRuleUpdate {
	pru.mutation.AddKeepHourly(i)
	return pru
}

// SetKeepDaily sets the "keep_daily" field.
func (pru *PruningRuleUpdate) SetKeepDaily(i int) *PruningRuleUpdate {
	pru.mutation.ResetKeepDaily()
	pru.mutation.SetKeepDaily(i)
	return pru
}

// SetNillableKeepDaily sets the "keep_daily" field if the given value is not nil.
func (pru *PruningRuleUpdate) SetNillableKeepDaily(i *int) *PruningRuleUpdate {
	if i != nil {
		pru.SetKeepDaily(*i)
	}
	return pru
}

// AddKeepDaily adds i to the "keep_daily" field.
func (pru *PruningRuleUpdate) AddKeepDaily(i int) *PruningRuleUpdate {
	pru.mutation.AddKeepDaily(i)
	return pru
}

// SetKeepWeekly sets the "keep_weekly" field.
func (pru *PruningRuleUpdate) SetKeepWeekly(i int) *PruningRuleUpdate {
	pru.mutation.ResetKeepWeekly()
	pru.mutation.SetKeepWeekly(i)
	return pru
}

// SetNillableKeepWeekly sets the "keep_weekly" field if the given value is not nil.
func (pru *PruningRuleUpdate) SetNillableKeepWeekly(i *int) *PruningRuleUpdate {
	if i != nil {
		pru.SetKeepWeekly(*i)
	}
	return pru
}

// AddKeepWeekly adds i to the "keep_weekly" field.
func (pru *PruningRuleUpdate) AddKeepWeekly(i int) *PruningRuleUpdate {
	pru.mutation.AddKeepWeekly(i)
	return pru
}

// SetKeepMonthly sets the "keep_monthly" field.
func (pru *PruningRuleUpdate) SetKeepMonthly(i int) *PruningRuleUpdate {
	pru.mutation.ResetKeepMonthly()
	pru.mutation.SetKeepMonthly(i)
	return pru
}

// SetNillableKeepMonthly sets the "keep_monthly" field if the given value is not nil.
func (pru *PruningRuleUpdate) SetNillableKeepMonthly(i *int) *PruningRuleUpdate {
	if i != nil {
		pru.SetKeepMonthly(*i)
	}
	return pru
}

// AddKeepMonthly adds i to the "keep_monthly" field.
func (pru *PruningRuleUpdate) AddKeepMonthly(i int) *PruningRuleUpdate {
	pru.mutation.AddKeepMonthly(i)
	return pru
}

// SetKeepYearly sets the "keep_yearly" field.
func (pru *PruningRuleUpdate) SetKeepYearly(i int) *PruningRuleUpdate {
	pru.mutation.ResetKeepYearly()
	pru.mutation.SetKeepYearly(i)
	return pru
}

// SetNillableKeepYearly sets the "keep_yearly" field if the given value is not nil.
func (pru *PruningRuleUpdate) SetNillableKeepYearly(i *int) *PruningRuleUpdate {
	if i != nil {
		pru.SetKeepYearly(*i)
	}
	return pru
}

// AddKeepYearly adds i to the "keep_yearly" field.
func (pru *PruningRuleUpdate) AddKeepYearly(i int) *PruningRuleUpdate {
	pru.mutation.AddKeepYearly(i)
	return pru
}

// SetKeepWithinDays sets the "keep_within_days" field.
func (pru *PruningRuleUpdate) SetKeepWithinDays(i int) *PruningRuleUpdate {
	pru.mutation.ResetKeepWithinDays()
	pru.mutation.SetKeepWithinDays(i)
	return pru
}

// SetNillableKeepWithinDays sets the "keep_within_days" field if the given value is not nil.
func (pru *PruningRuleUpdate) SetNillableKeepWithinDays(i *int) *PruningRuleUpdate {
	if i != nil {
		pru.SetKeepWithinDays(*i)
	}
	return pru
}

// AddKeepWithinDays adds i to the "keep_within_days" field.
func (pru *PruningRuleUpdate) AddKeepWithinDays(i int) *PruningRuleUpdate {
	pru.mutation.AddKeepWithinDays(i)
	return pru
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (pru *PruningRuleUpdate) SetBackupProfileID(id int) *PruningRuleUpdate {
	pru.mutation.SetBackupProfileID(id)
	return pru
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (pru *PruningRuleUpdate) SetBackupProfile(b *BackupProfile) *PruningRuleUpdate {
	return pru.SetBackupProfileID(b.ID)
}

// Mutation returns the PruningRuleMutation object of the builder.
func (pru *PruningRuleUpdate) Mutation() *PruningRuleMutation {
	return pru.mutation
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (pru *PruningRuleUpdate) ClearBackupProfile() *PruningRuleUpdate {
	pru.mutation.ClearBackupProfile()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PruningRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PruningRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PruningRuleUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PruningRuleUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PruningRuleUpdate) check() error {
	if pru.mutation.BackupProfileCleared() && len(pru.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PruningRule.backup_profile"`)
	}
	return nil
}

func (pru *PruningRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pruningrule.Table, pruningrule.Columns, sqlgraph.NewFieldSpec(pruningrule.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.KeepHourly(); ok {
		_spec.SetField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedKeepHourly(); ok {
		_spec.AddField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.KeepDaily(); ok {
		_spec.SetField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedKeepDaily(); ok {
		_spec.AddField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := pru.mutation.KeepWeekly(); ok {
		_spec.SetField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedKeepWeekly(); ok {
		_spec.AddField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.KeepMonthly(); ok {
		_spec.SetField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedKeepMonthly(); ok {
		_spec.AddField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.KeepYearly(); ok {
		_spec.SetField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedKeepYearly(); ok {
		_spec.AddField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := pru.mutation.KeepWithinDays(); ok {
		_spec.SetField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedKeepWithinDays(); ok {
		_spec.AddField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if pru.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pruningrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PruningRuleUpdateOne is the builder for updating a single PruningRule entity.
type PruningRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PruningRuleMutation
}

// SetKeepHourly sets the "keep_hourly" field.
func (pruo *PruningRuleUpdateOne) SetKeepHourly(i int) *PruningRuleUpdateOne {
	pruo.mutation.ResetKeepHourly()
	pruo.mutation.SetKeepHourly(i)
	return pruo
}

// SetNillableKeepHourly sets the "keep_hourly" field if the given value is not nil.
func (pruo *PruningRuleUpdateOne) SetNillableKeepHourly(i *int) *PruningRuleUpdateOne {
	if i != nil {
		pruo.SetKeepHourly(*i)
	}
	return pruo
}

// AddKeepHourly adds i to the "keep_hourly" field.
func (pruo *PruningRuleUpdateOne) AddKeepHourly(i int) *PruningRuleUpdateOne {
	pruo.mutation.AddKeepHourly(i)
	return pruo
}

// SetKeepDaily sets the "keep_daily" field.
func (pruo *PruningRuleUpdateOne) SetKeepDaily(i int) *PruningRuleUpdateOne {
	pruo.mutation.ResetKeepDaily()
	pruo.mutation.SetKeepDaily(i)
	return pruo
}

// SetNillableKeepDaily sets the "keep_daily" field if the given value is not nil.
func (pruo *PruningRuleUpdateOne) SetNillableKeepDaily(i *int) *PruningRuleUpdateOne {
	if i != nil {
		pruo.SetKeepDaily(*i)
	}
	return pruo
}

// AddKeepDaily adds i to the "keep_daily" field.
func (pruo *PruningRuleUpdateOne) AddKeepDaily(i int) *PruningRuleUpdateOne {
	pruo.mutation.AddKeepDaily(i)
	return pruo
}

// SetKeepWeekly sets the "keep_weekly" field.
func (pruo *PruningRuleUpdateOne) SetKeepWeekly(i int) *PruningRuleUpdateOne {
	pruo.mutation.ResetKeepWeekly()
	pruo.mutation.SetKeepWeekly(i)
	return pruo
}

// SetNillableKeepWeekly sets the "keep_weekly" field if the given value is not nil.
func (pruo *PruningRuleUpdateOne) SetNillableKeepWeekly(i *int) *PruningRuleUpdateOne {
	if i != nil {
		pruo.SetKeepWeekly(*i)
	}
	return pruo
}

// AddKeepWeekly adds i to the "keep_weekly" field.
func (pruo *PruningRuleUpdateOne) AddKeepWeekly(i int) *PruningRuleUpdateOne {
	pruo.mutation.AddKeepWeekly(i)
	return pruo
}

// SetKeepMonthly sets the "keep_monthly" field.
func (pruo *PruningRuleUpdateOne) SetKeepMonthly(i int) *PruningRuleUpdateOne {
	pruo.mutation.ResetKeepMonthly()
	pruo.mutation.SetKeepMonthly(i)
	return pruo
}

// SetNillableKeepMonthly sets the "keep_monthly" field if the given value is not nil.
func (pruo *PruningRuleUpdateOne) SetNillableKeepMonthly(i *int) *PruningRuleUpdateOne {
	if i != nil {
		pruo.SetKeepMonthly(*i)
	}
	return pruo
}

// AddKeepMonthly adds i to the "keep_monthly" field.
func (pruo *PruningRuleUpdateOne) AddKeepMonthly(i int) *PruningRuleUpdateOne {
	pruo.mutation.AddKeepMonthly(i)
	return pruo
}

// SetKeepYearly sets the "keep_yearly" field.
func (pruo *PruningRuleUpdateOne) SetKeepYearly(i int) *PruningRuleUpdateOne {
	pruo.mutation.ResetKeepYearly()
	pruo.mutation.SetKeepYearly(i)
	return pruo
}

// SetNillableKeepYearly sets the "keep_yearly" field if the given value is not nil.
func (pruo *PruningRuleUpdateOne) SetNillableKeepYearly(i *int) *PruningRuleUpdateOne {
	if i != nil {
		pruo.SetKeepYearly(*i)
	}
	return pruo
}

// AddKeepYearly adds i to the "keep_yearly" field.
func (pruo *PruningRuleUpdateOne) AddKeepYearly(i int) *PruningRuleUpdateOne {
	pruo.mutation.AddKeepYearly(i)
	return pruo
}

// SetKeepWithinDays sets the "keep_within_days" field.
func (pruo *PruningRuleUpdateOne) SetKeepWithinDays(i int) *PruningRuleUpdateOne {
	pruo.mutation.ResetKeepWithinDays()
	pruo.mutation.SetKeepWithinDays(i)
	return pruo
}

// SetNillableKeepWithinDays sets the "keep_within_days" field if the given value is not nil.
func (pruo *PruningRuleUpdateOne) SetNillableKeepWithinDays(i *int) *PruningRuleUpdateOne {
	if i != nil {
		pruo.SetKeepWithinDays(*i)
	}
	return pruo
}

// AddKeepWithinDays adds i to the "keep_within_days" field.
func (pruo *PruningRuleUpdateOne) AddKeepWithinDays(i int) *PruningRuleUpdateOne {
	pruo.mutation.AddKeepWithinDays(i)
	return pruo
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (pruo *PruningRuleUpdateOne) SetBackupProfileID(id int) *PruningRuleUpdateOne {
	pruo.mutation.SetBackupProfileID(id)
	return pruo
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (pruo *PruningRuleUpdateOne) SetBackupProfile(b *BackupProfile) *PruningRuleUpdateOne {
	return pruo.SetBackupProfileID(b.ID)
}

// Mutation returns the PruningRuleMutation object of the builder.
func (pruo *PruningRuleUpdateOne) Mutation() *PruningRuleMutation {
	return pruo.mutation
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (pruo *PruningRuleUpdateOne) ClearBackupProfile() *PruningRuleUpdateOne {
	pruo.mutation.ClearBackupProfile()
	return pruo
}

// Where appends a list predicates to the PruningRuleUpdate builder.
func (pruo *PruningRuleUpdateOne) Where(ps ...predicate.PruningRule) *PruningRuleUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PruningRuleUpdateOne) Select(field string, fields ...string) *PruningRuleUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PruningRule entity.
func (pruo *PruningRuleUpdateOne) Save(ctx context.Context) (*PruningRule, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PruningRuleUpdateOne) SaveX(ctx context.Context) *PruningRule {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PruningRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PruningRuleUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PruningRuleUpdateOne) check() error {
	if pruo.mutation.BackupProfileCleared() && len(pruo.mutation.BackupProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PruningRule.backup_profile"`)
	}
	return nil
}

func (pruo *PruningRuleUpdateOne) sqlSave(ctx context.Context) (_node *PruningRule, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pruningrule.Table, pruningrule.Columns, sqlgraph.NewFieldSpec(pruningrule.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PruningRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pruningrule.FieldID)
		for _, f := range fields {
			if !pruningrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pruningrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.KeepHourly(); ok {
		_spec.SetField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedKeepHourly(); ok {
		_spec.AddField(pruningrule.FieldKeepHourly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.KeepDaily(); ok {
		_spec.SetField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedKeepDaily(); ok {
		_spec.AddField(pruningrule.FieldKeepDaily, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.KeepWeekly(); ok {
		_spec.SetField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedKeepWeekly(); ok {
		_spec.AddField(pruningrule.FieldKeepWeekly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.KeepMonthly(); ok {
		_spec.SetField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedKeepMonthly(); ok {
		_spec.AddField(pruningrule.FieldKeepMonthly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.KeepYearly(); ok {
		_spec.SetField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedKeepYearly(); ok {
		_spec.AddField(pruningrule.FieldKeepYearly, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.KeepWithinDays(); ok {
		_spec.SetField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedKeepWithinDays(); ok {
		_spec.AddField(pruningrule.FieldKeepWithinDays, field.TypeInt, value)
	}
	if pruo.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pruningrule.BackupProfileTable,
			Columns: []string{pruningrule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PruningRule{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pruningrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
