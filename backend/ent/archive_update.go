// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/predicate"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// ArchiveUpdate is the builder for updating Archive entities.
type ArchiveUpdate struct {
	config
	hooks     []Hook
	mutation  *ArchiveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ArchiveUpdate builder.
func (_u *ArchiveUpdate) Where(ps ...predicate.Archive) *ArchiveUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArchiveUpdate) SetUpdatedAt(v time.Time) *ArchiveUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *ArchiveUpdate) SetName(v string) *ArchiveUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ArchiveUpdate) SetNillableName(v *string) *ArchiveUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDuration sets the "duration" field.
func (_u *ArchiveUpdate) SetDuration(v float64) *ArchiveUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *ArchiveUpdate) SetNillableDuration(v *float64) *ArchiveUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *ArchiveUpdate) AddDuration(v float64) *ArchiveUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// SetBorgID sets the "borg_id" field.
func (_u *ArchiveUpdate) SetBorgID(v string) *ArchiveUpdate {
	_u.mutation.SetBorgID(v)
	return _u
}

// SetNillableBorgID sets the "borg_id" field if the given value is not nil.
func (_u *ArchiveUpdate) SetNillableBorgID(v *string) *ArchiveUpdate {
	if v != nil {
		_u.SetBorgID(*v)
	}
	return _u
}

// SetWillBePruned sets the "will_be_pruned" field.
func (_u *ArchiveUpdate) SetWillBePruned(v bool) *ArchiveUpdate {
	_u.mutation.SetWillBePruned(v)
	return _u
}

// SetNillableWillBePruned sets the "will_be_pruned" field if the given value is not nil.
func (_u *ArchiveUpdate) SetNillableWillBePruned(v *bool) *ArchiveUpdate {
	if v != nil {
		_u.SetWillBePruned(*v)
	}
	return _u
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (_u *ArchiveUpdate) SetRepositoryID(id int) *ArchiveUpdate {
	_u.mutation.SetRepositoryID(id)
	return _u
}

// SetRepository sets the "repository" edge to the Repository entity.
func (_u *ArchiveUpdate) SetRepository(v *Repository) *ArchiveUpdate {
	return _u.SetRepositoryID(v.ID)
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (_u *ArchiveUpdate) SetBackupProfileID(id int) *ArchiveUpdate {
	_u.mutation.SetBackupProfileID(id)
	return _u
}

// SetNillableBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID if the given value is not nil.
func (_u *ArchiveUpdate) SetNillableBackupProfileID(id *int) *ArchiveUpdate {
	if id != nil {
		_u = _u.SetBackupProfileID(*id)
	}
	return _u
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (_u *ArchiveUpdate) SetBackupProfile(v *BackupProfile) *ArchiveUpdate {
	return _u.SetBackupProfileID(v.ID)
}

// Mutation returns the ArchiveMutation object of the builder.
func (_u *ArchiveUpdate) Mutation() *ArchiveMutation {
	return _u.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (_u *ArchiveUpdate) ClearRepository() *ArchiveUpdate {
	_u.mutation.ClearRepository()
	return _u
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (_u *ArchiveUpdate) ClearBackupProfile() *ArchiveUpdate {
	_u.mutation.ClearBackupProfile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArchiveUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArchiveUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArchiveUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArchiveUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ArchiveUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := archive.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArchiveUpdate) check() error {
	if _u.mutation.RepositoryCleared() && len(_u.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Archive.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ArchiveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArchiveUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ArchiveUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(archive.Table, archive.Columns, sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(archive.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(archive.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(archive.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(archive.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.BorgID(); ok {
		_spec.SetField(archive.FieldBorgID, field.TypeString, value)
	}
	if value, ok := _u.mutation.WillBePruned(); ok {
		_spec.SetField(archive.FieldWillBePruned, field.TypeBool, value)
	}
	if _u.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.RepositoryTable,
			Columns: []string{archive.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.RepositoryTable,
			Columns: []string{archive.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.BackupProfileTable,
			Columns: []string{archive.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.BackupProfileTable,
			Columns: []string{archive.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArchiveUpdateOne is the builder for updating a single Archive entity.
type ArchiveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ArchiveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArchiveUpdateOne) SetUpdatedAt(v time.Time) *ArchiveUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *ArchiveUpdateOne) SetName(v string) *ArchiveUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ArchiveUpdateOne) SetNillableName(v *string) *ArchiveUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDuration sets the "duration" field.
func (_u *ArchiveUpdateOne) SetDuration(v float64) *ArchiveUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *ArchiveUpdateOne) SetNillableDuration(v *float64) *ArchiveUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *ArchiveUpdateOne) AddDuration(v float64) *ArchiveUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// SetBorgID sets the "borg_id" field.
func (_u *ArchiveUpdateOne) SetBorgID(v string) *ArchiveUpdateOne {
	_u.mutation.SetBorgID(v)
	return _u
}

// SetNillableBorgID sets the "borg_id" field if the given value is not nil.
func (_u *ArchiveUpdateOne) SetNillableBorgID(v *string) *ArchiveUpdateOne {
	if v != nil {
		_u.SetBorgID(*v)
	}
	return _u
}

// SetWillBePruned sets the "will_be_pruned" field.
func (_u *ArchiveUpdateOne) SetWillBePruned(v bool) *ArchiveUpdateOne {
	_u.mutation.SetWillBePruned(v)
	return _u
}

// SetNillableWillBePruned sets the "will_be_pruned" field if the given value is not nil.
func (_u *ArchiveUpdateOne) SetNillableWillBePruned(v *bool) *ArchiveUpdateOne {
	if v != nil {
		_u.SetWillBePruned(*v)
	}
	return _u
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (_u *ArchiveUpdateOne) SetRepositoryID(id int) *ArchiveUpdateOne {
	_u.mutation.SetRepositoryID(id)
	return _u
}

// SetRepository sets the "repository" edge to the Repository entity.
func (_u *ArchiveUpdateOne) SetRepository(v *Repository) *ArchiveUpdateOne {
	return _u.SetRepositoryID(v.ID)
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (_u *ArchiveUpdateOne) SetBackupProfileID(id int) *ArchiveUpdateOne {
	_u.mutation.SetBackupProfileID(id)
	return _u
}

// SetNillableBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID if the given value is not nil.
func (_u *ArchiveUpdateOne) SetNillableBackupProfileID(id *int) *ArchiveUpdateOne {
	if id != nil {
		_u = _u.SetBackupProfileID(*id)
	}
	return _u
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (_u *ArchiveUpdateOne) SetBackupProfile(v *BackupProfile) *ArchiveUpdateOne {
	return _u.SetBackupProfileID(v.ID)
}

// Mutation returns the ArchiveMutation object of the builder.
func (_u *ArchiveUpdateOne) Mutation() *ArchiveMutation {
	return _u.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (_u *ArchiveUpdateOne) ClearRepository() *ArchiveUpdateOne {
	_u.mutation.ClearRepository()
	return _u
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (_u *ArchiveUpdateOne) ClearBackupProfile() *ArchiveUpdateOne {
	_u.mutation.ClearBackupProfile()
	return _u
}

// Where appends a list predicates to the ArchiveUpdate builder.
func (_u *ArchiveUpdateOne) Where(ps ...predicate.Archive) *ArchiveUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArchiveUpdateOne) Select(field string, fields ...string) *ArchiveUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Archive entity.
func (_u *ArchiveUpdateOne) Save(ctx context.Context) (*Archive, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArchiveUpdateOne) SaveX(ctx context.Context) *Archive {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArchiveUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArchiveUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ArchiveUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := archive.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArchiveUpdateOne) check() error {
	if _u.mutation.RepositoryCleared() && len(_u.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Archive.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ArchiveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArchiveUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ArchiveUpdateOne) sqlSave(ctx context.Context) (_node *Archive, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(archive.Table, archive.Columns, sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Archive.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, archive.FieldID)
		for _, f := range fields {
			if !archive.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != archive.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(archive.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(archive.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(archive.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(archive.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.BorgID(); ok {
		_spec.SetField(archive.FieldBorgID, field.TypeString, value)
	}
	if value, ok := _u.mutation.WillBePruned(); ok {
		_spec.SetField(archive.FieldWillBePruned, field.TypeBool, value)
	}
	if _u.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.RepositoryTable,
			Columns: []string{archive.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.RepositoryTable,
			Columns: []string{archive.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.BackupProfileTable,
			Columns: []string{archive.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   archive.BackupProfileTable,
			Columns: []string{archive.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Archive{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
