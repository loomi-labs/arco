// Code generated by ent, DO NOT EDIT.

package notification

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSeen holds the string denoting the seen field in the database.
	FieldSeen = "seen"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// EdgeBackupProfile holds the string denoting the backup_profile edge name in mutations.
	EdgeBackupProfile = "backup_profile"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// BackupProfileTable is the table that holds the backup_profile relation/edge.
	BackupProfileTable = "notifications"
	// BackupProfileInverseTable is the table name for the BackupProfile entity.
	// It exists in this package in order to avoid circular dependency with the "backupprofile" package.
	BackupProfileInverseTable = "backup_profiles"
	// BackupProfileColumn is the table column denoting the backup_profile relation/edge.
	BackupProfileColumn = "notification_backup_profile"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "notifications"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "notification_repository"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMessage,
	FieldType,
	FieldSeen,
	FieldAction,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notifications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"notification_backup_profile",
	"notification_repository",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSeen holds the default value on creation for the "seen" field.
	DefaultSeen bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeFailedBackupRun   Type = "failed_backup_run"
	TypeFailedPruningRun  Type = "failed_pruning_run"
	TypeWarningBackupRun  Type = "warning_backup_run"
	TypeWarningPruningRun Type = "warning_pruning_run"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeFailedBackupRun, TypeFailedPruningRun, TypeWarningBackupRun, TypeWarningPruningRun:
		return nil
	default:
		return fmt.Errorf("notification: invalid enum value for type field: %q", _type)
	}
}

// Action defines the type for the "action" enum field.
type Action string

// Action values.
const (
	ActionUnlockRepository Action = "unlockRepository"
)

func (a Action) String() string {
	return string(a)
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a Action) error {
	switch a {
	case ActionUnlockRepository:
		return nil
	default:
		return fmt.Errorf("notification: invalid enum value for action field: %q", a)
	}
}

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySeen orders the results by the seen field.
func BySeen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeen, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByBackupProfileField orders the results by backup_profile field.
func ByBackupProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackupProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByRepositoryField orders the results by repository field.
func ByRepositoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoryStep(), sql.OrderByField(field, opts...))
	}
}
func newBackupProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackupProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BackupProfileTable, BackupProfileColumn),
	)
}
func newRepositoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RepositoryTable, RepositoryColumn),
	)
}
