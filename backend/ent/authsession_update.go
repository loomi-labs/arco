// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/authsession"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// AuthSessionUpdate is the builder for updating AuthSession entities.
type AuthSessionUpdate struct {
	config
	hooks     []Hook
	mutation  *AuthSessionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuthSessionUpdate builder.
func (asu *AuthSessionUpdate) Where(ps ...predicate.AuthSession) *AuthSessionUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AuthSessionUpdate) SetUpdatedAt(t time.Time) *AuthSessionUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetSessionID sets the "session_id" field.
func (asu *AuthSessionUpdate) SetSessionID(s string) *AuthSessionUpdate {
	asu.mutation.SetSessionID(s)
	return asu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (asu *AuthSessionUpdate) SetNillableSessionID(s *string) *AuthSessionUpdate {
	if s != nil {
		asu.SetSessionID(*s)
	}
	return asu
}

// SetStatus sets the "status" field.
func (asu *AuthSessionUpdate) SetStatus(a authsession.Status) *AuthSessionUpdate {
	asu.mutation.SetStatus(a)
	return asu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asu *AuthSessionUpdate) SetNillableStatus(a *authsession.Status) *AuthSessionUpdate {
	if a != nil {
		asu.SetStatus(*a)
	}
	return asu
}

// SetExpiresAt sets the "expires_at" field.
func (asu *AuthSessionUpdate) SetExpiresAt(t time.Time) *AuthSessionUpdate {
	asu.mutation.SetExpiresAt(t)
	return asu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (asu *AuthSessionUpdate) SetNillableExpiresAt(t *time.Time) *AuthSessionUpdate {
	if t != nil {
		asu.SetExpiresAt(*t)
	}
	return asu
}

// Mutation returns the AuthSessionMutation object of the builder.
func (asu *AuthSessionUpdate) Mutation() *AuthSessionMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AuthSessionUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AuthSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AuthSessionUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AuthSessionUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AuthSessionUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := authsession.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AuthSessionUpdate) check() error {
	if v, ok := asu.mutation.Status(); ok {
		if err := authsession.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AuthSession.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AuthSessionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthSessionUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AuthSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authsession.Table, authsession.Columns, sqlgraph.NewFieldSpec(authsession.FieldID, field.TypeInt))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(authsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asu.mutation.SessionID(); ok {
		_spec.SetField(authsession.FieldSessionID, field.TypeString, value)
	}
	if value, ok := asu.mutation.Status(); ok {
		_spec.SetField(authsession.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := asu.mutation.ExpiresAt(); ok {
		_spec.SetField(authsession.FieldExpiresAt, field.TypeTime, value)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AuthSessionUpdateOne is the builder for updating a single AuthSession entity.
type AuthSessionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuthSessionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AuthSessionUpdateOne) SetUpdatedAt(t time.Time) *AuthSessionUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetSessionID sets the "session_id" field.
func (asuo *AuthSessionUpdateOne) SetSessionID(s string) *AuthSessionUpdateOne {
	asuo.mutation.SetSessionID(s)
	return asuo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (asuo *AuthSessionUpdateOne) SetNillableSessionID(s *string) *AuthSessionUpdateOne {
	if s != nil {
		asuo.SetSessionID(*s)
	}
	return asuo
}

// SetStatus sets the "status" field.
func (asuo *AuthSessionUpdateOne) SetStatus(a authsession.Status) *AuthSessionUpdateOne {
	asuo.mutation.SetStatus(a)
	return asuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asuo *AuthSessionUpdateOne) SetNillableStatus(a *authsession.Status) *AuthSessionUpdateOne {
	if a != nil {
		asuo.SetStatus(*a)
	}
	return asuo
}

// SetExpiresAt sets the "expires_at" field.
func (asuo *AuthSessionUpdateOne) SetExpiresAt(t time.Time) *AuthSessionUpdateOne {
	asuo.mutation.SetExpiresAt(t)
	return asuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (asuo *AuthSessionUpdateOne) SetNillableExpiresAt(t *time.Time) *AuthSessionUpdateOne {
	if t != nil {
		asuo.SetExpiresAt(*t)
	}
	return asuo
}

// Mutation returns the AuthSessionMutation object of the builder.
func (asuo *AuthSessionUpdateOne) Mutation() *AuthSessionMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AuthSessionUpdate builder.
func (asuo *AuthSessionUpdateOne) Where(ps ...predicate.AuthSession) *AuthSessionUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AuthSessionUpdateOne) Select(field string, fields ...string) *AuthSessionUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AuthSession entity.
func (asuo *AuthSessionUpdateOne) Save(ctx context.Context) (*AuthSession, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AuthSessionUpdateOne) SaveX(ctx context.Context) *AuthSession {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AuthSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AuthSessionUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AuthSessionUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := authsession.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AuthSessionUpdateOne) check() error {
	if v, ok := asuo.mutation.Status(); ok {
		if err := authsession.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AuthSession.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AuthSessionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthSessionUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AuthSessionUpdateOne) sqlSave(ctx context.Context) (_node *AuthSession, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authsession.Table, authsession.Columns, sqlgraph.NewFieldSpec(authsession.FieldID, field.TypeInt))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authsession.FieldID)
		for _, f := range fields {
			if !authsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(authsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.SessionID(); ok {
		_spec.SetField(authsession.FieldSessionID, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Status(); ok {
		_spec.SetField(authsession.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := asuo.mutation.ExpiresAt(); ok {
		_spec.SetField(authsession.FieldExpiresAt, field.TypeTime, value)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AuthSession{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
