// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"timebender/backend/ent/backupprofile"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BackupProfile is the model entity for the BackupProfile schema.
type BackupProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Prefix holds the value of the "prefix" field.
	Prefix string `json:"prefix"`
	// Directories holds the value of the "directories" field.
	Directories []string `json:"directories"`
	// HasPeriodicBackups holds the value of the "hasPeriodicBackups" field.
	HasPeriodicBackups bool `json:"hasPeriodicBackups"`
	// PeriodicBackupTime holds the value of the "periodicBackupTime" field.
	PeriodicBackupTime time.Time `json:"periodicBackupTime"`
	// IsSetupComplete holds the value of the "isSetupComplete" field.
	IsSetupComplete bool `json:"isSetupComplete"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BackupProfileQuery when eager-loading is set.
	Edges        BackupProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BackupProfileEdges holds the relations/edges for other nodes in the graph.
type BackupProfileEdges struct {
	// Repositories holds the value of the repositories edge.
	Repositories []*Repository `json:"repositories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoriesOrErr returns the Repositories value or an error if the edge
// was not loaded in eager-loading.
func (e BackupProfileEdges) RepositoriesOrErr() ([]*Repository, error) {
	if e.loadedTypes[0] {
		return e.Repositories, nil
	}
	return nil, &NotLoadedError{edge: "repositories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BackupProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case backupprofile.FieldDirectories:
			values[i] = new([]byte)
		case backupprofile.FieldHasPeriodicBackups, backupprofile.FieldIsSetupComplete:
			values[i] = new(sql.NullBool)
		case backupprofile.FieldID:
			values[i] = new(sql.NullInt64)
		case backupprofile.FieldName, backupprofile.FieldPrefix:
			values[i] = new(sql.NullString)
		case backupprofile.FieldPeriodicBackupTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BackupProfile fields.
func (bp *BackupProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case backupprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bp.ID = int(value.Int64)
		case backupprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bp.Name = value.String
			}
		case backupprofile.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				bp.Prefix = value.String
			}
		case backupprofile.FieldDirectories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field directories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bp.Directories); err != nil {
					return fmt.Errorf("unmarshal field directories: %w", err)
				}
			}
		case backupprofile.FieldHasPeriodicBackups:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hasPeriodicBackups", values[i])
			} else if value.Valid {
				bp.HasPeriodicBackups = value.Bool
			}
		case backupprofile.FieldPeriodicBackupTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field periodicBackupTime", values[i])
			} else if value.Valid {
				bp.PeriodicBackupTime = value.Time
			}
		case backupprofile.FieldIsSetupComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isSetupComplete", values[i])
			} else if value.Valid {
				bp.IsSetupComplete = value.Bool
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BackupProfile.
// This includes values selected through modifiers, order, etc.
func (bp *BackupProfile) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// QueryRepositories queries the "repositories" edge of the BackupProfile entity.
func (bp *BackupProfile) QueryRepositories() *RepositoryQuery {
	return NewBackupProfileClient(bp.config).QueryRepositories(bp)
}

// Update returns a builder for updating this BackupProfile.
// Note that you need to call BackupProfile.Unwrap() before calling this method if this BackupProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BackupProfile) Update() *BackupProfileUpdateOne {
	return NewBackupProfileClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BackupProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BackupProfile) Unwrap() *BackupProfile {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BackupProfile is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BackupProfile) String() string {
	var builder strings.Builder
	builder.WriteString("BackupProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("name=")
	builder.WriteString(bp.Name)
	builder.WriteString(", ")
	builder.WriteString("prefix=")
	builder.WriteString(bp.Prefix)
	builder.WriteString(", ")
	builder.WriteString("directories=")
	builder.WriteString(fmt.Sprintf("%v", bp.Directories))
	builder.WriteString(", ")
	builder.WriteString("hasPeriodicBackups=")
	builder.WriteString(fmt.Sprintf("%v", bp.HasPeriodicBackups))
	builder.WriteString(", ")
	builder.WriteString("periodicBackupTime=")
	builder.WriteString(bp.PeriodicBackupTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("isSetupComplete=")
	builder.WriteString(fmt.Sprintf("%v", bp.IsSetupComplete))
	builder.WriteByte(')')
	return builder.String()
}

// BackupProfiles is a parsable slice of BackupProfile.
type BackupProfiles []*BackupProfile
