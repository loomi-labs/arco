// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/backupschedule"
	"arco/backend/ent/pruningrule"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BackupProfile is the model entity for the BackupProfile schema.
type BackupProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Prefix holds the value of the "prefix" field.
	Prefix string `json:"prefix"`
	// BackupPaths holds the value of the "backup_paths" field.
	BackupPaths []string `json:"backupPaths"`
	// ExcludePaths holds the value of the "exclude_paths" field.
	ExcludePaths []string `json:"excludePaths"`
	// Icon holds the value of the "icon" field.
	Icon backupprofile.Icon `json:"icon"`
	// NextIntegrityCheck holds the value of the "next_integrity_check" field.
	NextIntegrityCheck *time.Time `json:"nextIntegrityCheck"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BackupProfileQuery when eager-loading is set.
	Edges        BackupProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BackupProfileEdges holds the relations/edges for other nodes in the graph.
type BackupProfileEdges struct {
	// Repositories holds the value of the repositories edge.
	Repositories []*Repository `json:"repositories,omitempty"`
	// Archives holds the value of the archives edge.
	Archives []*Archive `json:"archives,omitempty"`
	// BackupSchedule holds the value of the backup_schedule edge.
	BackupSchedule *BackupSchedule `json:"backupSchedule,omitempty"`
	// FailedBackupRuns holds the value of the failed_backup_runs edge.
	FailedBackupRuns []*FailedBackupRun `json:"failedBackupRuns,omitempty"`
	// PruningRule holds the value of the pruning_rule edge.
	PruningRule *PruningRule `json:"pruningRule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// RepositoriesOrErr returns the Repositories value or an error if the edge
// was not loaded in eager-loading.
func (e BackupProfileEdges) RepositoriesOrErr() ([]*Repository, error) {
	if e.loadedTypes[0] {
		return e.Repositories, nil
	}
	return nil, &NotLoadedError{edge: "repositories"}
}

// ArchivesOrErr returns the Archives value or an error if the edge
// was not loaded in eager-loading.
func (e BackupProfileEdges) ArchivesOrErr() ([]*Archive, error) {
	if e.loadedTypes[1] {
		return e.Archives, nil
	}
	return nil, &NotLoadedError{edge: "archives"}
}

// BackupScheduleOrErr returns the BackupSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BackupProfileEdges) BackupScheduleOrErr() (*BackupSchedule, error) {
	if e.BackupSchedule != nil {
		return e.BackupSchedule, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: backupschedule.Label}
	}
	return nil, &NotLoadedError{edge: "backup_schedule"}
}

// FailedBackupRunsOrErr returns the FailedBackupRuns value or an error if the edge
// was not loaded in eager-loading.
func (e BackupProfileEdges) FailedBackupRunsOrErr() ([]*FailedBackupRun, error) {
	if e.loadedTypes[3] {
		return e.FailedBackupRuns, nil
	}
	return nil, &NotLoadedError{edge: "failed_backup_runs"}
}

// PruningRuleOrErr returns the PruningRule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BackupProfileEdges) PruningRuleOrErr() (*PruningRule, error) {
	if e.PruningRule != nil {
		return e.PruningRule, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: pruningrule.Label}
	}
	return nil, &NotLoadedError{edge: "pruning_rule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BackupProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case backupprofile.FieldBackupPaths, backupprofile.FieldExcludePaths:
			values[i] = new([]byte)
		case backupprofile.FieldID:
			values[i] = new(sql.NullInt64)
		case backupprofile.FieldName, backupprofile.FieldPrefix, backupprofile.FieldIcon:
			values[i] = new(sql.NullString)
		case backupprofile.FieldNextIntegrityCheck:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BackupProfile fields.
func (bp *BackupProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case backupprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bp.ID = int(value.Int64)
		case backupprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bp.Name = value.String
			}
		case backupprofile.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				bp.Prefix = value.String
			}
		case backupprofile.FieldBackupPaths:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field backup_paths", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bp.BackupPaths); err != nil {
					return fmt.Errorf("unmarshal field backup_paths: %w", err)
				}
			}
		case backupprofile.FieldExcludePaths:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field exclude_paths", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bp.ExcludePaths); err != nil {
					return fmt.Errorf("unmarshal field exclude_paths: %w", err)
				}
			}
		case backupprofile.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				bp.Icon = backupprofile.Icon(value.String)
			}
		case backupprofile.FieldNextIntegrityCheck:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_integrity_check", values[i])
			} else if value.Valid {
				bp.NextIntegrityCheck = new(time.Time)
				*bp.NextIntegrityCheck = value.Time
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BackupProfile.
// This includes values selected through modifiers, order, etc.
func (bp *BackupProfile) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// QueryRepositories queries the "repositories" edge of the BackupProfile entity.
func (bp *BackupProfile) QueryRepositories() *RepositoryQuery {
	return NewBackupProfileClient(bp.config).QueryRepositories(bp)
}

// QueryArchives queries the "archives" edge of the BackupProfile entity.
func (bp *BackupProfile) QueryArchives() *ArchiveQuery {
	return NewBackupProfileClient(bp.config).QueryArchives(bp)
}

// QueryBackupSchedule queries the "backup_schedule" edge of the BackupProfile entity.
func (bp *BackupProfile) QueryBackupSchedule() *BackupScheduleQuery {
	return NewBackupProfileClient(bp.config).QueryBackupSchedule(bp)
}

// QueryFailedBackupRuns queries the "failed_backup_runs" edge of the BackupProfile entity.
func (bp *BackupProfile) QueryFailedBackupRuns() *FailedBackupRunQuery {
	return NewBackupProfileClient(bp.config).QueryFailedBackupRuns(bp)
}

// QueryPruningRule queries the "pruning_rule" edge of the BackupProfile entity.
func (bp *BackupProfile) QueryPruningRule() *PruningRuleQuery {
	return NewBackupProfileClient(bp.config).QueryPruningRule(bp)
}

// Update returns a builder for updating this BackupProfile.
// Note that you need to call BackupProfile.Unwrap() before calling this method if this BackupProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BackupProfile) Update() *BackupProfileUpdateOne {
	return NewBackupProfileClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BackupProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BackupProfile) Unwrap() *BackupProfile {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BackupProfile is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BackupProfile) String() string {
	var builder strings.Builder
	builder.WriteString("BackupProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("name=")
	builder.WriteString(bp.Name)
	builder.WriteString(", ")
	builder.WriteString("prefix=")
	builder.WriteString(bp.Prefix)
	builder.WriteString(", ")
	builder.WriteString("backup_paths=")
	builder.WriteString(fmt.Sprintf("%v", bp.BackupPaths))
	builder.WriteString(", ")
	builder.WriteString("exclude_paths=")
	builder.WriteString(fmt.Sprintf("%v", bp.ExcludePaths))
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(fmt.Sprintf("%v", bp.Icon))
	builder.WriteString(", ")
	if v := bp.NextIntegrityCheck; v != nil {
		builder.WriteString("next_integrity_check=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BackupProfiles is a parsable slice of BackupProfile.
type BackupProfiles []*BackupProfile
