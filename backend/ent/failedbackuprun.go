// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/failedbackuprun"
	"arco/backend/ent/repository"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FailedBackupRun is the model entity for the FailedBackupRun schema.
type FailedBackupRun struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FailedBackupRunQuery when eager-loading is set.
	Edges                            FailedBackupRunEdges `json:"edges"`
	failed_backup_run_backup_profile *int
	failed_backup_run_repository     *int
	selectValues                     sql.SelectValues
}

// FailedBackupRunEdges holds the relations/edges for other nodes in the graph.
type FailedBackupRunEdges struct {
	// BackupProfile holds the value of the backup_profile edge.
	BackupProfile *BackupProfile `json:"backupProfile,omitempty"`
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BackupProfileOrErr returns the BackupProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FailedBackupRunEdges) BackupProfileOrErr() (*BackupProfile, error) {
	if e.BackupProfile != nil {
		return e.BackupProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: backupprofile.Label}
	}
	return nil, &NotLoadedError{edge: "backup_profile"}
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FailedBackupRunEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FailedBackupRun) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case failedbackuprun.FieldID:
			values[i] = new(sql.NullInt64)
		case failedbackuprun.FieldError:
			values[i] = new(sql.NullString)
		case failedbackuprun.ForeignKeys[0]: // failed_backup_run_backup_profile
			values[i] = new(sql.NullInt64)
		case failedbackuprun.ForeignKeys[1]: // failed_backup_run_repository
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FailedBackupRun fields.
func (fbr *FailedBackupRun) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case failedbackuprun.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fbr.ID = int(value.Int64)
		case failedbackuprun.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				fbr.Error = value.String
			}
		case failedbackuprun.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field failed_backup_run_backup_profile", value)
			} else if value.Valid {
				fbr.failed_backup_run_backup_profile = new(int)
				*fbr.failed_backup_run_backup_profile = int(value.Int64)
			}
		case failedbackuprun.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field failed_backup_run_repository", value)
			} else if value.Valid {
				fbr.failed_backup_run_repository = new(int)
				*fbr.failed_backup_run_repository = int(value.Int64)
			}
		default:
			fbr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FailedBackupRun.
// This includes values selected through modifiers, order, etc.
func (fbr *FailedBackupRun) Value(name string) (ent.Value, error) {
	return fbr.selectValues.Get(name)
}

// QueryBackupProfile queries the "backup_profile" edge of the FailedBackupRun entity.
func (fbr *FailedBackupRun) QueryBackupProfile() *BackupProfileQuery {
	return NewFailedBackupRunClient(fbr.config).QueryBackupProfile(fbr)
}

// QueryRepository queries the "repository" edge of the FailedBackupRun entity.
func (fbr *FailedBackupRun) QueryRepository() *RepositoryQuery {
	return NewFailedBackupRunClient(fbr.config).QueryRepository(fbr)
}

// Update returns a builder for updating this FailedBackupRun.
// Note that you need to call FailedBackupRun.Unwrap() before calling this method if this FailedBackupRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (fbr *FailedBackupRun) Update() *FailedBackupRunUpdateOne {
	return NewFailedBackupRunClient(fbr.config).UpdateOne(fbr)
}

// Unwrap unwraps the FailedBackupRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fbr *FailedBackupRun) Unwrap() *FailedBackupRun {
	_tx, ok := fbr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FailedBackupRun is not a transactional entity")
	}
	fbr.config.driver = _tx.drv
	return fbr
}

// String implements the fmt.Stringer.
func (fbr *FailedBackupRun) String() string {
	var builder strings.Builder
	builder.WriteString("FailedBackupRun(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fbr.ID))
	builder.WriteString("error=")
	builder.WriteString(fbr.Error)
	builder.WriteByte(')')
	return builder.String()
}

// FailedBackupRuns is a parsable slice of FailedBackupRun.
type FailedBackupRuns []*FailedBackupRun
