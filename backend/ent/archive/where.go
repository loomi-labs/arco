// Code generated by ent, DO NOT EDIT.

package archive

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Archive {
	return predicate.Archive(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Archive {
	return predicate.Archive(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Archive {
	return predicate.Archive(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Archive {
	return predicate.Archive(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Archive {
	return predicate.Archive(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Archive {
	return predicate.Archive(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Archive {
	return predicate.Archive(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldCreatedAt, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldDuration, v))
}

// BorgID applies equality check predicate on the "borg_id" field. It's identical to BorgIDEQ.
func BorgID(v string) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldBorgID, v))
}

// WillBePruned applies equality check predicate on the "will_be_pruned" field. It's identical to WillBePrunedEQ.
func WillBePruned(v bool) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldWillBePruned, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Archive {
	return predicate.Archive(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Archive {
	return predicate.Archive(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Archive {
	return predicate.Archive(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Archive {
	return predicate.Archive(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Archive {
	return predicate.Archive(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Archive {
	return predicate.Archive(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Archive {
	return predicate.Archive(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Archive {
	return predicate.Archive(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Archive {
	return predicate.Archive(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Archive {
	return predicate.Archive(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Archive {
	return predicate.Archive(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Archive {
	return predicate.Archive(sql.FieldContainsFold(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Archive {
	return predicate.Archive(sql.FieldLTE(FieldCreatedAt, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...float64) predicate.Archive {
	return predicate.Archive(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...float64) predicate.Archive {
	return predicate.Archive(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v float64) predicate.Archive {
	return predicate.Archive(sql.FieldLTE(FieldDuration, v))
}

// BorgIDEQ applies the EQ predicate on the "borg_id" field.
func BorgIDEQ(v string) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldBorgID, v))
}

// BorgIDNEQ applies the NEQ predicate on the "borg_id" field.
func BorgIDNEQ(v string) predicate.Archive {
	return predicate.Archive(sql.FieldNEQ(FieldBorgID, v))
}

// BorgIDIn applies the In predicate on the "borg_id" field.
func BorgIDIn(vs ...string) predicate.Archive {
	return predicate.Archive(sql.FieldIn(FieldBorgID, vs...))
}

// BorgIDNotIn applies the NotIn predicate on the "borg_id" field.
func BorgIDNotIn(vs ...string) predicate.Archive {
	return predicate.Archive(sql.FieldNotIn(FieldBorgID, vs...))
}

// BorgIDGT applies the GT predicate on the "borg_id" field.
func BorgIDGT(v string) predicate.Archive {
	return predicate.Archive(sql.FieldGT(FieldBorgID, v))
}

// BorgIDGTE applies the GTE predicate on the "borg_id" field.
func BorgIDGTE(v string) predicate.Archive {
	return predicate.Archive(sql.FieldGTE(FieldBorgID, v))
}

// BorgIDLT applies the LT predicate on the "borg_id" field.
func BorgIDLT(v string) predicate.Archive {
	return predicate.Archive(sql.FieldLT(FieldBorgID, v))
}

// BorgIDLTE applies the LTE predicate on the "borg_id" field.
func BorgIDLTE(v string) predicate.Archive {
	return predicate.Archive(sql.FieldLTE(FieldBorgID, v))
}

// BorgIDContains applies the Contains predicate on the "borg_id" field.
func BorgIDContains(v string) predicate.Archive {
	return predicate.Archive(sql.FieldContains(FieldBorgID, v))
}

// BorgIDHasPrefix applies the HasPrefix predicate on the "borg_id" field.
func BorgIDHasPrefix(v string) predicate.Archive {
	return predicate.Archive(sql.FieldHasPrefix(FieldBorgID, v))
}

// BorgIDHasSuffix applies the HasSuffix predicate on the "borg_id" field.
func BorgIDHasSuffix(v string) predicate.Archive {
	return predicate.Archive(sql.FieldHasSuffix(FieldBorgID, v))
}

// BorgIDEqualFold applies the EqualFold predicate on the "borg_id" field.
func BorgIDEqualFold(v string) predicate.Archive {
	return predicate.Archive(sql.FieldEqualFold(FieldBorgID, v))
}

// BorgIDContainsFold applies the ContainsFold predicate on the "borg_id" field.
func BorgIDContainsFold(v string) predicate.Archive {
	return predicate.Archive(sql.FieldContainsFold(FieldBorgID, v))
}

// WillBePrunedEQ applies the EQ predicate on the "will_be_pruned" field.
func WillBePrunedEQ(v bool) predicate.Archive {
	return predicate.Archive(sql.FieldEQ(FieldWillBePruned, v))
}

// WillBePrunedNEQ applies the NEQ predicate on the "will_be_pruned" field.
func WillBePrunedNEQ(v bool) predicate.Archive {
	return predicate.Archive(sql.FieldNEQ(FieldWillBePruned, v))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.Archive {
	return predicate.Archive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.Archive {
	return predicate.Archive(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBackupProfile applies the HasEdge predicate on the "backup_profile" edge.
func HasBackupProfile() predicate.Archive {
	return predicate.Archive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BackupProfileTable, BackupProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackupProfileWith applies the HasEdge predicate on the "backup_profile" edge with a given conditions (other predicates).
func HasBackupProfileWith(preds ...predicate.BackupProfile) predicate.Archive {
	return predicate.Archive(func(s *sql.Selector) {
		step := newBackupProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Archive) predicate.Archive {
	return predicate.Archive(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Archive) predicate.Archive {
	return predicate.Archive(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Archive) predicate.Archive {
	return predicate.Archive(sql.NotPredicates(p))
}
