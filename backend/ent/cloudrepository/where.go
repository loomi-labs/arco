// Code generated by ent, DO NOT EDIT.

package cloudrepository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldUpdatedAt, v))
}

// CloudID applies equality check predicate on the "cloud_id" field. It's identical to CloudIDEQ.
func CloudID(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldCloudID, v))
}

// StorageUsedBytes applies equality check predicate on the "storage_used_bytes" field. It's identical to StorageUsedBytesEQ.
func StorageUsedBytes(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldStorageUsedBytes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLTE(FieldUpdatedAt, v))
}

// CloudIDEQ applies the EQ predicate on the "cloud_id" field.
func CloudIDEQ(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldCloudID, v))
}

// CloudIDNEQ applies the NEQ predicate on the "cloud_id" field.
func CloudIDNEQ(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNEQ(FieldCloudID, v))
}

// CloudIDIn applies the In predicate on the "cloud_id" field.
func CloudIDIn(vs ...string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldIn(FieldCloudID, vs...))
}

// CloudIDNotIn applies the NotIn predicate on the "cloud_id" field.
func CloudIDNotIn(vs ...string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNotIn(FieldCloudID, vs...))
}

// CloudIDGT applies the GT predicate on the "cloud_id" field.
func CloudIDGT(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGT(FieldCloudID, v))
}

// CloudIDGTE applies the GTE predicate on the "cloud_id" field.
func CloudIDGTE(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGTE(FieldCloudID, v))
}

// CloudIDLT applies the LT predicate on the "cloud_id" field.
func CloudIDLT(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLT(FieldCloudID, v))
}

// CloudIDLTE applies the LTE predicate on the "cloud_id" field.
func CloudIDLTE(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLTE(FieldCloudID, v))
}

// CloudIDContains applies the Contains predicate on the "cloud_id" field.
func CloudIDContains(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldContains(FieldCloudID, v))
}

// CloudIDHasPrefix applies the HasPrefix predicate on the "cloud_id" field.
func CloudIDHasPrefix(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldHasPrefix(FieldCloudID, v))
}

// CloudIDHasSuffix applies the HasSuffix predicate on the "cloud_id" field.
func CloudIDHasSuffix(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldHasSuffix(FieldCloudID, v))
}

// CloudIDEqualFold applies the EqualFold predicate on the "cloud_id" field.
func CloudIDEqualFold(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEqualFold(FieldCloudID, v))
}

// CloudIDContainsFold applies the ContainsFold predicate on the "cloud_id" field.
func CloudIDContainsFold(v string) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldContainsFold(FieldCloudID, v))
}

// StorageUsedBytesEQ applies the EQ predicate on the "storage_used_bytes" field.
func StorageUsedBytesEQ(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldStorageUsedBytes, v))
}

// StorageUsedBytesNEQ applies the NEQ predicate on the "storage_used_bytes" field.
func StorageUsedBytesNEQ(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNEQ(FieldStorageUsedBytes, v))
}

// StorageUsedBytesIn applies the In predicate on the "storage_used_bytes" field.
func StorageUsedBytesIn(vs ...int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldIn(FieldStorageUsedBytes, vs...))
}

// StorageUsedBytesNotIn applies the NotIn predicate on the "storage_used_bytes" field.
func StorageUsedBytesNotIn(vs ...int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNotIn(FieldStorageUsedBytes, vs...))
}

// StorageUsedBytesGT applies the GT predicate on the "storage_used_bytes" field.
func StorageUsedBytesGT(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGT(FieldStorageUsedBytes, v))
}

// StorageUsedBytesGTE applies the GTE predicate on the "storage_used_bytes" field.
func StorageUsedBytesGTE(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldGTE(FieldStorageUsedBytes, v))
}

// StorageUsedBytesLT applies the LT predicate on the "storage_used_bytes" field.
func StorageUsedBytesLT(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLT(FieldStorageUsedBytes, v))
}

// StorageUsedBytesLTE applies the LTE predicate on the "storage_used_bytes" field.
func StorageUsedBytesLTE(v int64) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldLTE(FieldStorageUsedBytes, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v Location) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v Location) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...Location) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...Location) predicate.CloudRepository {
	return predicate.CloudRepository(sql.FieldNotIn(FieldLocation, vs...))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.CloudRepository {
	return predicate.CloudRepository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.CloudRepository {
	return predicate.CloudRepository(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CloudRepository) predicate.CloudRepository {
	return predicate.CloudRepository(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CloudRepository) predicate.CloudRepository {
	return predicate.CloudRepository(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CloudRepository) predicate.CloudRepository {
	return predicate.CloudRepository(sql.NotPredicates(p))
}
