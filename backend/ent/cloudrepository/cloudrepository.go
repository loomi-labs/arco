// Code generated by ent, DO NOT EDIT.

package cloudrepository

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cloudrepository type in the database.
	Label = "cloud_repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCloudID holds the string denoting the cloud_id field in the database.
	FieldCloudID = "cloud_id"
	// FieldStorageUsedBytes holds the string denoting the storage_used_bytes field in the database.
	FieldStorageUsedBytes = "storage_used_bytes"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// Table holds the table name of the cloudrepository in the database.
	Table = "cloud_repositories"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "repositories"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "cloud_repository_repository"
)

// Columns holds all SQL columns for cloudrepository fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCloudID,
	FieldStorageUsedBytes,
	FieldLocation,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStorageUsedBytes holds the default value on creation for the "storage_used_bytes" field.
	DefaultStorageUsedBytes int64
)

// Location defines the type for the "location" enum field.
type Location string

// Location values.
const (
	LocationEU Location = "EU"
	LocationUS Location = "US"
)

func (l Location) String() string {
	return string(l)
}

// LocationValidator is a validator for the "location" field enum values. It is called by the builders before save.
func LocationValidator(l Location) error {
	switch l {
	case LocationEU, LocationUS:
		return nil
	default:
		return fmt.Errorf("cloudrepository: invalid enum value for location field: %q", l)
	}
}

// OrderOption defines the ordering options for the CloudRepository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCloudID orders the results by the cloud_id field.
func ByCloudID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudID, opts...).ToFunc()
}

// ByStorageUsedBytes orders the results by the storage_used_bytes field.
func ByStorageUsedBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageUsedBytes, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByRepositoryField orders the results by repository field.
func ByRepositoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoryStep(), sql.OrderByField(field, opts...))
	}
}
func newRepositoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RepositoryTable, RepositoryColumn),
	)
}
