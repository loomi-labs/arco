// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/failedbackuprun"
	"arco/backend/ent/predicate"
	"arco/backend/ent/repository"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FailedBackupRunQuery is the builder for querying FailedBackupRun entities.
type FailedBackupRunQuery struct {
	config
	ctx               *QueryContext
	order             []failedbackuprun.OrderOption
	inters            []Interceptor
	predicates        []predicate.FailedBackupRun
	withBackupProfile *BackupProfileQuery
	withRepository    *RepositoryQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FailedBackupRunQuery builder.
func (fbrq *FailedBackupRunQuery) Where(ps ...predicate.FailedBackupRun) *FailedBackupRunQuery {
	fbrq.predicates = append(fbrq.predicates, ps...)
	return fbrq
}

// Limit the number of records to be returned by this query.
func (fbrq *FailedBackupRunQuery) Limit(limit int) *FailedBackupRunQuery {
	fbrq.ctx.Limit = &limit
	return fbrq
}

// Offset to start from.
func (fbrq *FailedBackupRunQuery) Offset(offset int) *FailedBackupRunQuery {
	fbrq.ctx.Offset = &offset
	return fbrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fbrq *FailedBackupRunQuery) Unique(unique bool) *FailedBackupRunQuery {
	fbrq.ctx.Unique = &unique
	return fbrq
}

// Order specifies how the records should be ordered.
func (fbrq *FailedBackupRunQuery) Order(o ...failedbackuprun.OrderOption) *FailedBackupRunQuery {
	fbrq.order = append(fbrq.order, o...)
	return fbrq
}

// QueryBackupProfile chains the current query on the "backup_profile" edge.
func (fbrq *FailedBackupRunQuery) QueryBackupProfile() *BackupProfileQuery {
	query := (&BackupProfileClient{config: fbrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fbrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fbrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(failedbackuprun.Table, failedbackuprun.FieldID, selector),
			sqlgraph.To(backupprofile.Table, backupprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, failedbackuprun.BackupProfileTable, failedbackuprun.BackupProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(fbrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRepository chains the current query on the "repository" edge.
func (fbrq *FailedBackupRunQuery) QueryRepository() *RepositoryQuery {
	query := (&RepositoryClient{config: fbrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fbrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fbrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(failedbackuprun.Table, failedbackuprun.FieldID, selector),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, failedbackuprun.RepositoryTable, failedbackuprun.RepositoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(fbrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FailedBackupRun entity from the query.
// Returns a *NotFoundError when no FailedBackupRun was found.
func (fbrq *FailedBackupRunQuery) First(ctx context.Context) (*FailedBackupRun, error) {
	nodes, err := fbrq.Limit(1).All(setContextOp(ctx, fbrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{failedbackuprun.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) FirstX(ctx context.Context) *FailedBackupRun {
	node, err := fbrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FailedBackupRun ID from the query.
// Returns a *NotFoundError when no FailedBackupRun ID was found.
func (fbrq *FailedBackupRunQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fbrq.Limit(1).IDs(setContextOp(ctx, fbrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{failedbackuprun.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) FirstIDX(ctx context.Context) int {
	id, err := fbrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FailedBackupRun entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FailedBackupRun entity is found.
// Returns a *NotFoundError when no FailedBackupRun entities are found.
func (fbrq *FailedBackupRunQuery) Only(ctx context.Context) (*FailedBackupRun, error) {
	nodes, err := fbrq.Limit(2).All(setContextOp(ctx, fbrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{failedbackuprun.Label}
	default:
		return nil, &NotSingularError{failedbackuprun.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) OnlyX(ctx context.Context) *FailedBackupRun {
	node, err := fbrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FailedBackupRun ID in the query.
// Returns a *NotSingularError when more than one FailedBackupRun ID is found.
// Returns a *NotFoundError when no entities are found.
func (fbrq *FailedBackupRunQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fbrq.Limit(2).IDs(setContextOp(ctx, fbrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{failedbackuprun.Label}
	default:
		err = &NotSingularError{failedbackuprun.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) OnlyIDX(ctx context.Context) int {
	id, err := fbrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FailedBackupRuns.
func (fbrq *FailedBackupRunQuery) All(ctx context.Context) ([]*FailedBackupRun, error) {
	ctx = setContextOp(ctx, fbrq.ctx, ent.OpQueryAll)
	if err := fbrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FailedBackupRun, *FailedBackupRunQuery]()
	return withInterceptors[[]*FailedBackupRun](ctx, fbrq, qr, fbrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) AllX(ctx context.Context) []*FailedBackupRun {
	nodes, err := fbrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FailedBackupRun IDs.
func (fbrq *FailedBackupRunQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fbrq.ctx.Unique == nil && fbrq.path != nil {
		fbrq.Unique(true)
	}
	ctx = setContextOp(ctx, fbrq.ctx, ent.OpQueryIDs)
	if err = fbrq.Select(failedbackuprun.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) IDsX(ctx context.Context) []int {
	ids, err := fbrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fbrq *FailedBackupRunQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fbrq.ctx, ent.OpQueryCount)
	if err := fbrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fbrq, querierCount[*FailedBackupRunQuery](), fbrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) CountX(ctx context.Context) int {
	count, err := fbrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fbrq *FailedBackupRunQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fbrq.ctx, ent.OpQueryExist)
	switch _, err := fbrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fbrq *FailedBackupRunQuery) ExistX(ctx context.Context) bool {
	exist, err := fbrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FailedBackupRunQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fbrq *FailedBackupRunQuery) Clone() *FailedBackupRunQuery {
	if fbrq == nil {
		return nil
	}
	return &FailedBackupRunQuery{
		config:            fbrq.config,
		ctx:               fbrq.ctx.Clone(),
		order:             append([]failedbackuprun.OrderOption{}, fbrq.order...),
		inters:            append([]Interceptor{}, fbrq.inters...),
		predicates:        append([]predicate.FailedBackupRun{}, fbrq.predicates...),
		withBackupProfile: fbrq.withBackupProfile.Clone(),
		withRepository:    fbrq.withRepository.Clone(),
		// clone intermediate query.
		sql:  fbrq.sql.Clone(),
		path: fbrq.path,
	}
}

// WithBackupProfile tells the query-builder to eager-load the nodes that are connected to
// the "backup_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (fbrq *FailedBackupRunQuery) WithBackupProfile(opts ...func(*BackupProfileQuery)) *FailedBackupRunQuery {
	query := (&BackupProfileClient{config: fbrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fbrq.withBackupProfile = query
	return fbrq
}

// WithRepository tells the query-builder to eager-load the nodes that are connected to
// the "repository" edge. The optional arguments are used to configure the query builder of the edge.
func (fbrq *FailedBackupRunQuery) WithRepository(opts ...func(*RepositoryQuery)) *FailedBackupRunQuery {
	query := (&RepositoryClient{config: fbrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fbrq.withRepository = query
	return fbrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Error string `json:"error"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FailedBackupRun.Query().
//		GroupBy(failedbackuprun.FieldError).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fbrq *FailedBackupRunQuery) GroupBy(field string, fields ...string) *FailedBackupRunGroupBy {
	fbrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FailedBackupRunGroupBy{build: fbrq}
	grbuild.flds = &fbrq.ctx.Fields
	grbuild.label = failedbackuprun.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Error string `json:"error"`
//	}
//
//	client.FailedBackupRun.Query().
//		Select(failedbackuprun.FieldError).
//		Scan(ctx, &v)
func (fbrq *FailedBackupRunQuery) Select(fields ...string) *FailedBackupRunSelect {
	fbrq.ctx.Fields = append(fbrq.ctx.Fields, fields...)
	sbuild := &FailedBackupRunSelect{FailedBackupRunQuery: fbrq}
	sbuild.label = failedbackuprun.Label
	sbuild.flds, sbuild.scan = &fbrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FailedBackupRunSelect configured with the given aggregations.
func (fbrq *FailedBackupRunQuery) Aggregate(fns ...AggregateFunc) *FailedBackupRunSelect {
	return fbrq.Select().Aggregate(fns...)
}

func (fbrq *FailedBackupRunQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fbrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fbrq); err != nil {
				return err
			}
		}
	}
	for _, f := range fbrq.ctx.Fields {
		if !failedbackuprun.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fbrq.path != nil {
		prev, err := fbrq.path(ctx)
		if err != nil {
			return err
		}
		fbrq.sql = prev
	}
	return nil
}

func (fbrq *FailedBackupRunQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FailedBackupRun, error) {
	var (
		nodes       = []*FailedBackupRun{}
		withFKs     = fbrq.withFKs
		_spec       = fbrq.querySpec()
		loadedTypes = [2]bool{
			fbrq.withBackupProfile != nil,
			fbrq.withRepository != nil,
		}
	)
	if fbrq.withBackupProfile != nil || fbrq.withRepository != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, failedbackuprun.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FailedBackupRun).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FailedBackupRun{config: fbrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fbrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fbrq.withBackupProfile; query != nil {
		if err := fbrq.loadBackupProfile(ctx, query, nodes, nil,
			func(n *FailedBackupRun, e *BackupProfile) { n.Edges.BackupProfile = e }); err != nil {
			return nil, err
		}
	}
	if query := fbrq.withRepository; query != nil {
		if err := fbrq.loadRepository(ctx, query, nodes, nil,
			func(n *FailedBackupRun, e *Repository) { n.Edges.Repository = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fbrq *FailedBackupRunQuery) loadBackupProfile(ctx context.Context, query *BackupProfileQuery, nodes []*FailedBackupRun, init func(*FailedBackupRun), assign func(*FailedBackupRun, *BackupProfile)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FailedBackupRun)
	for i := range nodes {
		if nodes[i].failed_backup_run_backup_profile == nil {
			continue
		}
		fk := *nodes[i].failed_backup_run_backup_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(backupprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "failed_backup_run_backup_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fbrq *FailedBackupRunQuery) loadRepository(ctx context.Context, query *RepositoryQuery, nodes []*FailedBackupRun, init func(*FailedBackupRun), assign func(*FailedBackupRun, *Repository)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FailedBackupRun)
	for i := range nodes {
		if nodes[i].failed_backup_run_repository == nil {
			continue
		}
		fk := *nodes[i].failed_backup_run_repository
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(repository.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "failed_backup_run_repository" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fbrq *FailedBackupRunQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fbrq.querySpec()
	_spec.Node.Columns = fbrq.ctx.Fields
	if len(fbrq.ctx.Fields) > 0 {
		_spec.Unique = fbrq.ctx.Unique != nil && *fbrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fbrq.driver, _spec)
}

func (fbrq *FailedBackupRunQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(failedbackuprun.Table, failedbackuprun.Columns, sqlgraph.NewFieldSpec(failedbackuprun.FieldID, field.TypeInt))
	_spec.From = fbrq.sql
	if unique := fbrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fbrq.path != nil {
		_spec.Unique = true
	}
	if fields := fbrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, failedbackuprun.FieldID)
		for i := range fields {
			if fields[i] != failedbackuprun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fbrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fbrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fbrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fbrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fbrq *FailedBackupRunQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fbrq.driver.Dialect())
	t1 := builder.Table(failedbackuprun.Table)
	columns := fbrq.ctx.Fields
	if len(columns) == 0 {
		columns = failedbackuprun.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fbrq.sql != nil {
		selector = fbrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fbrq.ctx.Unique != nil && *fbrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fbrq.predicates {
		p(selector)
	}
	for _, p := range fbrq.order {
		p(selector)
	}
	if offset := fbrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fbrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FailedBackupRunGroupBy is the group-by builder for FailedBackupRun entities.
type FailedBackupRunGroupBy struct {
	selector
	build *FailedBackupRunQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fbrgb *FailedBackupRunGroupBy) Aggregate(fns ...AggregateFunc) *FailedBackupRunGroupBy {
	fbrgb.fns = append(fbrgb.fns, fns...)
	return fbrgb
}

// Scan applies the selector query and scans the result into the given value.
func (fbrgb *FailedBackupRunGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fbrgb.build.ctx, ent.OpQueryGroupBy)
	if err := fbrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FailedBackupRunQuery, *FailedBackupRunGroupBy](ctx, fbrgb.build, fbrgb, fbrgb.build.inters, v)
}

func (fbrgb *FailedBackupRunGroupBy) sqlScan(ctx context.Context, root *FailedBackupRunQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fbrgb.fns))
	for _, fn := range fbrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fbrgb.flds)+len(fbrgb.fns))
		for _, f := range *fbrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fbrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fbrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FailedBackupRunSelect is the builder for selecting fields of FailedBackupRun entities.
type FailedBackupRunSelect struct {
	*FailedBackupRunQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fbrs *FailedBackupRunSelect) Aggregate(fns ...AggregateFunc) *FailedBackupRunSelect {
	fbrs.fns = append(fbrs.fns, fns...)
	return fbrs
}

// Scan applies the selector query and scans the result into the given value.
func (fbrs *FailedBackupRunSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fbrs.ctx, ent.OpQuerySelect)
	if err := fbrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FailedBackupRunQuery, *FailedBackupRunSelect](ctx, fbrs.FailedBackupRunQuery, fbrs, fbrs.inters, v)
}

func (fbrs *FailedBackupRunSelect) sqlScan(ctx context.Context, root *FailedBackupRunQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fbrs.fns))
	for _, fn := range fbrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fbrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fbrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
