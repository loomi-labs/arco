// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/predicate"
	"github.com/loomi-labs/arco/backend/ent/settings"
)

// SettingsUpdate is the builder for updating Settings entities.
type SettingsUpdate struct {
	config
	hooks     []Hook
	mutation  *SettingsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SettingsUpdate builder.
func (_u *SettingsUpdate) Where(ps ...predicate.Settings) *SettingsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SettingsUpdate) SetUpdatedAt(v time.Time) *SettingsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetShowWelcome sets the "show_welcome" field.
func (_u *SettingsUpdate) SetShowWelcome(v bool) *SettingsUpdate {
	_u.mutation.SetShowWelcome(v)
	return _u
}

// SetNillableShowWelcome sets the "show_welcome" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableShowWelcome(v *bool) *SettingsUpdate {
	if v != nil {
		_u.SetShowWelcome(*v)
	}
	return _u
}

// Mutation returns the SettingsMutation object of the builder.
func (_u *SettingsUpdate) Mutation() *SettingsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SettingsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SettingsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SettingsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := settings.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SettingsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SettingsUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SettingsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(settings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ShowWelcome(); ok {
		_spec.SetField(settings.FieldShowWelcome, field.TypeBool, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SettingsUpdateOne is the builder for updating a single Settings entity.
type SettingsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SettingsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SettingsUpdateOne) SetUpdatedAt(v time.Time) *SettingsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetShowWelcome sets the "show_welcome" field.
func (_u *SettingsUpdateOne) SetShowWelcome(v bool) *SettingsUpdateOne {
	_u.mutation.SetShowWelcome(v)
	return _u
}

// SetNillableShowWelcome sets the "show_welcome" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableShowWelcome(v *bool) *SettingsUpdateOne {
	if v != nil {
		_u.SetShowWelcome(*v)
	}
	return _u
}

// Mutation returns the SettingsMutation object of the builder.
func (_u *SettingsUpdateOne) Mutation() *SettingsMutation {
	return _u.mutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (_u *SettingsUpdateOne) Where(ps ...predicate.Settings) *SettingsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SettingsUpdateOne) Select(field string, fields ...string) *SettingsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Settings entity.
func (_u *SettingsUpdateOne) Save(ctx context.Context) (*Settings, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingsUpdateOne) SaveX(ctx context.Context) *Settings {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SettingsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := settings.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SettingsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SettingsUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SettingsUpdateOne) sqlSave(ctx context.Context) (_node *Settings, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settings.FieldID)
		for _, f := range fields {
			if !settings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(settings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ShowWelcome(); ok {
		_spec.SetField(settings.FieldShowWelcome, field.TypeBool, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Settings{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
