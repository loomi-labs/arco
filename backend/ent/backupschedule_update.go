// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/backupschedule"
	"arco/backend/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BackupScheduleUpdate is the builder for updating BackupSchedule entities.
type BackupScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *BackupScheduleMutation
}

// Where appends a list predicates to the BackupScheduleUpdate builder.
func (bsu *BackupScheduleUpdate) Where(ps ...predicate.BackupSchedule) *BackupScheduleUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetHourly sets the "hourly" field.
func (bsu *BackupScheduleUpdate) SetHourly(b bool) *BackupScheduleUpdate {
	bsu.mutation.SetHourly(b)
	return bsu
}

// SetNillableHourly sets the "hourly" field if the given value is not nil.
func (bsu *BackupScheduleUpdate) SetNillableHourly(b *bool) *BackupScheduleUpdate {
	if b != nil {
		bsu.SetHourly(*b)
	}
	return bsu
}

// SetDailyAt sets the "daily_at" field.
func (bsu *BackupScheduleUpdate) SetDailyAt(t time.Time) *BackupScheduleUpdate {
	bsu.mutation.SetDailyAt(t)
	return bsu
}

// SetNillableDailyAt sets the "daily_at" field if the given value is not nil.
func (bsu *BackupScheduleUpdate) SetNillableDailyAt(t *time.Time) *BackupScheduleUpdate {
	if t != nil {
		bsu.SetDailyAt(*t)
	}
	return bsu
}

// ClearDailyAt clears the value of the "daily_at" field.
func (bsu *BackupScheduleUpdate) ClearDailyAt() *BackupScheduleUpdate {
	bsu.mutation.ClearDailyAt()
	return bsu
}

// SetWeekday sets the "weekday" field.
func (bsu *BackupScheduleUpdate) SetWeekday(b backupschedule.Weekday) *BackupScheduleUpdate {
	bsu.mutation.SetWeekday(b)
	return bsu
}

// SetNillableWeekday sets the "weekday" field if the given value is not nil.
func (bsu *BackupScheduleUpdate) SetNillableWeekday(b *backupschedule.Weekday) *BackupScheduleUpdate {
	if b != nil {
		bsu.SetWeekday(*b)
	}
	return bsu
}

// ClearWeekday clears the value of the "weekday" field.
func (bsu *BackupScheduleUpdate) ClearWeekday() *BackupScheduleUpdate {
	bsu.mutation.ClearWeekday()
	return bsu
}

// SetWeeklyAt sets the "weekly_at" field.
func (bsu *BackupScheduleUpdate) SetWeeklyAt(t time.Time) *BackupScheduleUpdate {
	bsu.mutation.SetWeeklyAt(t)
	return bsu
}

// SetNillableWeeklyAt sets the "weekly_at" field if the given value is not nil.
func (bsu *BackupScheduleUpdate) SetNillableWeeklyAt(t *time.Time) *BackupScheduleUpdate {
	if t != nil {
		bsu.SetWeeklyAt(*t)
	}
	return bsu
}

// ClearWeeklyAt clears the value of the "weekly_at" field.
func (bsu *BackupScheduleUpdate) ClearWeeklyAt() *BackupScheduleUpdate {
	bsu.mutation.ClearWeeklyAt()
	return bsu
}

// SetMonthday sets the "monthday" field.
func (bsu *BackupScheduleUpdate) SetMonthday(u uint8) *BackupScheduleUpdate {
	bsu.mutation.ResetMonthday()
	bsu.mutation.SetMonthday(u)
	return bsu
}

// SetNillableMonthday sets the "monthday" field if the given value is not nil.
func (bsu *BackupScheduleUpdate) SetNillableMonthday(u *uint8) *BackupScheduleUpdate {
	if u != nil {
		bsu.SetMonthday(*u)
	}
	return bsu
}

// AddMonthday adds u to the "monthday" field.
func (bsu *BackupScheduleUpdate) AddMonthday(u int8) *BackupScheduleUpdate {
	bsu.mutation.AddMonthday(u)
	return bsu
}

// ClearMonthday clears the value of the "monthday" field.
func (bsu *BackupScheduleUpdate) ClearMonthday() *BackupScheduleUpdate {
	bsu.mutation.ClearMonthday()
	return bsu
}

// SetMonthlyAt sets the "monthly_at" field.
func (bsu *BackupScheduleUpdate) SetMonthlyAt(t time.Time) *BackupScheduleUpdate {
	bsu.mutation.SetMonthlyAt(t)
	return bsu
}

// SetNillableMonthlyAt sets the "monthly_at" field if the given value is not nil.
func (bsu *BackupScheduleUpdate) SetNillableMonthlyAt(t *time.Time) *BackupScheduleUpdate {
	if t != nil {
		bsu.SetMonthlyAt(*t)
	}
	return bsu
}

// ClearMonthlyAt clears the value of the "monthly_at" field.
func (bsu *BackupScheduleUpdate) ClearMonthlyAt() *BackupScheduleUpdate {
	bsu.mutation.ClearMonthlyAt()
	return bsu
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (bsu *BackupScheduleUpdate) SetBackupProfileID(id int) *BackupScheduleUpdate {
	bsu.mutation.SetBackupProfileID(id)
	return bsu
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (bsu *BackupScheduleUpdate) SetBackupProfile(b *BackupProfile) *BackupScheduleUpdate {
	return bsu.SetBackupProfileID(b.ID)
}

// Mutation returns the BackupScheduleMutation object of the builder.
func (bsu *BackupScheduleUpdate) Mutation() *BackupScheduleMutation {
	return bsu.mutation
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (bsu *BackupScheduleUpdate) ClearBackupProfile() *BackupScheduleUpdate {
	bsu.mutation.ClearBackupProfile()
	return bsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BackupScheduleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BackupScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BackupScheduleUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BackupScheduleUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsu *BackupScheduleUpdate) check() error {
	if v, ok := bsu.mutation.Weekday(); ok {
		if err := backupschedule.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.weekday": %w`, err)}
		}
	}
	if v, ok := bsu.mutation.Monthday(); ok {
		if err := backupschedule.MonthdayValidator(v); err != nil {
			return &ValidationError{Name: "monthday", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.monthday": %w`, err)}
		}
	}
	if _, ok := bsu.mutation.BackupProfileID(); bsu.mutation.BackupProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BackupSchedule.backup_profile"`)
	}
	return nil
}

func (bsu *BackupScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(backupschedule.Table, backupschedule.Columns, sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Hourly(); ok {
		_spec.SetField(backupschedule.FieldHourly, field.TypeBool, value)
	}
	if value, ok := bsu.mutation.DailyAt(); ok {
		_spec.SetField(backupschedule.FieldDailyAt, field.TypeTime, value)
	}
	if bsu.mutation.DailyAtCleared() {
		_spec.ClearField(backupschedule.FieldDailyAt, field.TypeTime)
	}
	if value, ok := bsu.mutation.Weekday(); ok {
		_spec.SetField(backupschedule.FieldWeekday, field.TypeEnum, value)
	}
	if bsu.mutation.WeekdayCleared() {
		_spec.ClearField(backupschedule.FieldWeekday, field.TypeEnum)
	}
	if value, ok := bsu.mutation.WeeklyAt(); ok {
		_spec.SetField(backupschedule.FieldWeeklyAt, field.TypeTime, value)
	}
	if bsu.mutation.WeeklyAtCleared() {
		_spec.ClearField(backupschedule.FieldWeeklyAt, field.TypeTime)
	}
	if value, ok := bsu.mutation.Monthday(); ok {
		_spec.SetField(backupschedule.FieldMonthday, field.TypeUint8, value)
	}
	if value, ok := bsu.mutation.AddedMonthday(); ok {
		_spec.AddField(backupschedule.FieldMonthday, field.TypeUint8, value)
	}
	if bsu.mutation.MonthdayCleared() {
		_spec.ClearField(backupschedule.FieldMonthday, field.TypeUint8)
	}
	if value, ok := bsu.mutation.MonthlyAt(); ok {
		_spec.SetField(backupschedule.FieldMonthlyAt, field.TypeTime, value)
	}
	if bsu.mutation.MonthlyAtCleared() {
		_spec.ClearField(backupschedule.FieldMonthlyAt, field.TypeTime)
	}
	if bsu.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   backupschedule.BackupProfileTable,
			Columns: []string{backupschedule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   backupschedule.BackupProfileTable,
			Columns: []string{backupschedule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{backupschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BackupScheduleUpdateOne is the builder for updating a single BackupSchedule entity.
type BackupScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BackupScheduleMutation
}

// SetHourly sets the "hourly" field.
func (bsuo *BackupScheduleUpdateOne) SetHourly(b bool) *BackupScheduleUpdateOne {
	bsuo.mutation.SetHourly(b)
	return bsuo
}

// SetNillableHourly sets the "hourly" field if the given value is not nil.
func (bsuo *BackupScheduleUpdateOne) SetNillableHourly(b *bool) *BackupScheduleUpdateOne {
	if b != nil {
		bsuo.SetHourly(*b)
	}
	return bsuo
}

// SetDailyAt sets the "daily_at" field.
func (bsuo *BackupScheduleUpdateOne) SetDailyAt(t time.Time) *BackupScheduleUpdateOne {
	bsuo.mutation.SetDailyAt(t)
	return bsuo
}

// SetNillableDailyAt sets the "daily_at" field if the given value is not nil.
func (bsuo *BackupScheduleUpdateOne) SetNillableDailyAt(t *time.Time) *BackupScheduleUpdateOne {
	if t != nil {
		bsuo.SetDailyAt(*t)
	}
	return bsuo
}

// ClearDailyAt clears the value of the "daily_at" field.
func (bsuo *BackupScheduleUpdateOne) ClearDailyAt() *BackupScheduleUpdateOne {
	bsuo.mutation.ClearDailyAt()
	return bsuo
}

// SetWeekday sets the "weekday" field.
func (bsuo *BackupScheduleUpdateOne) SetWeekday(b backupschedule.Weekday) *BackupScheduleUpdateOne {
	bsuo.mutation.SetWeekday(b)
	return bsuo
}

// SetNillableWeekday sets the "weekday" field if the given value is not nil.
func (bsuo *BackupScheduleUpdateOne) SetNillableWeekday(b *backupschedule.Weekday) *BackupScheduleUpdateOne {
	if b != nil {
		bsuo.SetWeekday(*b)
	}
	return bsuo
}

// ClearWeekday clears the value of the "weekday" field.
func (bsuo *BackupScheduleUpdateOne) ClearWeekday() *BackupScheduleUpdateOne {
	bsuo.mutation.ClearWeekday()
	return bsuo
}

// SetWeeklyAt sets the "weekly_at" field.
func (bsuo *BackupScheduleUpdateOne) SetWeeklyAt(t time.Time) *BackupScheduleUpdateOne {
	bsuo.mutation.SetWeeklyAt(t)
	return bsuo
}

// SetNillableWeeklyAt sets the "weekly_at" field if the given value is not nil.
func (bsuo *BackupScheduleUpdateOne) SetNillableWeeklyAt(t *time.Time) *BackupScheduleUpdateOne {
	if t != nil {
		bsuo.SetWeeklyAt(*t)
	}
	return bsuo
}

// ClearWeeklyAt clears the value of the "weekly_at" field.
func (bsuo *BackupScheduleUpdateOne) ClearWeeklyAt() *BackupScheduleUpdateOne {
	bsuo.mutation.ClearWeeklyAt()
	return bsuo
}

// SetMonthday sets the "monthday" field.
func (bsuo *BackupScheduleUpdateOne) SetMonthday(u uint8) *BackupScheduleUpdateOne {
	bsuo.mutation.ResetMonthday()
	bsuo.mutation.SetMonthday(u)
	return bsuo
}

// SetNillableMonthday sets the "monthday" field if the given value is not nil.
func (bsuo *BackupScheduleUpdateOne) SetNillableMonthday(u *uint8) *BackupScheduleUpdateOne {
	if u != nil {
		bsuo.SetMonthday(*u)
	}
	return bsuo
}

// AddMonthday adds u to the "monthday" field.
func (bsuo *BackupScheduleUpdateOne) AddMonthday(u int8) *BackupScheduleUpdateOne {
	bsuo.mutation.AddMonthday(u)
	return bsuo
}

// ClearMonthday clears the value of the "monthday" field.
func (bsuo *BackupScheduleUpdateOne) ClearMonthday() *BackupScheduleUpdateOne {
	bsuo.mutation.ClearMonthday()
	return bsuo
}

// SetMonthlyAt sets the "monthly_at" field.
func (bsuo *BackupScheduleUpdateOne) SetMonthlyAt(t time.Time) *BackupScheduleUpdateOne {
	bsuo.mutation.SetMonthlyAt(t)
	return bsuo
}

// SetNillableMonthlyAt sets the "monthly_at" field if the given value is not nil.
func (bsuo *BackupScheduleUpdateOne) SetNillableMonthlyAt(t *time.Time) *BackupScheduleUpdateOne {
	if t != nil {
		bsuo.SetMonthlyAt(*t)
	}
	return bsuo
}

// ClearMonthlyAt clears the value of the "monthly_at" field.
func (bsuo *BackupScheduleUpdateOne) ClearMonthlyAt() *BackupScheduleUpdateOne {
	bsuo.mutation.ClearMonthlyAt()
	return bsuo
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (bsuo *BackupScheduleUpdateOne) SetBackupProfileID(id int) *BackupScheduleUpdateOne {
	bsuo.mutation.SetBackupProfileID(id)
	return bsuo
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (bsuo *BackupScheduleUpdateOne) SetBackupProfile(b *BackupProfile) *BackupScheduleUpdateOne {
	return bsuo.SetBackupProfileID(b.ID)
}

// Mutation returns the BackupScheduleMutation object of the builder.
func (bsuo *BackupScheduleUpdateOne) Mutation() *BackupScheduleMutation {
	return bsuo.mutation
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (bsuo *BackupScheduleUpdateOne) ClearBackupProfile() *BackupScheduleUpdateOne {
	bsuo.mutation.ClearBackupProfile()
	return bsuo
}

// Where appends a list predicates to the BackupScheduleUpdate builder.
func (bsuo *BackupScheduleUpdateOne) Where(ps ...predicate.BackupSchedule) *BackupScheduleUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BackupScheduleUpdateOne) Select(field string, fields ...string) *BackupScheduleUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BackupSchedule entity.
func (bsuo *BackupScheduleUpdateOne) Save(ctx context.Context) (*BackupSchedule, error) {
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BackupScheduleUpdateOne) SaveX(ctx context.Context) *BackupSchedule {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BackupScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BackupScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsuo *BackupScheduleUpdateOne) check() error {
	if v, ok := bsuo.mutation.Weekday(); ok {
		if err := backupschedule.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.weekday": %w`, err)}
		}
	}
	if v, ok := bsuo.mutation.Monthday(); ok {
		if err := backupschedule.MonthdayValidator(v); err != nil {
			return &ValidationError{Name: "monthday", err: fmt.Errorf(`ent: validator failed for field "BackupSchedule.monthday": %w`, err)}
		}
	}
	if _, ok := bsuo.mutation.BackupProfileID(); bsuo.mutation.BackupProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BackupSchedule.backup_profile"`)
	}
	return nil
}

func (bsuo *BackupScheduleUpdateOne) sqlSave(ctx context.Context) (_node *BackupSchedule, err error) {
	if err := bsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(backupschedule.Table, backupschedule.Columns, sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BackupSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, backupschedule.FieldID)
		for _, f := range fields {
			if !backupschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != backupschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.Hourly(); ok {
		_spec.SetField(backupschedule.FieldHourly, field.TypeBool, value)
	}
	if value, ok := bsuo.mutation.DailyAt(); ok {
		_spec.SetField(backupschedule.FieldDailyAt, field.TypeTime, value)
	}
	if bsuo.mutation.DailyAtCleared() {
		_spec.ClearField(backupschedule.FieldDailyAt, field.TypeTime)
	}
	if value, ok := bsuo.mutation.Weekday(); ok {
		_spec.SetField(backupschedule.FieldWeekday, field.TypeEnum, value)
	}
	if bsuo.mutation.WeekdayCleared() {
		_spec.ClearField(backupschedule.FieldWeekday, field.TypeEnum)
	}
	if value, ok := bsuo.mutation.WeeklyAt(); ok {
		_spec.SetField(backupschedule.FieldWeeklyAt, field.TypeTime, value)
	}
	if bsuo.mutation.WeeklyAtCleared() {
		_spec.ClearField(backupschedule.FieldWeeklyAt, field.TypeTime)
	}
	if value, ok := bsuo.mutation.Monthday(); ok {
		_spec.SetField(backupschedule.FieldMonthday, field.TypeUint8, value)
	}
	if value, ok := bsuo.mutation.AddedMonthday(); ok {
		_spec.AddField(backupschedule.FieldMonthday, field.TypeUint8, value)
	}
	if bsuo.mutation.MonthdayCleared() {
		_spec.ClearField(backupschedule.FieldMonthday, field.TypeUint8)
	}
	if value, ok := bsuo.mutation.MonthlyAt(); ok {
		_spec.SetField(backupschedule.FieldMonthlyAt, field.TypeTime, value)
	}
	if bsuo.mutation.MonthlyAtCleared() {
		_spec.ClearField(backupschedule.FieldMonthlyAt, field.TypeTime)
	}
	if bsuo.mutation.BackupProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   backupschedule.BackupProfileTable,
			Columns: []string{backupschedule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   backupschedule.BackupProfileTable,
			Columns: []string{backupschedule.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BackupSchedule{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{backupschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
