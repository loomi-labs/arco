// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/archive"
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/backupschedule"
	"arco/backend/ent/failedbackuprun"
	"arco/backend/ent/predicate"
	"arco/backend/ent/repository"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArchive         = "Archive"
	TypeBackupProfile   = "BackupProfile"
	TypeBackupSchedule  = "BackupSchedule"
	TypeFailedBackupRun = "FailedBackupRun"
	TypeRepository      = "Repository"
)

// ArchiveMutation represents an operation that mutates the Archive nodes in the graph.
type ArchiveMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	createdAt             *time.Time
	duration              *time.Time
	borg_id               *string
	clearedFields         map[string]struct{}
	repository            *int
	clearedrepository     bool
	backup_profile        *int
	clearedbackup_profile bool
	done                  bool
	oldValue              func(context.Context) (*Archive, error)
	predicates            []predicate.Archive
}

var _ ent.Mutation = (*ArchiveMutation)(nil)

// archiveOption allows management of the mutation configuration using functional options.
type archiveOption func(*ArchiveMutation)

// newArchiveMutation creates new mutation for the Archive entity.
func newArchiveMutation(c config, op Op, opts ...archiveOption) *ArchiveMutation {
	m := &ArchiveMutation{
		config:        c,
		op:            op,
		typ:           TypeArchive,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArchiveID sets the ID field of the mutation.
func withArchiveID(id int) archiveOption {
	return func(m *ArchiveMutation) {
		var (
			err   error
			once  sync.Once
			value *Archive
		)
		m.oldValue = func(ctx context.Context) (*Archive, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Archive.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArchive sets the old Archive of the mutation.
func withArchive(node *Archive) archiveOption {
	return func(m *ArchiveMutation) {
		m.oldValue = func(context.Context) (*Archive, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArchiveMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArchiveMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Archive entities.
func (m *ArchiveMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArchiveMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArchiveMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Archive.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ArchiveMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArchiveMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArchiveMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "createdAt" field.
func (m *ArchiveMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *ArchiveMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *ArchiveMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetDuration sets the "duration" field.
func (m *ArchiveMutation) SetDuration(t time.Time) {
	m.duration = &t
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ArchiveMutation) Duration() (r time.Time, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldDuration(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// ResetDuration resets all changes to the "duration" field.
func (m *ArchiveMutation) ResetDuration() {
	m.duration = nil
}

// SetBorgID sets the "borg_id" field.
func (m *ArchiveMutation) SetBorgID(s string) {
	m.borg_id = &s
}

// BorgID returns the value of the "borg_id" field in the mutation.
func (m *ArchiveMutation) BorgID() (r string, exists bool) {
	v := m.borg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBorgID returns the old "borg_id" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldBorgID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBorgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBorgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBorgID: %w", err)
	}
	return oldValue.BorgID, nil
}

// ResetBorgID resets all changes to the "borg_id" field.
func (m *ArchiveMutation) ResetBorgID() {
	m.borg_id = nil
}

// SetRepositoryID sets the "repository" edge to the Repository entity by id.
func (m *ArchiveMutation) SetRepositoryID(id int) {
	m.repository = &id
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (m *ArchiveMutation) ClearRepository() {
	m.clearedrepository = true
}

// RepositoryCleared reports if the "repository" edge to the Repository entity was cleared.
func (m *ArchiveMutation) RepositoryCleared() bool {
	return m.clearedrepository
}

// RepositoryID returns the "repository" edge ID in the mutation.
func (m *ArchiveMutation) RepositoryID() (id int, exists bool) {
	if m.repository != nil {
		return *m.repository, true
	}
	return
}

// RepositoryIDs returns the "repository" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepositoryID instead. It exists only for internal usage by the builders.
func (m *ArchiveMutation) RepositoryIDs() (ids []int) {
	if id := m.repository; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepository resets all changes to the "repository" edge.
func (m *ArchiveMutation) ResetRepository() {
	m.repository = nil
	m.clearedrepository = false
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by id.
func (m *ArchiveMutation) SetBackupProfileID(id int) {
	m.backup_profile = &id
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (m *ArchiveMutation) ClearBackupProfile() {
	m.clearedbackup_profile = true
}

// BackupProfileCleared reports if the "backup_profile" edge to the BackupProfile entity was cleared.
func (m *ArchiveMutation) BackupProfileCleared() bool {
	return m.clearedbackup_profile
}

// BackupProfileID returns the "backup_profile" edge ID in the mutation.
func (m *ArchiveMutation) BackupProfileID() (id int, exists bool) {
	if m.backup_profile != nil {
		return *m.backup_profile, true
	}
	return
}

// BackupProfileIDs returns the "backup_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BackupProfileID instead. It exists only for internal usage by the builders.
func (m *ArchiveMutation) BackupProfileIDs() (ids []int) {
	if id := m.backup_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBackupProfile resets all changes to the "backup_profile" edge.
func (m *ArchiveMutation) ResetBackupProfile() {
	m.backup_profile = nil
	m.clearedbackup_profile = false
}

// Where appends a list predicates to the ArchiveMutation builder.
func (m *ArchiveMutation) Where(ps ...predicate.Archive) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArchiveMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArchiveMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Archive, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArchiveMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArchiveMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Archive).
func (m *ArchiveMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArchiveMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, archive.FieldName)
	}
	if m.createdAt != nil {
		fields = append(fields, archive.FieldCreatedAt)
	}
	if m.duration != nil {
		fields = append(fields, archive.FieldDuration)
	}
	if m.borg_id != nil {
		fields = append(fields, archive.FieldBorgID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArchiveMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case archive.FieldName:
		return m.Name()
	case archive.FieldCreatedAt:
		return m.CreatedAt()
	case archive.FieldDuration:
		return m.Duration()
	case archive.FieldBorgID:
		return m.BorgID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArchiveMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case archive.FieldName:
		return m.OldName(ctx)
	case archive.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case archive.FieldDuration:
		return m.OldDuration(ctx)
	case archive.FieldBorgID:
		return m.OldBorgID(ctx)
	}
	return nil, fmt.Errorf("unknown Archive field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArchiveMutation) SetField(name string, value ent.Value) error {
	switch name {
	case archive.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case archive.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case archive.FieldDuration:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case archive.FieldBorgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBorgID(v)
		return nil
	}
	return fmt.Errorf("unknown Archive field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArchiveMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArchiveMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArchiveMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Archive numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArchiveMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArchiveMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArchiveMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Archive nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArchiveMutation) ResetField(name string) error {
	switch name {
	case archive.FieldName:
		m.ResetName()
		return nil
	case archive.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case archive.FieldDuration:
		m.ResetDuration()
		return nil
	case archive.FieldBorgID:
		m.ResetBorgID()
		return nil
	}
	return fmt.Errorf("unknown Archive field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArchiveMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.repository != nil {
		edges = append(edges, archive.EdgeRepository)
	}
	if m.backup_profile != nil {
		edges = append(edges, archive.EdgeBackupProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArchiveMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case archive.EdgeRepository:
		if id := m.repository; id != nil {
			return []ent.Value{*id}
		}
	case archive.EdgeBackupProfile:
		if id := m.backup_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArchiveMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArchiveMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArchiveMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrepository {
		edges = append(edges, archive.EdgeRepository)
	}
	if m.clearedbackup_profile {
		edges = append(edges, archive.EdgeBackupProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArchiveMutation) EdgeCleared(name string) bool {
	switch name {
	case archive.EdgeRepository:
		return m.clearedrepository
	case archive.EdgeBackupProfile:
		return m.clearedbackup_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArchiveMutation) ClearEdge(name string) error {
	switch name {
	case archive.EdgeRepository:
		m.ClearRepository()
		return nil
	case archive.EdgeBackupProfile:
		m.ClearBackupProfile()
		return nil
	}
	return fmt.Errorf("unknown Archive unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArchiveMutation) ResetEdge(name string) error {
	switch name {
	case archive.EdgeRepository:
		m.ResetRepository()
		return nil
	case archive.EdgeBackupProfile:
		m.ResetBackupProfile()
		return nil
	}
	return fmt.Errorf("unknown Archive edge %s", name)
}

// BackupProfileMutation represents an operation that mutates the BackupProfile nodes in the graph.
type BackupProfileMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	prefix                    *string
	backup_paths              *[]string
	appendbackup_paths        []string
	exclude_paths             *[]string
	appendexclude_paths       []string
	is_setup_complete         *bool
	icon                      *backupprofile.Icon
	clearedFields             map[string]struct{}
	repositories              map[int]struct{}
	removedrepositories       map[int]struct{}
	clearedrepositories       bool
	archives                  map[int]struct{}
	removedarchives           map[int]struct{}
	clearedarchives           bool
	backup_schedule           *int
	clearedbackup_schedule    bool
	failed_backup_runs        map[int]struct{}
	removedfailed_backup_runs map[int]struct{}
	clearedfailed_backup_runs bool
	done                      bool
	oldValue                  func(context.Context) (*BackupProfile, error)
	predicates                []predicate.BackupProfile
}

var _ ent.Mutation = (*BackupProfileMutation)(nil)

// backupprofileOption allows management of the mutation configuration using functional options.
type backupprofileOption func(*BackupProfileMutation)

// newBackupProfileMutation creates new mutation for the BackupProfile entity.
func newBackupProfileMutation(c config, op Op, opts ...backupprofileOption) *BackupProfileMutation {
	m := &BackupProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeBackupProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBackupProfileID sets the ID field of the mutation.
func withBackupProfileID(id int) backupprofileOption {
	return func(m *BackupProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *BackupProfile
		)
		m.oldValue = func(ctx context.Context) (*BackupProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BackupProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBackupProfile sets the old BackupProfile of the mutation.
func withBackupProfile(node *BackupProfile) backupprofileOption {
	return func(m *BackupProfileMutation) {
		m.oldValue = func(context.Context) (*BackupProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BackupProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BackupProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BackupProfile entities.
func (m *BackupProfileMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BackupProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BackupProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BackupProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BackupProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BackupProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BackupProfileMutation) ResetName() {
	m.name = nil
}

// SetPrefix sets the "prefix" field.
func (m *BackupProfileMutation) SetPrefix(s string) {
	m.prefix = &s
}

// Prefix returns the value of the "prefix" field in the mutation.
func (m *BackupProfileMutation) Prefix() (r string, exists bool) {
	v := m.prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefix returns the old "prefix" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefix: %w", err)
	}
	return oldValue.Prefix, nil
}

// ResetPrefix resets all changes to the "prefix" field.
func (m *BackupProfileMutation) ResetPrefix() {
	m.prefix = nil
}

// SetBackupPaths sets the "backup_paths" field.
func (m *BackupProfileMutation) SetBackupPaths(s []string) {
	m.backup_paths = &s
	m.appendbackup_paths = nil
}

// BackupPaths returns the value of the "backup_paths" field in the mutation.
func (m *BackupProfileMutation) BackupPaths() (r []string, exists bool) {
	v := m.backup_paths
	if v == nil {
		return
	}
	return *v, true
}

// OldBackupPaths returns the old "backup_paths" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldBackupPaths(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackupPaths is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackupPaths requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackupPaths: %w", err)
	}
	return oldValue.BackupPaths, nil
}

// AppendBackupPaths adds s to the "backup_paths" field.
func (m *BackupProfileMutation) AppendBackupPaths(s []string) {
	m.appendbackup_paths = append(m.appendbackup_paths, s...)
}

// AppendedBackupPaths returns the list of values that were appended to the "backup_paths" field in this mutation.
func (m *BackupProfileMutation) AppendedBackupPaths() ([]string, bool) {
	if len(m.appendbackup_paths) == 0 {
		return nil, false
	}
	return m.appendbackup_paths, true
}

// ResetBackupPaths resets all changes to the "backup_paths" field.
func (m *BackupProfileMutation) ResetBackupPaths() {
	m.backup_paths = nil
	m.appendbackup_paths = nil
}

// SetExcludePaths sets the "exclude_paths" field.
func (m *BackupProfileMutation) SetExcludePaths(s []string) {
	m.exclude_paths = &s
	m.appendexclude_paths = nil
}

// ExcludePaths returns the value of the "exclude_paths" field in the mutation.
func (m *BackupProfileMutation) ExcludePaths() (r []string, exists bool) {
	v := m.exclude_paths
	if v == nil {
		return
	}
	return *v, true
}

// OldExcludePaths returns the old "exclude_paths" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldExcludePaths(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExcludePaths is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExcludePaths requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExcludePaths: %w", err)
	}
	return oldValue.ExcludePaths, nil
}

// AppendExcludePaths adds s to the "exclude_paths" field.
func (m *BackupProfileMutation) AppendExcludePaths(s []string) {
	m.appendexclude_paths = append(m.appendexclude_paths, s...)
}

// AppendedExcludePaths returns the list of values that were appended to the "exclude_paths" field in this mutation.
func (m *BackupProfileMutation) AppendedExcludePaths() ([]string, bool) {
	if len(m.appendexclude_paths) == 0 {
		return nil, false
	}
	return m.appendexclude_paths, true
}

// ClearExcludePaths clears the value of the "exclude_paths" field.
func (m *BackupProfileMutation) ClearExcludePaths() {
	m.exclude_paths = nil
	m.appendexclude_paths = nil
	m.clearedFields[backupprofile.FieldExcludePaths] = struct{}{}
}

// ExcludePathsCleared returns if the "exclude_paths" field was cleared in this mutation.
func (m *BackupProfileMutation) ExcludePathsCleared() bool {
	_, ok := m.clearedFields[backupprofile.FieldExcludePaths]
	return ok
}

// ResetExcludePaths resets all changes to the "exclude_paths" field.
func (m *BackupProfileMutation) ResetExcludePaths() {
	m.exclude_paths = nil
	m.appendexclude_paths = nil
	delete(m.clearedFields, backupprofile.FieldExcludePaths)
}

// SetIsSetupComplete sets the "is_setup_complete" field.
func (m *BackupProfileMutation) SetIsSetupComplete(b bool) {
	m.is_setup_complete = &b
}

// IsSetupComplete returns the value of the "is_setup_complete" field in the mutation.
func (m *BackupProfileMutation) IsSetupComplete() (r bool, exists bool) {
	v := m.is_setup_complete
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSetupComplete returns the old "is_setup_complete" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldIsSetupComplete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSetupComplete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSetupComplete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSetupComplete: %w", err)
	}
	return oldValue.IsSetupComplete, nil
}

// ResetIsSetupComplete resets all changes to the "is_setup_complete" field.
func (m *BackupProfileMutation) ResetIsSetupComplete() {
	m.is_setup_complete = nil
}

// SetIcon sets the "icon" field.
func (m *BackupProfileMutation) SetIcon(b backupprofile.Icon) {
	m.icon = &b
}

// Icon returns the value of the "icon" field in the mutation.
func (m *BackupProfileMutation) Icon() (r backupprofile.Icon, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldIcon(ctx context.Context) (v backupprofile.Icon, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *BackupProfileMutation) ResetIcon() {
	m.icon = nil
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by ids.
func (m *BackupProfileMutation) AddRepositoryIDs(ids ...int) {
	if m.repositories == nil {
		m.repositories = make(map[int]struct{})
	}
	for i := range ids {
		m.repositories[ids[i]] = struct{}{}
	}
}

// ClearRepositories clears the "repositories" edge to the Repository entity.
func (m *BackupProfileMutation) ClearRepositories() {
	m.clearedrepositories = true
}

// RepositoriesCleared reports if the "repositories" edge to the Repository entity was cleared.
func (m *BackupProfileMutation) RepositoriesCleared() bool {
	return m.clearedrepositories
}

// RemoveRepositoryIDs removes the "repositories" edge to the Repository entity by IDs.
func (m *BackupProfileMutation) RemoveRepositoryIDs(ids ...int) {
	if m.removedrepositories == nil {
		m.removedrepositories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.repositories, ids[i])
		m.removedrepositories[ids[i]] = struct{}{}
	}
}

// RemovedRepositories returns the removed IDs of the "repositories" edge to the Repository entity.
func (m *BackupProfileMutation) RemovedRepositoriesIDs() (ids []int) {
	for id := range m.removedrepositories {
		ids = append(ids, id)
	}
	return
}

// RepositoriesIDs returns the "repositories" edge IDs in the mutation.
func (m *BackupProfileMutation) RepositoriesIDs() (ids []int) {
	for id := range m.repositories {
		ids = append(ids, id)
	}
	return
}

// ResetRepositories resets all changes to the "repositories" edge.
func (m *BackupProfileMutation) ResetRepositories() {
	m.repositories = nil
	m.clearedrepositories = false
	m.removedrepositories = nil
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by ids.
func (m *BackupProfileMutation) AddArchiveIDs(ids ...int) {
	if m.archives == nil {
		m.archives = make(map[int]struct{})
	}
	for i := range ids {
		m.archives[ids[i]] = struct{}{}
	}
}

// ClearArchives clears the "archives" edge to the Archive entity.
func (m *BackupProfileMutation) ClearArchives() {
	m.clearedarchives = true
}

// ArchivesCleared reports if the "archives" edge to the Archive entity was cleared.
func (m *BackupProfileMutation) ArchivesCleared() bool {
	return m.clearedarchives
}

// RemoveArchiveIDs removes the "archives" edge to the Archive entity by IDs.
func (m *BackupProfileMutation) RemoveArchiveIDs(ids ...int) {
	if m.removedarchives == nil {
		m.removedarchives = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.archives, ids[i])
		m.removedarchives[ids[i]] = struct{}{}
	}
}

// RemovedArchives returns the removed IDs of the "archives" edge to the Archive entity.
func (m *BackupProfileMutation) RemovedArchivesIDs() (ids []int) {
	for id := range m.removedarchives {
		ids = append(ids, id)
	}
	return
}

// ArchivesIDs returns the "archives" edge IDs in the mutation.
func (m *BackupProfileMutation) ArchivesIDs() (ids []int) {
	for id := range m.archives {
		ids = append(ids, id)
	}
	return
}

// ResetArchives resets all changes to the "archives" edge.
func (m *BackupProfileMutation) ResetArchives() {
	m.archives = nil
	m.clearedarchives = false
	m.removedarchives = nil
}

// SetBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by id.
func (m *BackupProfileMutation) SetBackupScheduleID(id int) {
	m.backup_schedule = &id
}

// ClearBackupSchedule clears the "backup_schedule" edge to the BackupSchedule entity.
func (m *BackupProfileMutation) ClearBackupSchedule() {
	m.clearedbackup_schedule = true
}

// BackupScheduleCleared reports if the "backup_schedule" edge to the BackupSchedule entity was cleared.
func (m *BackupProfileMutation) BackupScheduleCleared() bool {
	return m.clearedbackup_schedule
}

// BackupScheduleID returns the "backup_schedule" edge ID in the mutation.
func (m *BackupProfileMutation) BackupScheduleID() (id int, exists bool) {
	if m.backup_schedule != nil {
		return *m.backup_schedule, true
	}
	return
}

// BackupScheduleIDs returns the "backup_schedule" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BackupScheduleID instead. It exists only for internal usage by the builders.
func (m *BackupProfileMutation) BackupScheduleIDs() (ids []int) {
	if id := m.backup_schedule; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBackupSchedule resets all changes to the "backup_schedule" edge.
func (m *BackupProfileMutation) ResetBackupSchedule() {
	m.backup_schedule = nil
	m.clearedbackup_schedule = false
}

// AddFailedBackupRunIDs adds the "failed_backup_runs" edge to the FailedBackupRun entity by ids.
func (m *BackupProfileMutation) AddFailedBackupRunIDs(ids ...int) {
	if m.failed_backup_runs == nil {
		m.failed_backup_runs = make(map[int]struct{})
	}
	for i := range ids {
		m.failed_backup_runs[ids[i]] = struct{}{}
	}
}

// ClearFailedBackupRuns clears the "failed_backup_runs" edge to the FailedBackupRun entity.
func (m *BackupProfileMutation) ClearFailedBackupRuns() {
	m.clearedfailed_backup_runs = true
}

// FailedBackupRunsCleared reports if the "failed_backup_runs" edge to the FailedBackupRun entity was cleared.
func (m *BackupProfileMutation) FailedBackupRunsCleared() bool {
	return m.clearedfailed_backup_runs
}

// RemoveFailedBackupRunIDs removes the "failed_backup_runs" edge to the FailedBackupRun entity by IDs.
func (m *BackupProfileMutation) RemoveFailedBackupRunIDs(ids ...int) {
	if m.removedfailed_backup_runs == nil {
		m.removedfailed_backup_runs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.failed_backup_runs, ids[i])
		m.removedfailed_backup_runs[ids[i]] = struct{}{}
	}
}

// RemovedFailedBackupRuns returns the removed IDs of the "failed_backup_runs" edge to the FailedBackupRun entity.
func (m *BackupProfileMutation) RemovedFailedBackupRunsIDs() (ids []int) {
	for id := range m.removedfailed_backup_runs {
		ids = append(ids, id)
	}
	return
}

// FailedBackupRunsIDs returns the "failed_backup_runs" edge IDs in the mutation.
func (m *BackupProfileMutation) FailedBackupRunsIDs() (ids []int) {
	for id := range m.failed_backup_runs {
		ids = append(ids, id)
	}
	return
}

// ResetFailedBackupRuns resets all changes to the "failed_backup_runs" edge.
func (m *BackupProfileMutation) ResetFailedBackupRuns() {
	m.failed_backup_runs = nil
	m.clearedfailed_backup_runs = false
	m.removedfailed_backup_runs = nil
}

// Where appends a list predicates to the BackupProfileMutation builder.
func (m *BackupProfileMutation) Where(ps ...predicate.BackupProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BackupProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BackupProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BackupProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BackupProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BackupProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BackupProfile).
func (m *BackupProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BackupProfileMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, backupprofile.FieldName)
	}
	if m.prefix != nil {
		fields = append(fields, backupprofile.FieldPrefix)
	}
	if m.backup_paths != nil {
		fields = append(fields, backupprofile.FieldBackupPaths)
	}
	if m.exclude_paths != nil {
		fields = append(fields, backupprofile.FieldExcludePaths)
	}
	if m.is_setup_complete != nil {
		fields = append(fields, backupprofile.FieldIsSetupComplete)
	}
	if m.icon != nil {
		fields = append(fields, backupprofile.FieldIcon)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BackupProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case backupprofile.FieldName:
		return m.Name()
	case backupprofile.FieldPrefix:
		return m.Prefix()
	case backupprofile.FieldBackupPaths:
		return m.BackupPaths()
	case backupprofile.FieldExcludePaths:
		return m.ExcludePaths()
	case backupprofile.FieldIsSetupComplete:
		return m.IsSetupComplete()
	case backupprofile.FieldIcon:
		return m.Icon()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BackupProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case backupprofile.FieldName:
		return m.OldName(ctx)
	case backupprofile.FieldPrefix:
		return m.OldPrefix(ctx)
	case backupprofile.FieldBackupPaths:
		return m.OldBackupPaths(ctx)
	case backupprofile.FieldExcludePaths:
		return m.OldExcludePaths(ctx)
	case backupprofile.FieldIsSetupComplete:
		return m.OldIsSetupComplete(ctx)
	case backupprofile.FieldIcon:
		return m.OldIcon(ctx)
	}
	return nil, fmt.Errorf("unknown BackupProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BackupProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case backupprofile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case backupprofile.FieldPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefix(v)
		return nil
	case backupprofile.FieldBackupPaths:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackupPaths(v)
		return nil
	case backupprofile.FieldExcludePaths:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExcludePaths(v)
		return nil
	case backupprofile.FieldIsSetupComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSetupComplete(v)
		return nil
	case backupprofile.FieldIcon:
		v, ok := value.(backupprofile.Icon)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	}
	return fmt.Errorf("unknown BackupProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BackupProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BackupProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BackupProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BackupProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BackupProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(backupprofile.FieldExcludePaths) {
		fields = append(fields, backupprofile.FieldExcludePaths)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BackupProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BackupProfileMutation) ClearField(name string) error {
	switch name {
	case backupprofile.FieldExcludePaths:
		m.ClearExcludePaths()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BackupProfileMutation) ResetField(name string) error {
	switch name {
	case backupprofile.FieldName:
		m.ResetName()
		return nil
	case backupprofile.FieldPrefix:
		m.ResetPrefix()
		return nil
	case backupprofile.FieldBackupPaths:
		m.ResetBackupPaths()
		return nil
	case backupprofile.FieldExcludePaths:
		m.ResetExcludePaths()
		return nil
	case backupprofile.FieldIsSetupComplete:
		m.ResetIsSetupComplete()
		return nil
	case backupprofile.FieldIcon:
		m.ResetIcon()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BackupProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.repositories != nil {
		edges = append(edges, backupprofile.EdgeRepositories)
	}
	if m.archives != nil {
		edges = append(edges, backupprofile.EdgeArchives)
	}
	if m.backup_schedule != nil {
		edges = append(edges, backupprofile.EdgeBackupSchedule)
	}
	if m.failed_backup_runs != nil {
		edges = append(edges, backupprofile.EdgeFailedBackupRuns)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BackupProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case backupprofile.EdgeRepositories:
		ids := make([]ent.Value, 0, len(m.repositories))
		for id := range m.repositories {
			ids = append(ids, id)
		}
		return ids
	case backupprofile.EdgeArchives:
		ids := make([]ent.Value, 0, len(m.archives))
		for id := range m.archives {
			ids = append(ids, id)
		}
		return ids
	case backupprofile.EdgeBackupSchedule:
		if id := m.backup_schedule; id != nil {
			return []ent.Value{*id}
		}
	case backupprofile.EdgeFailedBackupRuns:
		ids := make([]ent.Value, 0, len(m.failed_backup_runs))
		for id := range m.failed_backup_runs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BackupProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedrepositories != nil {
		edges = append(edges, backupprofile.EdgeRepositories)
	}
	if m.removedarchives != nil {
		edges = append(edges, backupprofile.EdgeArchives)
	}
	if m.removedfailed_backup_runs != nil {
		edges = append(edges, backupprofile.EdgeFailedBackupRuns)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BackupProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case backupprofile.EdgeRepositories:
		ids := make([]ent.Value, 0, len(m.removedrepositories))
		for id := range m.removedrepositories {
			ids = append(ids, id)
		}
		return ids
	case backupprofile.EdgeArchives:
		ids := make([]ent.Value, 0, len(m.removedarchives))
		for id := range m.removedarchives {
			ids = append(ids, id)
		}
		return ids
	case backupprofile.EdgeFailedBackupRuns:
		ids := make([]ent.Value, 0, len(m.removedfailed_backup_runs))
		for id := range m.removedfailed_backup_runs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BackupProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedrepositories {
		edges = append(edges, backupprofile.EdgeRepositories)
	}
	if m.clearedarchives {
		edges = append(edges, backupprofile.EdgeArchives)
	}
	if m.clearedbackup_schedule {
		edges = append(edges, backupprofile.EdgeBackupSchedule)
	}
	if m.clearedfailed_backup_runs {
		edges = append(edges, backupprofile.EdgeFailedBackupRuns)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BackupProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case backupprofile.EdgeRepositories:
		return m.clearedrepositories
	case backupprofile.EdgeArchives:
		return m.clearedarchives
	case backupprofile.EdgeBackupSchedule:
		return m.clearedbackup_schedule
	case backupprofile.EdgeFailedBackupRuns:
		return m.clearedfailed_backup_runs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BackupProfileMutation) ClearEdge(name string) error {
	switch name {
	case backupprofile.EdgeBackupSchedule:
		m.ClearBackupSchedule()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BackupProfileMutation) ResetEdge(name string) error {
	switch name {
	case backupprofile.EdgeRepositories:
		m.ResetRepositories()
		return nil
	case backupprofile.EdgeArchives:
		m.ResetArchives()
		return nil
	case backupprofile.EdgeBackupSchedule:
		m.ResetBackupSchedule()
		return nil
	case backupprofile.EdgeFailedBackupRuns:
		m.ResetFailedBackupRuns()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile edge %s", name)
}

// BackupScheduleMutation represents an operation that mutates the BackupSchedule nodes in the graph.
type BackupScheduleMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	hourly                *bool
	daily_at              *time.Time
	weekday               *backupschedule.Weekday
	weekly_at             *time.Time
	monthday              *uint8
	addmonthday           *int8
	monthly_at            *time.Time
	next_run              *time.Time
	last_run              *time.Time
	last_run_status       *string
	clearedFields         map[string]struct{}
	backup_profile        *int
	clearedbackup_profile bool
	done                  bool
	oldValue              func(context.Context) (*BackupSchedule, error)
	predicates            []predicate.BackupSchedule
}

var _ ent.Mutation = (*BackupScheduleMutation)(nil)

// backupscheduleOption allows management of the mutation configuration using functional options.
type backupscheduleOption func(*BackupScheduleMutation)

// newBackupScheduleMutation creates new mutation for the BackupSchedule entity.
func newBackupScheduleMutation(c config, op Op, opts ...backupscheduleOption) *BackupScheduleMutation {
	m := &BackupScheduleMutation{
		config:        c,
		op:            op,
		typ:           TypeBackupSchedule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBackupScheduleID sets the ID field of the mutation.
func withBackupScheduleID(id int) backupscheduleOption {
	return func(m *BackupScheduleMutation) {
		var (
			err   error
			once  sync.Once
			value *BackupSchedule
		)
		m.oldValue = func(ctx context.Context) (*BackupSchedule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BackupSchedule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBackupSchedule sets the old BackupSchedule of the mutation.
func withBackupSchedule(node *BackupSchedule) backupscheduleOption {
	return func(m *BackupScheduleMutation) {
		m.oldValue = func(context.Context) (*BackupSchedule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BackupScheduleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BackupScheduleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BackupScheduleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BackupScheduleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BackupSchedule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHourly sets the "hourly" field.
func (m *BackupScheduleMutation) SetHourly(b bool) {
	m.hourly = &b
}

// Hourly returns the value of the "hourly" field in the mutation.
func (m *BackupScheduleMutation) Hourly() (r bool, exists bool) {
	v := m.hourly
	if v == nil {
		return
	}
	return *v, true
}

// OldHourly returns the old "hourly" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldHourly(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHourly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHourly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHourly: %w", err)
	}
	return oldValue.Hourly, nil
}

// ResetHourly resets all changes to the "hourly" field.
func (m *BackupScheduleMutation) ResetHourly() {
	m.hourly = nil
}

// SetDailyAt sets the "daily_at" field.
func (m *BackupScheduleMutation) SetDailyAt(t time.Time) {
	m.daily_at = &t
}

// DailyAt returns the value of the "daily_at" field in the mutation.
func (m *BackupScheduleMutation) DailyAt() (r time.Time, exists bool) {
	v := m.daily_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyAt returns the old "daily_at" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldDailyAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyAt: %w", err)
	}
	return oldValue.DailyAt, nil
}

// ClearDailyAt clears the value of the "daily_at" field.
func (m *BackupScheduleMutation) ClearDailyAt() {
	m.daily_at = nil
	m.clearedFields[backupschedule.FieldDailyAt] = struct{}{}
}

// DailyAtCleared returns if the "daily_at" field was cleared in this mutation.
func (m *BackupScheduleMutation) DailyAtCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldDailyAt]
	return ok
}

// ResetDailyAt resets all changes to the "daily_at" field.
func (m *BackupScheduleMutation) ResetDailyAt() {
	m.daily_at = nil
	delete(m.clearedFields, backupschedule.FieldDailyAt)
}

// SetWeekday sets the "weekday" field.
func (m *BackupScheduleMutation) SetWeekday(b backupschedule.Weekday) {
	m.weekday = &b
}

// Weekday returns the value of the "weekday" field in the mutation.
func (m *BackupScheduleMutation) Weekday() (r backupschedule.Weekday, exists bool) {
	v := m.weekday
	if v == nil {
		return
	}
	return *v, true
}

// OldWeekday returns the old "weekday" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldWeekday(ctx context.Context) (v *backupschedule.Weekday, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeekday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeekday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeekday: %w", err)
	}
	return oldValue.Weekday, nil
}

// ClearWeekday clears the value of the "weekday" field.
func (m *BackupScheduleMutation) ClearWeekday() {
	m.weekday = nil
	m.clearedFields[backupschedule.FieldWeekday] = struct{}{}
}

// WeekdayCleared returns if the "weekday" field was cleared in this mutation.
func (m *BackupScheduleMutation) WeekdayCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldWeekday]
	return ok
}

// ResetWeekday resets all changes to the "weekday" field.
func (m *BackupScheduleMutation) ResetWeekday() {
	m.weekday = nil
	delete(m.clearedFields, backupschedule.FieldWeekday)
}

// SetWeeklyAt sets the "weekly_at" field.
func (m *BackupScheduleMutation) SetWeeklyAt(t time.Time) {
	m.weekly_at = &t
}

// WeeklyAt returns the value of the "weekly_at" field in the mutation.
func (m *BackupScheduleMutation) WeeklyAt() (r time.Time, exists bool) {
	v := m.weekly_at
	if v == nil {
		return
	}
	return *v, true
}

// OldWeeklyAt returns the old "weekly_at" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldWeeklyAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeeklyAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeeklyAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeeklyAt: %w", err)
	}
	return oldValue.WeeklyAt, nil
}

// ClearWeeklyAt clears the value of the "weekly_at" field.
func (m *BackupScheduleMutation) ClearWeeklyAt() {
	m.weekly_at = nil
	m.clearedFields[backupschedule.FieldWeeklyAt] = struct{}{}
}

// WeeklyAtCleared returns if the "weekly_at" field was cleared in this mutation.
func (m *BackupScheduleMutation) WeeklyAtCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldWeeklyAt]
	return ok
}

// ResetWeeklyAt resets all changes to the "weekly_at" field.
func (m *BackupScheduleMutation) ResetWeeklyAt() {
	m.weekly_at = nil
	delete(m.clearedFields, backupschedule.FieldWeeklyAt)
}

// SetMonthday sets the "monthday" field.
func (m *BackupScheduleMutation) SetMonthday(u uint8) {
	m.monthday = &u
	m.addmonthday = nil
}

// Monthday returns the value of the "monthday" field in the mutation.
func (m *BackupScheduleMutation) Monthday() (r uint8, exists bool) {
	v := m.monthday
	if v == nil {
		return
	}
	return *v, true
}

// OldMonthday returns the old "monthday" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldMonthday(ctx context.Context) (v *uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonthday: %w", err)
	}
	return oldValue.Monthday, nil
}

// AddMonthday adds u to the "monthday" field.
func (m *BackupScheduleMutation) AddMonthday(u int8) {
	if m.addmonthday != nil {
		*m.addmonthday += u
	} else {
		m.addmonthday = &u
	}
}

// AddedMonthday returns the value that was added to the "monthday" field in this mutation.
func (m *BackupScheduleMutation) AddedMonthday() (r int8, exists bool) {
	v := m.addmonthday
	if v == nil {
		return
	}
	return *v, true
}

// ClearMonthday clears the value of the "monthday" field.
func (m *BackupScheduleMutation) ClearMonthday() {
	m.monthday = nil
	m.addmonthday = nil
	m.clearedFields[backupschedule.FieldMonthday] = struct{}{}
}

// MonthdayCleared returns if the "monthday" field was cleared in this mutation.
func (m *BackupScheduleMutation) MonthdayCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldMonthday]
	return ok
}

// ResetMonthday resets all changes to the "monthday" field.
func (m *BackupScheduleMutation) ResetMonthday() {
	m.monthday = nil
	m.addmonthday = nil
	delete(m.clearedFields, backupschedule.FieldMonthday)
}

// SetMonthlyAt sets the "monthly_at" field.
func (m *BackupScheduleMutation) SetMonthlyAt(t time.Time) {
	m.monthly_at = &t
}

// MonthlyAt returns the value of the "monthly_at" field in the mutation.
func (m *BackupScheduleMutation) MonthlyAt() (r time.Time, exists bool) {
	v := m.monthly_at
	if v == nil {
		return
	}
	return *v, true
}

// OldMonthlyAt returns the old "monthly_at" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldMonthlyAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonthlyAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonthlyAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonthlyAt: %w", err)
	}
	return oldValue.MonthlyAt, nil
}

// ClearMonthlyAt clears the value of the "monthly_at" field.
func (m *BackupScheduleMutation) ClearMonthlyAt() {
	m.monthly_at = nil
	m.clearedFields[backupschedule.FieldMonthlyAt] = struct{}{}
}

// MonthlyAtCleared returns if the "monthly_at" field was cleared in this mutation.
func (m *BackupScheduleMutation) MonthlyAtCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldMonthlyAt]
	return ok
}

// ResetMonthlyAt resets all changes to the "monthly_at" field.
func (m *BackupScheduleMutation) ResetMonthlyAt() {
	m.monthly_at = nil
	delete(m.clearedFields, backupschedule.FieldMonthlyAt)
}

// SetNextRun sets the "next_run" field.
func (m *BackupScheduleMutation) SetNextRun(t time.Time) {
	m.next_run = &t
}

// NextRun returns the value of the "next_run" field in the mutation.
func (m *BackupScheduleMutation) NextRun() (r time.Time, exists bool) {
	v := m.next_run
	if v == nil {
		return
	}
	return *v, true
}

// OldNextRun returns the old "next_run" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldNextRun(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextRun is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextRun requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNextRun: %w", err)
	}
	return oldValue.NextRun, nil
}

// ClearNextRun clears the value of the "next_run" field.
func (m *BackupScheduleMutation) ClearNextRun() {
	m.next_run = nil
	m.clearedFields[backupschedule.FieldNextRun] = struct{}{}
}

// NextRunCleared returns if the "next_run" field was cleared in this mutation.
func (m *BackupScheduleMutation) NextRunCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldNextRun]
	return ok
}

// ResetNextRun resets all changes to the "next_run" field.
func (m *BackupScheduleMutation) ResetNextRun() {
	m.next_run = nil
	delete(m.clearedFields, backupschedule.FieldNextRun)
}

// SetLastRun sets the "last_run" field.
func (m *BackupScheduleMutation) SetLastRun(t time.Time) {
	m.last_run = &t
}

// LastRun returns the value of the "last_run" field in the mutation.
func (m *BackupScheduleMutation) LastRun() (r time.Time, exists bool) {
	v := m.last_run
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRun returns the old "last_run" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldLastRun(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRun is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRun requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRun: %w", err)
	}
	return oldValue.LastRun, nil
}

// ClearLastRun clears the value of the "last_run" field.
func (m *BackupScheduleMutation) ClearLastRun() {
	m.last_run = nil
	m.clearedFields[backupschedule.FieldLastRun] = struct{}{}
}

// LastRunCleared returns if the "last_run" field was cleared in this mutation.
func (m *BackupScheduleMutation) LastRunCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldLastRun]
	return ok
}

// ResetLastRun resets all changes to the "last_run" field.
func (m *BackupScheduleMutation) ResetLastRun() {
	m.last_run = nil
	delete(m.clearedFields, backupschedule.FieldLastRun)
}

// SetLastRunStatus sets the "last_run_status" field.
func (m *BackupScheduleMutation) SetLastRunStatus(s string) {
	m.last_run_status = &s
}

// LastRunStatus returns the value of the "last_run_status" field in the mutation.
func (m *BackupScheduleMutation) LastRunStatus() (r string, exists bool) {
	v := m.last_run_status
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRunStatus returns the old "last_run_status" field's value of the BackupSchedule entity.
// If the BackupSchedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupScheduleMutation) OldLastRunStatus(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRunStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRunStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRunStatus: %w", err)
	}
	return oldValue.LastRunStatus, nil
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (m *BackupScheduleMutation) ClearLastRunStatus() {
	m.last_run_status = nil
	m.clearedFields[backupschedule.FieldLastRunStatus] = struct{}{}
}

// LastRunStatusCleared returns if the "last_run_status" field was cleared in this mutation.
func (m *BackupScheduleMutation) LastRunStatusCleared() bool {
	_, ok := m.clearedFields[backupschedule.FieldLastRunStatus]
	return ok
}

// ResetLastRunStatus resets all changes to the "last_run_status" field.
func (m *BackupScheduleMutation) ResetLastRunStatus() {
	m.last_run_status = nil
	delete(m.clearedFields, backupschedule.FieldLastRunStatus)
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by id.
func (m *BackupScheduleMutation) SetBackupProfileID(id int) {
	m.backup_profile = &id
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (m *BackupScheduleMutation) ClearBackupProfile() {
	m.clearedbackup_profile = true
}

// BackupProfileCleared reports if the "backup_profile" edge to the BackupProfile entity was cleared.
func (m *BackupScheduleMutation) BackupProfileCleared() bool {
	return m.clearedbackup_profile
}

// BackupProfileID returns the "backup_profile" edge ID in the mutation.
func (m *BackupScheduleMutation) BackupProfileID() (id int, exists bool) {
	if m.backup_profile != nil {
		return *m.backup_profile, true
	}
	return
}

// BackupProfileIDs returns the "backup_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BackupProfileID instead. It exists only for internal usage by the builders.
func (m *BackupScheduleMutation) BackupProfileIDs() (ids []int) {
	if id := m.backup_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBackupProfile resets all changes to the "backup_profile" edge.
func (m *BackupScheduleMutation) ResetBackupProfile() {
	m.backup_profile = nil
	m.clearedbackup_profile = false
}

// Where appends a list predicates to the BackupScheduleMutation builder.
func (m *BackupScheduleMutation) Where(ps ...predicate.BackupSchedule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BackupScheduleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BackupScheduleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BackupSchedule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BackupScheduleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BackupScheduleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BackupSchedule).
func (m *BackupScheduleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BackupScheduleMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.hourly != nil {
		fields = append(fields, backupschedule.FieldHourly)
	}
	if m.daily_at != nil {
		fields = append(fields, backupschedule.FieldDailyAt)
	}
	if m.weekday != nil {
		fields = append(fields, backupschedule.FieldWeekday)
	}
	if m.weekly_at != nil {
		fields = append(fields, backupschedule.FieldWeeklyAt)
	}
	if m.monthday != nil {
		fields = append(fields, backupschedule.FieldMonthday)
	}
	if m.monthly_at != nil {
		fields = append(fields, backupschedule.FieldMonthlyAt)
	}
	if m.next_run != nil {
		fields = append(fields, backupschedule.FieldNextRun)
	}
	if m.last_run != nil {
		fields = append(fields, backupschedule.FieldLastRun)
	}
	if m.last_run_status != nil {
		fields = append(fields, backupschedule.FieldLastRunStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BackupScheduleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case backupschedule.FieldHourly:
		return m.Hourly()
	case backupschedule.FieldDailyAt:
		return m.DailyAt()
	case backupschedule.FieldWeekday:
		return m.Weekday()
	case backupschedule.FieldWeeklyAt:
		return m.WeeklyAt()
	case backupschedule.FieldMonthday:
		return m.Monthday()
	case backupschedule.FieldMonthlyAt:
		return m.MonthlyAt()
	case backupschedule.FieldNextRun:
		return m.NextRun()
	case backupschedule.FieldLastRun:
		return m.LastRun()
	case backupschedule.FieldLastRunStatus:
		return m.LastRunStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BackupScheduleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case backupschedule.FieldHourly:
		return m.OldHourly(ctx)
	case backupschedule.FieldDailyAt:
		return m.OldDailyAt(ctx)
	case backupschedule.FieldWeekday:
		return m.OldWeekday(ctx)
	case backupschedule.FieldWeeklyAt:
		return m.OldWeeklyAt(ctx)
	case backupschedule.FieldMonthday:
		return m.OldMonthday(ctx)
	case backupschedule.FieldMonthlyAt:
		return m.OldMonthlyAt(ctx)
	case backupschedule.FieldNextRun:
		return m.OldNextRun(ctx)
	case backupschedule.FieldLastRun:
		return m.OldLastRun(ctx)
	case backupschedule.FieldLastRunStatus:
		return m.OldLastRunStatus(ctx)
	}
	return nil, fmt.Errorf("unknown BackupSchedule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BackupScheduleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case backupschedule.FieldHourly:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHourly(v)
		return nil
	case backupschedule.FieldDailyAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyAt(v)
		return nil
	case backupschedule.FieldWeekday:
		v, ok := value.(backupschedule.Weekday)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeekday(v)
		return nil
	case backupschedule.FieldWeeklyAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeeklyAt(v)
		return nil
	case backupschedule.FieldMonthday:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonthday(v)
		return nil
	case backupschedule.FieldMonthlyAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonthlyAt(v)
		return nil
	case backupschedule.FieldNextRun:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNextRun(v)
		return nil
	case backupschedule.FieldLastRun:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRun(v)
		return nil
	case backupschedule.FieldLastRunStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRunStatus(v)
		return nil
	}
	return fmt.Errorf("unknown BackupSchedule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BackupScheduleMutation) AddedFields() []string {
	var fields []string
	if m.addmonthday != nil {
		fields = append(fields, backupschedule.FieldMonthday)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BackupScheduleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case backupschedule.FieldMonthday:
		return m.AddedMonthday()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BackupScheduleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case backupschedule.FieldMonthday:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMonthday(v)
		return nil
	}
	return fmt.Errorf("unknown BackupSchedule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BackupScheduleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(backupschedule.FieldDailyAt) {
		fields = append(fields, backupschedule.FieldDailyAt)
	}
	if m.FieldCleared(backupschedule.FieldWeekday) {
		fields = append(fields, backupschedule.FieldWeekday)
	}
	if m.FieldCleared(backupschedule.FieldWeeklyAt) {
		fields = append(fields, backupschedule.FieldWeeklyAt)
	}
	if m.FieldCleared(backupschedule.FieldMonthday) {
		fields = append(fields, backupschedule.FieldMonthday)
	}
	if m.FieldCleared(backupschedule.FieldMonthlyAt) {
		fields = append(fields, backupschedule.FieldMonthlyAt)
	}
	if m.FieldCleared(backupschedule.FieldNextRun) {
		fields = append(fields, backupschedule.FieldNextRun)
	}
	if m.FieldCleared(backupschedule.FieldLastRun) {
		fields = append(fields, backupschedule.FieldLastRun)
	}
	if m.FieldCleared(backupschedule.FieldLastRunStatus) {
		fields = append(fields, backupschedule.FieldLastRunStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BackupScheduleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BackupScheduleMutation) ClearField(name string) error {
	switch name {
	case backupschedule.FieldDailyAt:
		m.ClearDailyAt()
		return nil
	case backupschedule.FieldWeekday:
		m.ClearWeekday()
		return nil
	case backupschedule.FieldWeeklyAt:
		m.ClearWeeklyAt()
		return nil
	case backupschedule.FieldMonthday:
		m.ClearMonthday()
		return nil
	case backupschedule.FieldMonthlyAt:
		m.ClearMonthlyAt()
		return nil
	case backupschedule.FieldNextRun:
		m.ClearNextRun()
		return nil
	case backupschedule.FieldLastRun:
		m.ClearLastRun()
		return nil
	case backupschedule.FieldLastRunStatus:
		m.ClearLastRunStatus()
		return nil
	}
	return fmt.Errorf("unknown BackupSchedule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BackupScheduleMutation) ResetField(name string) error {
	switch name {
	case backupschedule.FieldHourly:
		m.ResetHourly()
		return nil
	case backupschedule.FieldDailyAt:
		m.ResetDailyAt()
		return nil
	case backupschedule.FieldWeekday:
		m.ResetWeekday()
		return nil
	case backupschedule.FieldWeeklyAt:
		m.ResetWeeklyAt()
		return nil
	case backupschedule.FieldMonthday:
		m.ResetMonthday()
		return nil
	case backupschedule.FieldMonthlyAt:
		m.ResetMonthlyAt()
		return nil
	case backupschedule.FieldNextRun:
		m.ResetNextRun()
		return nil
	case backupschedule.FieldLastRun:
		m.ResetLastRun()
		return nil
	case backupschedule.FieldLastRunStatus:
		m.ResetLastRunStatus()
		return nil
	}
	return fmt.Errorf("unknown BackupSchedule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BackupScheduleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.backup_profile != nil {
		edges = append(edges, backupschedule.EdgeBackupProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BackupScheduleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case backupschedule.EdgeBackupProfile:
		if id := m.backup_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BackupScheduleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BackupScheduleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BackupScheduleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbackup_profile {
		edges = append(edges, backupschedule.EdgeBackupProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BackupScheduleMutation) EdgeCleared(name string) bool {
	switch name {
	case backupschedule.EdgeBackupProfile:
		return m.clearedbackup_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BackupScheduleMutation) ClearEdge(name string) error {
	switch name {
	case backupschedule.EdgeBackupProfile:
		m.ClearBackupProfile()
		return nil
	}
	return fmt.Errorf("unknown BackupSchedule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BackupScheduleMutation) ResetEdge(name string) error {
	switch name {
	case backupschedule.EdgeBackupProfile:
		m.ResetBackupProfile()
		return nil
	}
	return fmt.Errorf("unknown BackupSchedule edge %s", name)
}

// FailedBackupRunMutation represents an operation that mutates the FailedBackupRun nodes in the graph.
type FailedBackupRunMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	error                 *string
	clearedFields         map[string]struct{}
	backup_profile        *int
	clearedbackup_profile bool
	repository            *int
	clearedrepository     bool
	done                  bool
	oldValue              func(context.Context) (*FailedBackupRun, error)
	predicates            []predicate.FailedBackupRun
}

var _ ent.Mutation = (*FailedBackupRunMutation)(nil)

// failedbackuprunOption allows management of the mutation configuration using functional options.
type failedbackuprunOption func(*FailedBackupRunMutation)

// newFailedBackupRunMutation creates new mutation for the FailedBackupRun entity.
func newFailedBackupRunMutation(c config, op Op, opts ...failedbackuprunOption) *FailedBackupRunMutation {
	m := &FailedBackupRunMutation{
		config:        c,
		op:            op,
		typ:           TypeFailedBackupRun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFailedBackupRunID sets the ID field of the mutation.
func withFailedBackupRunID(id int) failedbackuprunOption {
	return func(m *FailedBackupRunMutation) {
		var (
			err   error
			once  sync.Once
			value *FailedBackupRun
		)
		m.oldValue = func(ctx context.Context) (*FailedBackupRun, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FailedBackupRun.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFailedBackupRun sets the old FailedBackupRun of the mutation.
func withFailedBackupRun(node *FailedBackupRun) failedbackuprunOption {
	return func(m *FailedBackupRunMutation) {
		m.oldValue = func(context.Context) (*FailedBackupRun, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FailedBackupRunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FailedBackupRunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FailedBackupRunMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FailedBackupRunMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FailedBackupRun.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetError sets the "error" field.
func (m *FailedBackupRunMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *FailedBackupRunMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the FailedBackupRun entity.
// If the FailedBackupRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FailedBackupRunMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ResetError resets all changes to the "error" field.
func (m *FailedBackupRunMutation) ResetError() {
	m.error = nil
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by id.
func (m *FailedBackupRunMutation) SetBackupProfileID(id int) {
	m.backup_profile = &id
}

// ClearBackupProfile clears the "backup_profile" edge to the BackupProfile entity.
func (m *FailedBackupRunMutation) ClearBackupProfile() {
	m.clearedbackup_profile = true
}

// BackupProfileCleared reports if the "backup_profile" edge to the BackupProfile entity was cleared.
func (m *FailedBackupRunMutation) BackupProfileCleared() bool {
	return m.clearedbackup_profile
}

// BackupProfileID returns the "backup_profile" edge ID in the mutation.
func (m *FailedBackupRunMutation) BackupProfileID() (id int, exists bool) {
	if m.backup_profile != nil {
		return *m.backup_profile, true
	}
	return
}

// BackupProfileIDs returns the "backup_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BackupProfileID instead. It exists only for internal usage by the builders.
func (m *FailedBackupRunMutation) BackupProfileIDs() (ids []int) {
	if id := m.backup_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBackupProfile resets all changes to the "backup_profile" edge.
func (m *FailedBackupRunMutation) ResetBackupProfile() {
	m.backup_profile = nil
	m.clearedbackup_profile = false
}

// SetRepositoryID sets the "repository" edge to the Repository entity by id.
func (m *FailedBackupRunMutation) SetRepositoryID(id int) {
	m.repository = &id
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (m *FailedBackupRunMutation) ClearRepository() {
	m.clearedrepository = true
}

// RepositoryCleared reports if the "repository" edge to the Repository entity was cleared.
func (m *FailedBackupRunMutation) RepositoryCleared() bool {
	return m.clearedrepository
}

// RepositoryID returns the "repository" edge ID in the mutation.
func (m *FailedBackupRunMutation) RepositoryID() (id int, exists bool) {
	if m.repository != nil {
		return *m.repository, true
	}
	return
}

// RepositoryIDs returns the "repository" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepositoryID instead. It exists only for internal usage by the builders.
func (m *FailedBackupRunMutation) RepositoryIDs() (ids []int) {
	if id := m.repository; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepository resets all changes to the "repository" edge.
func (m *FailedBackupRunMutation) ResetRepository() {
	m.repository = nil
	m.clearedrepository = false
}

// Where appends a list predicates to the FailedBackupRunMutation builder.
func (m *FailedBackupRunMutation) Where(ps ...predicate.FailedBackupRun) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FailedBackupRunMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FailedBackupRunMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FailedBackupRun, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FailedBackupRunMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FailedBackupRunMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FailedBackupRun).
func (m *FailedBackupRunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FailedBackupRunMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.error != nil {
		fields = append(fields, failedbackuprun.FieldError)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FailedBackupRunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case failedbackuprun.FieldError:
		return m.Error()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FailedBackupRunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case failedbackuprun.FieldError:
		return m.OldError(ctx)
	}
	return nil, fmt.Errorf("unknown FailedBackupRun field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FailedBackupRunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case failedbackuprun.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	}
	return fmt.Errorf("unknown FailedBackupRun field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FailedBackupRunMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FailedBackupRunMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FailedBackupRunMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FailedBackupRun numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FailedBackupRunMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FailedBackupRunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FailedBackupRunMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FailedBackupRun nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FailedBackupRunMutation) ResetField(name string) error {
	switch name {
	case failedbackuprun.FieldError:
		m.ResetError()
		return nil
	}
	return fmt.Errorf("unknown FailedBackupRun field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FailedBackupRunMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.backup_profile != nil {
		edges = append(edges, failedbackuprun.EdgeBackupProfile)
	}
	if m.repository != nil {
		edges = append(edges, failedbackuprun.EdgeRepository)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FailedBackupRunMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case failedbackuprun.EdgeBackupProfile:
		if id := m.backup_profile; id != nil {
			return []ent.Value{*id}
		}
	case failedbackuprun.EdgeRepository:
		if id := m.repository; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FailedBackupRunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FailedBackupRunMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FailedBackupRunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbackup_profile {
		edges = append(edges, failedbackuprun.EdgeBackupProfile)
	}
	if m.clearedrepository {
		edges = append(edges, failedbackuprun.EdgeRepository)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FailedBackupRunMutation) EdgeCleared(name string) bool {
	switch name {
	case failedbackuprun.EdgeBackupProfile:
		return m.clearedbackup_profile
	case failedbackuprun.EdgeRepository:
		return m.clearedrepository
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FailedBackupRunMutation) ClearEdge(name string) error {
	switch name {
	case failedbackuprun.EdgeBackupProfile:
		m.ClearBackupProfile()
		return nil
	case failedbackuprun.EdgeRepository:
		m.ClearRepository()
		return nil
	}
	return fmt.Errorf("unknown FailedBackupRun unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FailedBackupRunMutation) ResetEdge(name string) error {
	switch name {
	case failedbackuprun.EdgeBackupProfile:
		m.ResetBackupProfile()
		return nil
	case failedbackuprun.EdgeRepository:
		m.ResetRepository()
		return nil
	}
	return fmt.Errorf("unknown FailedBackupRun edge %s", name)
}

// RepositoryMutation represents an operation that mutates the Repository nodes in the graph.
type RepositoryMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	name                         *string
	url                          *string
	password                     *string
	stats_total_chunks           *int
	addstats_total_chunks        *int
	stats_total_size             *int
	addstats_total_size          *int
	stats_total_csize            *int
	addstats_total_csize         *int
	stats_total_unique_chunks    *int
	addstats_total_unique_chunks *int
	stats_unique_size            *int
	addstats_unique_size         *int
	stats_unique_csize           *int
	addstats_unique_csize        *int
	clearedFields                map[string]struct{}
	backup_profiles              map[int]struct{}
	removedbackup_profiles       map[int]struct{}
	clearedbackup_profiles       bool
	archives                     map[int]struct{}
	removedarchives              map[int]struct{}
	clearedarchives              bool
	failed_backup_runs           map[int]struct{}
	removedfailed_backup_runs    map[int]struct{}
	clearedfailed_backup_runs    bool
	done                         bool
	oldValue                     func(context.Context) (*Repository, error)
	predicates                   []predicate.Repository
}

var _ ent.Mutation = (*RepositoryMutation)(nil)

// repositoryOption allows management of the mutation configuration using functional options.
type repositoryOption func(*RepositoryMutation)

// newRepositoryMutation creates new mutation for the Repository entity.
func newRepositoryMutation(c config, op Op, opts ...repositoryOption) *RepositoryMutation {
	m := &RepositoryMutation{
		config:        c,
		op:            op,
		typ:           TypeRepository,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepositoryID sets the ID field of the mutation.
func withRepositoryID(id int) repositoryOption {
	return func(m *RepositoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Repository
		)
		m.oldValue = func(ctx context.Context) (*Repository, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repository.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepository sets the old Repository of the mutation.
func withRepository(node *Repository) repositoryOption {
	return func(m *RepositoryMutation) {
		m.oldValue = func(context.Context) (*Repository, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepositoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepositoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Repository entities.
func (m *RepositoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepositoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RepositoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Repository.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RepositoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepositoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepositoryMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *RepositoryMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *RepositoryMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *RepositoryMutation) ResetURL() {
	m.url = nil
}

// SetPassword sets the "password" field.
func (m *RepositoryMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *RepositoryMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *RepositoryMutation) ResetPassword() {
	m.password = nil
}

// SetStatsTotalChunks sets the "stats_total_chunks" field.
func (m *RepositoryMutation) SetStatsTotalChunks(i int) {
	m.stats_total_chunks = &i
	m.addstats_total_chunks = nil
}

// StatsTotalChunks returns the value of the "stats_total_chunks" field in the mutation.
func (m *RepositoryMutation) StatsTotalChunks() (r int, exists bool) {
	v := m.stats_total_chunks
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalChunks returns the old "stats_total_chunks" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldStatsTotalChunks(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalChunks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalChunks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalChunks: %w", err)
	}
	return oldValue.StatsTotalChunks, nil
}

// AddStatsTotalChunks adds i to the "stats_total_chunks" field.
func (m *RepositoryMutation) AddStatsTotalChunks(i int) {
	if m.addstats_total_chunks != nil {
		*m.addstats_total_chunks += i
	} else {
		m.addstats_total_chunks = &i
	}
}

// AddedStatsTotalChunks returns the value that was added to the "stats_total_chunks" field in this mutation.
func (m *RepositoryMutation) AddedStatsTotalChunks() (r int, exists bool) {
	v := m.addstats_total_chunks
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalChunks resets all changes to the "stats_total_chunks" field.
func (m *RepositoryMutation) ResetStatsTotalChunks() {
	m.stats_total_chunks = nil
	m.addstats_total_chunks = nil
}

// SetStatsTotalSize sets the "stats_total_size" field.
func (m *RepositoryMutation) SetStatsTotalSize(i int) {
	m.stats_total_size = &i
	m.addstats_total_size = nil
}

// StatsTotalSize returns the value of the "stats_total_size" field in the mutation.
func (m *RepositoryMutation) StatsTotalSize() (r int, exists bool) {
	v := m.stats_total_size
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalSize returns the old "stats_total_size" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldStatsTotalSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalSize: %w", err)
	}
	return oldValue.StatsTotalSize, nil
}

// AddStatsTotalSize adds i to the "stats_total_size" field.
func (m *RepositoryMutation) AddStatsTotalSize(i int) {
	if m.addstats_total_size != nil {
		*m.addstats_total_size += i
	} else {
		m.addstats_total_size = &i
	}
}

// AddedStatsTotalSize returns the value that was added to the "stats_total_size" field in this mutation.
func (m *RepositoryMutation) AddedStatsTotalSize() (r int, exists bool) {
	v := m.addstats_total_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalSize resets all changes to the "stats_total_size" field.
func (m *RepositoryMutation) ResetStatsTotalSize() {
	m.stats_total_size = nil
	m.addstats_total_size = nil
}

// SetStatsTotalCsize sets the "stats_total_csize" field.
func (m *RepositoryMutation) SetStatsTotalCsize(i int) {
	m.stats_total_csize = &i
	m.addstats_total_csize = nil
}

// StatsTotalCsize returns the value of the "stats_total_csize" field in the mutation.
func (m *RepositoryMutation) StatsTotalCsize() (r int, exists bool) {
	v := m.stats_total_csize
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalCsize returns the old "stats_total_csize" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldStatsTotalCsize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalCsize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalCsize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalCsize: %w", err)
	}
	return oldValue.StatsTotalCsize, nil
}

// AddStatsTotalCsize adds i to the "stats_total_csize" field.
func (m *RepositoryMutation) AddStatsTotalCsize(i int) {
	if m.addstats_total_csize != nil {
		*m.addstats_total_csize += i
	} else {
		m.addstats_total_csize = &i
	}
}

// AddedStatsTotalCsize returns the value that was added to the "stats_total_csize" field in this mutation.
func (m *RepositoryMutation) AddedStatsTotalCsize() (r int, exists bool) {
	v := m.addstats_total_csize
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalCsize resets all changes to the "stats_total_csize" field.
func (m *RepositoryMutation) ResetStatsTotalCsize() {
	m.stats_total_csize = nil
	m.addstats_total_csize = nil
}

// SetStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field.
func (m *RepositoryMutation) SetStatsTotalUniqueChunks(i int) {
	m.stats_total_unique_chunks = &i
	m.addstats_total_unique_chunks = nil
}

// StatsTotalUniqueChunks returns the value of the "stats_total_unique_chunks" field in the mutation.
func (m *RepositoryMutation) StatsTotalUniqueChunks() (r int, exists bool) {
	v := m.stats_total_unique_chunks
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalUniqueChunks returns the old "stats_total_unique_chunks" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldStatsTotalUniqueChunks(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalUniqueChunks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalUniqueChunks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalUniqueChunks: %w", err)
	}
	return oldValue.StatsTotalUniqueChunks, nil
}

// AddStatsTotalUniqueChunks adds i to the "stats_total_unique_chunks" field.
func (m *RepositoryMutation) AddStatsTotalUniqueChunks(i int) {
	if m.addstats_total_unique_chunks != nil {
		*m.addstats_total_unique_chunks += i
	} else {
		m.addstats_total_unique_chunks = &i
	}
}

// AddedStatsTotalUniqueChunks returns the value that was added to the "stats_total_unique_chunks" field in this mutation.
func (m *RepositoryMutation) AddedStatsTotalUniqueChunks() (r int, exists bool) {
	v := m.addstats_total_unique_chunks
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalUniqueChunks resets all changes to the "stats_total_unique_chunks" field.
func (m *RepositoryMutation) ResetStatsTotalUniqueChunks() {
	m.stats_total_unique_chunks = nil
	m.addstats_total_unique_chunks = nil
}

// SetStatsUniqueSize sets the "stats_unique_size" field.
func (m *RepositoryMutation) SetStatsUniqueSize(i int) {
	m.stats_unique_size = &i
	m.addstats_unique_size = nil
}

// StatsUniqueSize returns the value of the "stats_unique_size" field in the mutation.
func (m *RepositoryMutation) StatsUniqueSize() (r int, exists bool) {
	v := m.stats_unique_size
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsUniqueSize returns the old "stats_unique_size" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldStatsUniqueSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsUniqueSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsUniqueSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsUniqueSize: %w", err)
	}
	return oldValue.StatsUniqueSize, nil
}

// AddStatsUniqueSize adds i to the "stats_unique_size" field.
func (m *RepositoryMutation) AddStatsUniqueSize(i int) {
	if m.addstats_unique_size != nil {
		*m.addstats_unique_size += i
	} else {
		m.addstats_unique_size = &i
	}
}

// AddedStatsUniqueSize returns the value that was added to the "stats_unique_size" field in this mutation.
func (m *RepositoryMutation) AddedStatsUniqueSize() (r int, exists bool) {
	v := m.addstats_unique_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsUniqueSize resets all changes to the "stats_unique_size" field.
func (m *RepositoryMutation) ResetStatsUniqueSize() {
	m.stats_unique_size = nil
	m.addstats_unique_size = nil
}

// SetStatsUniqueCsize sets the "stats_unique_csize" field.
func (m *RepositoryMutation) SetStatsUniqueCsize(i int) {
	m.stats_unique_csize = &i
	m.addstats_unique_csize = nil
}

// StatsUniqueCsize returns the value of the "stats_unique_csize" field in the mutation.
func (m *RepositoryMutation) StatsUniqueCsize() (r int, exists bool) {
	v := m.stats_unique_csize
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsUniqueCsize returns the old "stats_unique_csize" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldStatsUniqueCsize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsUniqueCsize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsUniqueCsize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsUniqueCsize: %w", err)
	}
	return oldValue.StatsUniqueCsize, nil
}

// AddStatsUniqueCsize adds i to the "stats_unique_csize" field.
func (m *RepositoryMutation) AddStatsUniqueCsize(i int) {
	if m.addstats_unique_csize != nil {
		*m.addstats_unique_csize += i
	} else {
		m.addstats_unique_csize = &i
	}
}

// AddedStatsUniqueCsize returns the value that was added to the "stats_unique_csize" field in this mutation.
func (m *RepositoryMutation) AddedStatsUniqueCsize() (r int, exists bool) {
	v := m.addstats_unique_csize
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsUniqueCsize resets all changes to the "stats_unique_csize" field.
func (m *RepositoryMutation) ResetStatsUniqueCsize() {
	m.stats_unique_csize = nil
	m.addstats_unique_csize = nil
}

// AddBackupProfileIDs adds the "backup_profiles" edge to the BackupProfile entity by ids.
func (m *RepositoryMutation) AddBackupProfileIDs(ids ...int) {
	if m.backup_profiles == nil {
		m.backup_profiles = make(map[int]struct{})
	}
	for i := range ids {
		m.backup_profiles[ids[i]] = struct{}{}
	}
}

// ClearBackupProfiles clears the "backup_profiles" edge to the BackupProfile entity.
func (m *RepositoryMutation) ClearBackupProfiles() {
	m.clearedbackup_profiles = true
}

// BackupProfilesCleared reports if the "backup_profiles" edge to the BackupProfile entity was cleared.
func (m *RepositoryMutation) BackupProfilesCleared() bool {
	return m.clearedbackup_profiles
}

// RemoveBackupProfileIDs removes the "backup_profiles" edge to the BackupProfile entity by IDs.
func (m *RepositoryMutation) RemoveBackupProfileIDs(ids ...int) {
	if m.removedbackup_profiles == nil {
		m.removedbackup_profiles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.backup_profiles, ids[i])
		m.removedbackup_profiles[ids[i]] = struct{}{}
	}
}

// RemovedBackupProfiles returns the removed IDs of the "backup_profiles" edge to the BackupProfile entity.
func (m *RepositoryMutation) RemovedBackupProfilesIDs() (ids []int) {
	for id := range m.removedbackup_profiles {
		ids = append(ids, id)
	}
	return
}

// BackupProfilesIDs returns the "backup_profiles" edge IDs in the mutation.
func (m *RepositoryMutation) BackupProfilesIDs() (ids []int) {
	for id := range m.backup_profiles {
		ids = append(ids, id)
	}
	return
}

// ResetBackupProfiles resets all changes to the "backup_profiles" edge.
func (m *RepositoryMutation) ResetBackupProfiles() {
	m.backup_profiles = nil
	m.clearedbackup_profiles = false
	m.removedbackup_profiles = nil
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by ids.
func (m *RepositoryMutation) AddArchiveIDs(ids ...int) {
	if m.archives == nil {
		m.archives = make(map[int]struct{})
	}
	for i := range ids {
		m.archives[ids[i]] = struct{}{}
	}
}

// ClearArchives clears the "archives" edge to the Archive entity.
func (m *RepositoryMutation) ClearArchives() {
	m.clearedarchives = true
}

// ArchivesCleared reports if the "archives" edge to the Archive entity was cleared.
func (m *RepositoryMutation) ArchivesCleared() bool {
	return m.clearedarchives
}

// RemoveArchiveIDs removes the "archives" edge to the Archive entity by IDs.
func (m *RepositoryMutation) RemoveArchiveIDs(ids ...int) {
	if m.removedarchives == nil {
		m.removedarchives = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.archives, ids[i])
		m.removedarchives[ids[i]] = struct{}{}
	}
}

// RemovedArchives returns the removed IDs of the "archives" edge to the Archive entity.
func (m *RepositoryMutation) RemovedArchivesIDs() (ids []int) {
	for id := range m.removedarchives {
		ids = append(ids, id)
	}
	return
}

// ArchivesIDs returns the "archives" edge IDs in the mutation.
func (m *RepositoryMutation) ArchivesIDs() (ids []int) {
	for id := range m.archives {
		ids = append(ids, id)
	}
	return
}

// ResetArchives resets all changes to the "archives" edge.
func (m *RepositoryMutation) ResetArchives() {
	m.archives = nil
	m.clearedarchives = false
	m.removedarchives = nil
}

// AddFailedBackupRunIDs adds the "failed_backup_runs" edge to the FailedBackupRun entity by ids.
func (m *RepositoryMutation) AddFailedBackupRunIDs(ids ...int) {
	if m.failed_backup_runs == nil {
		m.failed_backup_runs = make(map[int]struct{})
	}
	for i := range ids {
		m.failed_backup_runs[ids[i]] = struct{}{}
	}
}

// ClearFailedBackupRuns clears the "failed_backup_runs" edge to the FailedBackupRun entity.
func (m *RepositoryMutation) ClearFailedBackupRuns() {
	m.clearedfailed_backup_runs = true
}

// FailedBackupRunsCleared reports if the "failed_backup_runs" edge to the FailedBackupRun entity was cleared.
func (m *RepositoryMutation) FailedBackupRunsCleared() bool {
	return m.clearedfailed_backup_runs
}

// RemoveFailedBackupRunIDs removes the "failed_backup_runs" edge to the FailedBackupRun entity by IDs.
func (m *RepositoryMutation) RemoveFailedBackupRunIDs(ids ...int) {
	if m.removedfailed_backup_runs == nil {
		m.removedfailed_backup_runs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.failed_backup_runs, ids[i])
		m.removedfailed_backup_runs[ids[i]] = struct{}{}
	}
}

// RemovedFailedBackupRuns returns the removed IDs of the "failed_backup_runs" edge to the FailedBackupRun entity.
func (m *RepositoryMutation) RemovedFailedBackupRunsIDs() (ids []int) {
	for id := range m.removedfailed_backup_runs {
		ids = append(ids, id)
	}
	return
}

// FailedBackupRunsIDs returns the "failed_backup_runs" edge IDs in the mutation.
func (m *RepositoryMutation) FailedBackupRunsIDs() (ids []int) {
	for id := range m.failed_backup_runs {
		ids = append(ids, id)
	}
	return
}

// ResetFailedBackupRuns resets all changes to the "failed_backup_runs" edge.
func (m *RepositoryMutation) ResetFailedBackupRuns() {
	m.failed_backup_runs = nil
	m.clearedfailed_backup_runs = false
	m.removedfailed_backup_runs = nil
}

// Where appends a list predicates to the RepositoryMutation builder.
func (m *RepositoryMutation) Where(ps ...predicate.Repository) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RepositoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RepositoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Repository, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RepositoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RepositoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Repository).
func (m *RepositoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepositoryMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, repository.FieldName)
	}
	if m.url != nil {
		fields = append(fields, repository.FieldURL)
	}
	if m.password != nil {
		fields = append(fields, repository.FieldPassword)
	}
	if m.stats_total_chunks != nil {
		fields = append(fields, repository.FieldStatsTotalChunks)
	}
	if m.stats_total_size != nil {
		fields = append(fields, repository.FieldStatsTotalSize)
	}
	if m.stats_total_csize != nil {
		fields = append(fields, repository.FieldStatsTotalCsize)
	}
	if m.stats_total_unique_chunks != nil {
		fields = append(fields, repository.FieldStatsTotalUniqueChunks)
	}
	if m.stats_unique_size != nil {
		fields = append(fields, repository.FieldStatsUniqueSize)
	}
	if m.stats_unique_csize != nil {
		fields = append(fields, repository.FieldStatsUniqueCsize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepositoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repository.FieldName:
		return m.Name()
	case repository.FieldURL:
		return m.URL()
	case repository.FieldPassword:
		return m.Password()
	case repository.FieldStatsTotalChunks:
		return m.StatsTotalChunks()
	case repository.FieldStatsTotalSize:
		return m.StatsTotalSize()
	case repository.FieldStatsTotalCsize:
		return m.StatsTotalCsize()
	case repository.FieldStatsTotalUniqueChunks:
		return m.StatsTotalUniqueChunks()
	case repository.FieldStatsUniqueSize:
		return m.StatsUniqueSize()
	case repository.FieldStatsUniqueCsize:
		return m.StatsUniqueCsize()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepositoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repository.FieldName:
		return m.OldName(ctx)
	case repository.FieldURL:
		return m.OldURL(ctx)
	case repository.FieldPassword:
		return m.OldPassword(ctx)
	case repository.FieldStatsTotalChunks:
		return m.OldStatsTotalChunks(ctx)
	case repository.FieldStatsTotalSize:
		return m.OldStatsTotalSize(ctx)
	case repository.FieldStatsTotalCsize:
		return m.OldStatsTotalCsize(ctx)
	case repository.FieldStatsTotalUniqueChunks:
		return m.OldStatsTotalUniqueChunks(ctx)
	case repository.FieldStatsUniqueSize:
		return m.OldStatsUniqueSize(ctx)
	case repository.FieldStatsUniqueCsize:
		return m.OldStatsUniqueCsize(ctx)
	}
	return nil, fmt.Errorf("unknown Repository field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repository.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case repository.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case repository.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case repository.FieldStatsTotalChunks:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalChunks(v)
		return nil
	case repository.FieldStatsTotalSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalSize(v)
		return nil
	case repository.FieldStatsTotalCsize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalCsize(v)
		return nil
	case repository.FieldStatsTotalUniqueChunks:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalUniqueChunks(v)
		return nil
	case repository.FieldStatsUniqueSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsUniqueSize(v)
		return nil
	case repository.FieldStatsUniqueCsize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsUniqueCsize(v)
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepositoryMutation) AddedFields() []string {
	var fields []string
	if m.addstats_total_chunks != nil {
		fields = append(fields, repository.FieldStatsTotalChunks)
	}
	if m.addstats_total_size != nil {
		fields = append(fields, repository.FieldStatsTotalSize)
	}
	if m.addstats_total_csize != nil {
		fields = append(fields, repository.FieldStatsTotalCsize)
	}
	if m.addstats_total_unique_chunks != nil {
		fields = append(fields, repository.FieldStatsTotalUniqueChunks)
	}
	if m.addstats_unique_size != nil {
		fields = append(fields, repository.FieldStatsUniqueSize)
	}
	if m.addstats_unique_csize != nil {
		fields = append(fields, repository.FieldStatsUniqueCsize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepositoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case repository.FieldStatsTotalChunks:
		return m.AddedStatsTotalChunks()
	case repository.FieldStatsTotalSize:
		return m.AddedStatsTotalSize()
	case repository.FieldStatsTotalCsize:
		return m.AddedStatsTotalCsize()
	case repository.FieldStatsTotalUniqueChunks:
		return m.AddedStatsTotalUniqueChunks()
	case repository.FieldStatsUniqueSize:
		return m.AddedStatsUniqueSize()
	case repository.FieldStatsUniqueCsize:
		return m.AddedStatsUniqueCsize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case repository.FieldStatsTotalChunks:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalChunks(v)
		return nil
	case repository.FieldStatsTotalSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalSize(v)
		return nil
	case repository.FieldStatsTotalCsize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalCsize(v)
		return nil
	case repository.FieldStatsTotalUniqueChunks:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalUniqueChunks(v)
		return nil
	case repository.FieldStatsUniqueSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsUniqueSize(v)
		return nil
	case repository.FieldStatsUniqueCsize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsUniqueCsize(v)
		return nil
	}
	return fmt.Errorf("unknown Repository numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepositoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepositoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepositoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Repository nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepositoryMutation) ResetField(name string) error {
	switch name {
	case repository.FieldName:
		m.ResetName()
		return nil
	case repository.FieldURL:
		m.ResetURL()
		return nil
	case repository.FieldPassword:
		m.ResetPassword()
		return nil
	case repository.FieldStatsTotalChunks:
		m.ResetStatsTotalChunks()
		return nil
	case repository.FieldStatsTotalSize:
		m.ResetStatsTotalSize()
		return nil
	case repository.FieldStatsTotalCsize:
		m.ResetStatsTotalCsize()
		return nil
	case repository.FieldStatsTotalUniqueChunks:
		m.ResetStatsTotalUniqueChunks()
		return nil
	case repository.FieldStatsUniqueSize:
		m.ResetStatsUniqueSize()
		return nil
	case repository.FieldStatsUniqueCsize:
		m.ResetStatsUniqueCsize()
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepositoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.backup_profiles != nil {
		edges = append(edges, repository.EdgeBackupProfiles)
	}
	if m.archives != nil {
		edges = append(edges, repository.EdgeArchives)
	}
	if m.failed_backup_runs != nil {
		edges = append(edges, repository.EdgeFailedBackupRuns)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepositoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeBackupProfiles:
		ids := make([]ent.Value, 0, len(m.backup_profiles))
		for id := range m.backup_profiles {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeArchives:
		ids := make([]ent.Value, 0, len(m.archives))
		for id := range m.archives {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeFailedBackupRuns:
		ids := make([]ent.Value, 0, len(m.failed_backup_runs))
		for id := range m.failed_backup_runs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepositoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedbackup_profiles != nil {
		edges = append(edges, repository.EdgeBackupProfiles)
	}
	if m.removedarchives != nil {
		edges = append(edges, repository.EdgeArchives)
	}
	if m.removedfailed_backup_runs != nil {
		edges = append(edges, repository.EdgeFailedBackupRuns)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepositoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeBackupProfiles:
		ids := make([]ent.Value, 0, len(m.removedbackup_profiles))
		for id := range m.removedbackup_profiles {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeArchives:
		ids := make([]ent.Value, 0, len(m.removedarchives))
		for id := range m.removedarchives {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeFailedBackupRuns:
		ids := make([]ent.Value, 0, len(m.removedfailed_backup_runs))
		for id := range m.removedfailed_backup_runs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepositoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedbackup_profiles {
		edges = append(edges, repository.EdgeBackupProfiles)
	}
	if m.clearedarchives {
		edges = append(edges, repository.EdgeArchives)
	}
	if m.clearedfailed_backup_runs {
		edges = append(edges, repository.EdgeFailedBackupRuns)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepositoryMutation) EdgeCleared(name string) bool {
	switch name {
	case repository.EdgeBackupProfiles:
		return m.clearedbackup_profiles
	case repository.EdgeArchives:
		return m.clearedarchives
	case repository.EdgeFailedBackupRuns:
		return m.clearedfailed_backup_runs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepositoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Repository unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepositoryMutation) ResetEdge(name string) error {
	switch name {
	case repository.EdgeBackupProfiles:
		m.ResetBackupProfiles()
		return nil
	case repository.EdgeArchives:
		m.ResetArchives()
		return nil
	case repository.EdgeFailedBackupRuns:
		m.ResetFailedBackupRuns()
		return nil
	}
	return fmt.Errorf("unknown Repository edge %s", name)
}
