// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/archive"
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/predicate"
	"arco/backend/ent/repository"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArchive       = "Archive"
	TypeBackupProfile = "BackupProfile"
	TypeRepository    = "Repository"
)

// ArchiveMutation represents an operation that mutates the Archive nodes in the graph.
type ArchiveMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	createdAt         *time.Time
	duration          *time.Time
	borgID            *string
	clearedFields     map[string]struct{}
	repository        *int
	clearedrepository bool
	done              bool
	oldValue          func(context.Context) (*Archive, error)
	predicates        []predicate.Archive
}

var _ ent.Mutation = (*ArchiveMutation)(nil)

// archiveOption allows management of the mutation configuration using functional options.
type archiveOption func(*ArchiveMutation)

// newArchiveMutation creates new mutation for the Archive entity.
func newArchiveMutation(c config, op Op, opts ...archiveOption) *ArchiveMutation {
	m := &ArchiveMutation{
		config:        c,
		op:            op,
		typ:           TypeArchive,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArchiveID sets the ID field of the mutation.
func withArchiveID(id int) archiveOption {
	return func(m *ArchiveMutation) {
		var (
			err   error
			once  sync.Once
			value *Archive
		)
		m.oldValue = func(ctx context.Context) (*Archive, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Archive.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArchive sets the old Archive of the mutation.
func withArchive(node *Archive) archiveOption {
	return func(m *ArchiveMutation) {
		m.oldValue = func(context.Context) (*Archive, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArchiveMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArchiveMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Archive entities.
func (m *ArchiveMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArchiveMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArchiveMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Archive.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ArchiveMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArchiveMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArchiveMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "createdAt" field.
func (m *ArchiveMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *ArchiveMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *ArchiveMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetDuration sets the "duration" field.
func (m *ArchiveMutation) SetDuration(t time.Time) {
	m.duration = &t
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ArchiveMutation) Duration() (r time.Time, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldDuration(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// ResetDuration resets all changes to the "duration" field.
func (m *ArchiveMutation) ResetDuration() {
	m.duration = nil
}

// SetBorgID sets the "borgID" field.
func (m *ArchiveMutation) SetBorgID(s string) {
	m.borgID = &s
}

// BorgID returns the value of the "borgID" field in the mutation.
func (m *ArchiveMutation) BorgID() (r string, exists bool) {
	v := m.borgID
	if v == nil {
		return
	}
	return *v, true
}

// OldBorgID returns the old "borgID" field's value of the Archive entity.
// If the Archive object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArchiveMutation) OldBorgID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBorgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBorgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBorgID: %w", err)
	}
	return oldValue.BorgID, nil
}

// ResetBorgID resets all changes to the "borgID" field.
func (m *ArchiveMutation) ResetBorgID() {
	m.borgID = nil
}

// SetRepositoryID sets the "repository" edge to the Repository entity by id.
func (m *ArchiveMutation) SetRepositoryID(id int) {
	m.repository = &id
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (m *ArchiveMutation) ClearRepository() {
	m.clearedrepository = true
}

// RepositoryCleared reports if the "repository" edge to the Repository entity was cleared.
func (m *ArchiveMutation) RepositoryCleared() bool {
	return m.clearedrepository
}

// RepositoryID returns the "repository" edge ID in the mutation.
func (m *ArchiveMutation) RepositoryID() (id int, exists bool) {
	if m.repository != nil {
		return *m.repository, true
	}
	return
}

// RepositoryIDs returns the "repository" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepositoryID instead. It exists only for internal usage by the builders.
func (m *ArchiveMutation) RepositoryIDs() (ids []int) {
	if id := m.repository; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepository resets all changes to the "repository" edge.
func (m *ArchiveMutation) ResetRepository() {
	m.repository = nil
	m.clearedrepository = false
}

// Where appends a list predicates to the ArchiveMutation builder.
func (m *ArchiveMutation) Where(ps ...predicate.Archive) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArchiveMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArchiveMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Archive, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArchiveMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArchiveMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Archive).
func (m *ArchiveMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArchiveMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, archive.FieldName)
	}
	if m.createdAt != nil {
		fields = append(fields, archive.FieldCreatedAt)
	}
	if m.duration != nil {
		fields = append(fields, archive.FieldDuration)
	}
	if m.borgID != nil {
		fields = append(fields, archive.FieldBorgID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArchiveMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case archive.FieldName:
		return m.Name()
	case archive.FieldCreatedAt:
		return m.CreatedAt()
	case archive.FieldDuration:
		return m.Duration()
	case archive.FieldBorgID:
		return m.BorgID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArchiveMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case archive.FieldName:
		return m.OldName(ctx)
	case archive.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case archive.FieldDuration:
		return m.OldDuration(ctx)
	case archive.FieldBorgID:
		return m.OldBorgID(ctx)
	}
	return nil, fmt.Errorf("unknown Archive field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArchiveMutation) SetField(name string, value ent.Value) error {
	switch name {
	case archive.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case archive.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case archive.FieldDuration:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case archive.FieldBorgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBorgID(v)
		return nil
	}
	return fmt.Errorf("unknown Archive field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArchiveMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArchiveMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArchiveMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Archive numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArchiveMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArchiveMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArchiveMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Archive nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArchiveMutation) ResetField(name string) error {
	switch name {
	case archive.FieldName:
		m.ResetName()
		return nil
	case archive.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case archive.FieldDuration:
		m.ResetDuration()
		return nil
	case archive.FieldBorgID:
		m.ResetBorgID()
		return nil
	}
	return fmt.Errorf("unknown Archive field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArchiveMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repository != nil {
		edges = append(edges, archive.EdgeRepository)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArchiveMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case archive.EdgeRepository:
		if id := m.repository; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArchiveMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArchiveMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArchiveMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrepository {
		edges = append(edges, archive.EdgeRepository)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArchiveMutation) EdgeCleared(name string) bool {
	switch name {
	case archive.EdgeRepository:
		return m.clearedrepository
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArchiveMutation) ClearEdge(name string) error {
	switch name {
	case archive.EdgeRepository:
		m.ClearRepository()
		return nil
	}
	return fmt.Errorf("unknown Archive unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArchiveMutation) ResetEdge(name string) error {
	switch name {
	case archive.EdgeRepository:
		m.ResetRepository()
		return nil
	}
	return fmt.Errorf("unknown Archive edge %s", name)
}

// BackupProfileMutation represents an operation that mutates the BackupProfile nodes in the graph.
type BackupProfileMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	prefix              *string
	directories         *[]string
	appenddirectories   []string
	hasPeriodicBackups  *bool
	periodicBackupTime  *time.Time
	isSetupComplete     *bool
	clearedFields       map[string]struct{}
	repositories        map[int]struct{}
	removedrepositories map[int]struct{}
	clearedrepositories bool
	done                bool
	oldValue            func(context.Context) (*BackupProfile, error)
	predicates          []predicate.BackupProfile
}

var _ ent.Mutation = (*BackupProfileMutation)(nil)

// backupprofileOption allows management of the mutation configuration using functional options.
type backupprofileOption func(*BackupProfileMutation)

// newBackupProfileMutation creates new mutation for the BackupProfile entity.
func newBackupProfileMutation(c config, op Op, opts ...backupprofileOption) *BackupProfileMutation {
	m := &BackupProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeBackupProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBackupProfileID sets the ID field of the mutation.
func withBackupProfileID(id int) backupprofileOption {
	return func(m *BackupProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *BackupProfile
		)
		m.oldValue = func(ctx context.Context) (*BackupProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BackupProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBackupProfile sets the old BackupProfile of the mutation.
func withBackupProfile(node *BackupProfile) backupprofileOption {
	return func(m *BackupProfileMutation) {
		m.oldValue = func(context.Context) (*BackupProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BackupProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BackupProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BackupProfile entities.
func (m *BackupProfileMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BackupProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BackupProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BackupProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BackupProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BackupProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BackupProfileMutation) ResetName() {
	m.name = nil
}

// SetPrefix sets the "prefix" field.
func (m *BackupProfileMutation) SetPrefix(s string) {
	m.prefix = &s
}

// Prefix returns the value of the "prefix" field in the mutation.
func (m *BackupProfileMutation) Prefix() (r string, exists bool) {
	v := m.prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefix returns the old "prefix" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefix: %w", err)
	}
	return oldValue.Prefix, nil
}

// ResetPrefix resets all changes to the "prefix" field.
func (m *BackupProfileMutation) ResetPrefix() {
	m.prefix = nil
}

// SetDirectories sets the "directories" field.
func (m *BackupProfileMutation) SetDirectories(s []string) {
	m.directories = &s
	m.appenddirectories = nil
}

// Directories returns the value of the "directories" field in the mutation.
func (m *BackupProfileMutation) Directories() (r []string, exists bool) {
	v := m.directories
	if v == nil {
		return
	}
	return *v, true
}

// OldDirectories returns the old "directories" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldDirectories(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDirectories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDirectories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirectories: %w", err)
	}
	return oldValue.Directories, nil
}

// AppendDirectories adds s to the "directories" field.
func (m *BackupProfileMutation) AppendDirectories(s []string) {
	m.appenddirectories = append(m.appenddirectories, s...)
}

// AppendedDirectories returns the list of values that were appended to the "directories" field in this mutation.
func (m *BackupProfileMutation) AppendedDirectories() ([]string, bool) {
	if len(m.appenddirectories) == 0 {
		return nil, false
	}
	return m.appenddirectories, true
}

// ResetDirectories resets all changes to the "directories" field.
func (m *BackupProfileMutation) ResetDirectories() {
	m.directories = nil
	m.appenddirectories = nil
}

// SetHasPeriodicBackups sets the "hasPeriodicBackups" field.
func (m *BackupProfileMutation) SetHasPeriodicBackups(b bool) {
	m.hasPeriodicBackups = &b
}

// HasPeriodicBackups returns the value of the "hasPeriodicBackups" field in the mutation.
func (m *BackupProfileMutation) HasPeriodicBackups() (r bool, exists bool) {
	v := m.hasPeriodicBackups
	if v == nil {
		return
	}
	return *v, true
}

// OldHasPeriodicBackups returns the old "hasPeriodicBackups" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldHasPeriodicBackups(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasPeriodicBackups is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasPeriodicBackups requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasPeriodicBackups: %w", err)
	}
	return oldValue.HasPeriodicBackups, nil
}

// ResetHasPeriodicBackups resets all changes to the "hasPeriodicBackups" field.
func (m *BackupProfileMutation) ResetHasPeriodicBackups() {
	m.hasPeriodicBackups = nil
}

// SetPeriodicBackupTime sets the "periodicBackupTime" field.
func (m *BackupProfileMutation) SetPeriodicBackupTime(t time.Time) {
	m.periodicBackupTime = &t
}

// PeriodicBackupTime returns the value of the "periodicBackupTime" field in the mutation.
func (m *BackupProfileMutation) PeriodicBackupTime() (r time.Time, exists bool) {
	v := m.periodicBackupTime
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodicBackupTime returns the old "periodicBackupTime" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldPeriodicBackupTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodicBackupTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodicBackupTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodicBackupTime: %w", err)
	}
	return oldValue.PeriodicBackupTime, nil
}

// ClearPeriodicBackupTime clears the value of the "periodicBackupTime" field.
func (m *BackupProfileMutation) ClearPeriodicBackupTime() {
	m.periodicBackupTime = nil
	m.clearedFields[backupprofile.FieldPeriodicBackupTime] = struct{}{}
}

// PeriodicBackupTimeCleared returns if the "periodicBackupTime" field was cleared in this mutation.
func (m *BackupProfileMutation) PeriodicBackupTimeCleared() bool {
	_, ok := m.clearedFields[backupprofile.FieldPeriodicBackupTime]
	return ok
}

// ResetPeriodicBackupTime resets all changes to the "periodicBackupTime" field.
func (m *BackupProfileMutation) ResetPeriodicBackupTime() {
	m.periodicBackupTime = nil
	delete(m.clearedFields, backupprofile.FieldPeriodicBackupTime)
}

// SetIsSetupComplete sets the "isSetupComplete" field.
func (m *BackupProfileMutation) SetIsSetupComplete(b bool) {
	m.isSetupComplete = &b
}

// IsSetupComplete returns the value of the "isSetupComplete" field in the mutation.
func (m *BackupProfileMutation) IsSetupComplete() (r bool, exists bool) {
	v := m.isSetupComplete
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSetupComplete returns the old "isSetupComplete" field's value of the BackupProfile entity.
// If the BackupProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BackupProfileMutation) OldIsSetupComplete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSetupComplete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSetupComplete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSetupComplete: %w", err)
	}
	return oldValue.IsSetupComplete, nil
}

// ResetIsSetupComplete resets all changes to the "isSetupComplete" field.
func (m *BackupProfileMutation) ResetIsSetupComplete() {
	m.isSetupComplete = nil
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by ids.
func (m *BackupProfileMutation) AddRepositoryIDs(ids ...int) {
	if m.repositories == nil {
		m.repositories = make(map[int]struct{})
	}
	for i := range ids {
		m.repositories[ids[i]] = struct{}{}
	}
}

// ClearRepositories clears the "repositories" edge to the Repository entity.
func (m *BackupProfileMutation) ClearRepositories() {
	m.clearedrepositories = true
}

// RepositoriesCleared reports if the "repositories" edge to the Repository entity was cleared.
func (m *BackupProfileMutation) RepositoriesCleared() bool {
	return m.clearedrepositories
}

// RemoveRepositoryIDs removes the "repositories" edge to the Repository entity by IDs.
func (m *BackupProfileMutation) RemoveRepositoryIDs(ids ...int) {
	if m.removedrepositories == nil {
		m.removedrepositories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.repositories, ids[i])
		m.removedrepositories[ids[i]] = struct{}{}
	}
}

// RemovedRepositories returns the removed IDs of the "repositories" edge to the Repository entity.
func (m *BackupProfileMutation) RemovedRepositoriesIDs() (ids []int) {
	for id := range m.removedrepositories {
		ids = append(ids, id)
	}
	return
}

// RepositoriesIDs returns the "repositories" edge IDs in the mutation.
func (m *BackupProfileMutation) RepositoriesIDs() (ids []int) {
	for id := range m.repositories {
		ids = append(ids, id)
	}
	return
}

// ResetRepositories resets all changes to the "repositories" edge.
func (m *BackupProfileMutation) ResetRepositories() {
	m.repositories = nil
	m.clearedrepositories = false
	m.removedrepositories = nil
}

// Where appends a list predicates to the BackupProfileMutation builder.
func (m *BackupProfileMutation) Where(ps ...predicate.BackupProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BackupProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BackupProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BackupProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BackupProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BackupProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BackupProfile).
func (m *BackupProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BackupProfileMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, backupprofile.FieldName)
	}
	if m.prefix != nil {
		fields = append(fields, backupprofile.FieldPrefix)
	}
	if m.directories != nil {
		fields = append(fields, backupprofile.FieldDirectories)
	}
	if m.hasPeriodicBackups != nil {
		fields = append(fields, backupprofile.FieldHasPeriodicBackups)
	}
	if m.periodicBackupTime != nil {
		fields = append(fields, backupprofile.FieldPeriodicBackupTime)
	}
	if m.isSetupComplete != nil {
		fields = append(fields, backupprofile.FieldIsSetupComplete)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BackupProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case backupprofile.FieldName:
		return m.Name()
	case backupprofile.FieldPrefix:
		return m.Prefix()
	case backupprofile.FieldDirectories:
		return m.Directories()
	case backupprofile.FieldHasPeriodicBackups:
		return m.HasPeriodicBackups()
	case backupprofile.FieldPeriodicBackupTime:
		return m.PeriodicBackupTime()
	case backupprofile.FieldIsSetupComplete:
		return m.IsSetupComplete()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BackupProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case backupprofile.FieldName:
		return m.OldName(ctx)
	case backupprofile.FieldPrefix:
		return m.OldPrefix(ctx)
	case backupprofile.FieldDirectories:
		return m.OldDirectories(ctx)
	case backupprofile.FieldHasPeriodicBackups:
		return m.OldHasPeriodicBackups(ctx)
	case backupprofile.FieldPeriodicBackupTime:
		return m.OldPeriodicBackupTime(ctx)
	case backupprofile.FieldIsSetupComplete:
		return m.OldIsSetupComplete(ctx)
	}
	return nil, fmt.Errorf("unknown BackupProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BackupProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case backupprofile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case backupprofile.FieldPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefix(v)
		return nil
	case backupprofile.FieldDirectories:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirectories(v)
		return nil
	case backupprofile.FieldHasPeriodicBackups:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasPeriodicBackups(v)
		return nil
	case backupprofile.FieldPeriodicBackupTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodicBackupTime(v)
		return nil
	case backupprofile.FieldIsSetupComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSetupComplete(v)
		return nil
	}
	return fmt.Errorf("unknown BackupProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BackupProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BackupProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BackupProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BackupProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BackupProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(backupprofile.FieldPeriodicBackupTime) {
		fields = append(fields, backupprofile.FieldPeriodicBackupTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BackupProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BackupProfileMutation) ClearField(name string) error {
	switch name {
	case backupprofile.FieldPeriodicBackupTime:
		m.ClearPeriodicBackupTime()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BackupProfileMutation) ResetField(name string) error {
	switch name {
	case backupprofile.FieldName:
		m.ResetName()
		return nil
	case backupprofile.FieldPrefix:
		m.ResetPrefix()
		return nil
	case backupprofile.FieldDirectories:
		m.ResetDirectories()
		return nil
	case backupprofile.FieldHasPeriodicBackups:
		m.ResetHasPeriodicBackups()
		return nil
	case backupprofile.FieldPeriodicBackupTime:
		m.ResetPeriodicBackupTime()
		return nil
	case backupprofile.FieldIsSetupComplete:
		m.ResetIsSetupComplete()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BackupProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repositories != nil {
		edges = append(edges, backupprofile.EdgeRepositories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BackupProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case backupprofile.EdgeRepositories:
		ids := make([]ent.Value, 0, len(m.repositories))
		for id := range m.repositories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BackupProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrepositories != nil {
		edges = append(edges, backupprofile.EdgeRepositories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BackupProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case backupprofile.EdgeRepositories:
		ids := make([]ent.Value, 0, len(m.removedrepositories))
		for id := range m.removedrepositories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BackupProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrepositories {
		edges = append(edges, backupprofile.EdgeRepositories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BackupProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case backupprofile.EdgeRepositories:
		return m.clearedrepositories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BackupProfileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown BackupProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BackupProfileMutation) ResetEdge(name string) error {
	switch name {
	case backupprofile.EdgeRepositories:
		m.ResetRepositories()
		return nil
	}
	return fmt.Errorf("unknown BackupProfile edge %s", name)
}

// RepositoryMutation represents an operation that mutates the Repository nodes in the graph.
type RepositoryMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	url                   *string
	password              *string
	clearedFields         map[string]struct{}
	backupprofiles        map[int]struct{}
	removedbackupprofiles map[int]struct{}
	clearedbackupprofiles bool
	archives              map[int]struct{}
	removedarchives       map[int]struct{}
	clearedarchives       bool
	done                  bool
	oldValue              func(context.Context) (*Repository, error)
	predicates            []predicate.Repository
}

var _ ent.Mutation = (*RepositoryMutation)(nil)

// repositoryOption allows management of the mutation configuration using functional options.
type repositoryOption func(*RepositoryMutation)

// newRepositoryMutation creates new mutation for the Repository entity.
func newRepositoryMutation(c config, op Op, opts ...repositoryOption) *RepositoryMutation {
	m := &RepositoryMutation{
		config:        c,
		op:            op,
		typ:           TypeRepository,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepositoryID sets the ID field of the mutation.
func withRepositoryID(id int) repositoryOption {
	return func(m *RepositoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Repository
		)
		m.oldValue = func(ctx context.Context) (*Repository, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repository.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepository sets the old Repository of the mutation.
func withRepository(node *Repository) repositoryOption {
	return func(m *RepositoryMutation) {
		m.oldValue = func(context.Context) (*Repository, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepositoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepositoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Repository entities.
func (m *RepositoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepositoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RepositoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Repository.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RepositoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepositoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepositoryMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *RepositoryMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *RepositoryMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *RepositoryMutation) ResetURL() {
	m.url = nil
}

// SetPassword sets the "password" field.
func (m *RepositoryMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *RepositoryMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *RepositoryMutation) ResetPassword() {
	m.password = nil
}

// AddBackupprofileIDs adds the "backupprofiles" edge to the BackupProfile entity by ids.
func (m *RepositoryMutation) AddBackupprofileIDs(ids ...int) {
	if m.backupprofiles == nil {
		m.backupprofiles = make(map[int]struct{})
	}
	for i := range ids {
		m.backupprofiles[ids[i]] = struct{}{}
	}
}

// ClearBackupprofiles clears the "backupprofiles" edge to the BackupProfile entity.
func (m *RepositoryMutation) ClearBackupprofiles() {
	m.clearedbackupprofiles = true
}

// BackupprofilesCleared reports if the "backupprofiles" edge to the BackupProfile entity was cleared.
func (m *RepositoryMutation) BackupprofilesCleared() bool {
	return m.clearedbackupprofiles
}

// RemoveBackupprofileIDs removes the "backupprofiles" edge to the BackupProfile entity by IDs.
func (m *RepositoryMutation) RemoveBackupprofileIDs(ids ...int) {
	if m.removedbackupprofiles == nil {
		m.removedbackupprofiles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.backupprofiles, ids[i])
		m.removedbackupprofiles[ids[i]] = struct{}{}
	}
}

// RemovedBackupprofiles returns the removed IDs of the "backupprofiles" edge to the BackupProfile entity.
func (m *RepositoryMutation) RemovedBackupprofilesIDs() (ids []int) {
	for id := range m.removedbackupprofiles {
		ids = append(ids, id)
	}
	return
}

// BackupprofilesIDs returns the "backupprofiles" edge IDs in the mutation.
func (m *RepositoryMutation) BackupprofilesIDs() (ids []int) {
	for id := range m.backupprofiles {
		ids = append(ids, id)
	}
	return
}

// ResetBackupprofiles resets all changes to the "backupprofiles" edge.
func (m *RepositoryMutation) ResetBackupprofiles() {
	m.backupprofiles = nil
	m.clearedbackupprofiles = false
	m.removedbackupprofiles = nil
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by ids.
func (m *RepositoryMutation) AddArchiveIDs(ids ...int) {
	if m.archives == nil {
		m.archives = make(map[int]struct{})
	}
	for i := range ids {
		m.archives[ids[i]] = struct{}{}
	}
}

// ClearArchives clears the "archives" edge to the Archive entity.
func (m *RepositoryMutation) ClearArchives() {
	m.clearedarchives = true
}

// ArchivesCleared reports if the "archives" edge to the Archive entity was cleared.
func (m *RepositoryMutation) ArchivesCleared() bool {
	return m.clearedarchives
}

// RemoveArchiveIDs removes the "archives" edge to the Archive entity by IDs.
func (m *RepositoryMutation) RemoveArchiveIDs(ids ...int) {
	if m.removedarchives == nil {
		m.removedarchives = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.archives, ids[i])
		m.removedarchives[ids[i]] = struct{}{}
	}
}

// RemovedArchives returns the removed IDs of the "archives" edge to the Archive entity.
func (m *RepositoryMutation) RemovedArchivesIDs() (ids []int) {
	for id := range m.removedarchives {
		ids = append(ids, id)
	}
	return
}

// ArchivesIDs returns the "archives" edge IDs in the mutation.
func (m *RepositoryMutation) ArchivesIDs() (ids []int) {
	for id := range m.archives {
		ids = append(ids, id)
	}
	return
}

// ResetArchives resets all changes to the "archives" edge.
func (m *RepositoryMutation) ResetArchives() {
	m.archives = nil
	m.clearedarchives = false
	m.removedarchives = nil
}

// Where appends a list predicates to the RepositoryMutation builder.
func (m *RepositoryMutation) Where(ps ...predicate.Repository) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RepositoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RepositoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Repository, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RepositoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RepositoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Repository).
func (m *RepositoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepositoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, repository.FieldName)
	}
	if m.url != nil {
		fields = append(fields, repository.FieldURL)
	}
	if m.password != nil {
		fields = append(fields, repository.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepositoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repository.FieldName:
		return m.Name()
	case repository.FieldURL:
		return m.URL()
	case repository.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepositoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repository.FieldName:
		return m.OldName(ctx)
	case repository.FieldURL:
		return m.OldURL(ctx)
	case repository.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Repository field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repository.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case repository.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case repository.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepositoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepositoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Repository numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepositoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepositoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepositoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Repository nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepositoryMutation) ResetField(name string) error {
	switch name {
	case repository.FieldName:
		m.ResetName()
		return nil
	case repository.FieldURL:
		m.ResetURL()
		return nil
	case repository.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepositoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.backupprofiles != nil {
		edges = append(edges, repository.EdgeBackupprofiles)
	}
	if m.archives != nil {
		edges = append(edges, repository.EdgeArchives)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepositoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeBackupprofiles:
		ids := make([]ent.Value, 0, len(m.backupprofiles))
		for id := range m.backupprofiles {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeArchives:
		ids := make([]ent.Value, 0, len(m.archives))
		for id := range m.archives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepositoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedbackupprofiles != nil {
		edges = append(edges, repository.EdgeBackupprofiles)
	}
	if m.removedarchives != nil {
		edges = append(edges, repository.EdgeArchives)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepositoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeBackupprofiles:
		ids := make([]ent.Value, 0, len(m.removedbackupprofiles))
		for id := range m.removedbackupprofiles {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeArchives:
		ids := make([]ent.Value, 0, len(m.removedarchives))
		for id := range m.removedarchives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepositoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbackupprofiles {
		edges = append(edges, repository.EdgeBackupprofiles)
	}
	if m.clearedarchives {
		edges = append(edges, repository.EdgeArchives)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepositoryMutation) EdgeCleared(name string) bool {
	switch name {
	case repository.EdgeBackupprofiles:
		return m.clearedbackupprofiles
	case repository.EdgeArchives:
		return m.clearedarchives
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepositoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Repository unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepositoryMutation) ResetEdge(name string) error {
	switch name {
	case repository.EdgeBackupprofiles:
		m.ResetBackupprofiles()
		return nil
	case repository.EdgeArchives:
		m.ResetArchives()
		return nil
	}
	return fmt.Errorf("unknown Repository edge %s", name)
}
