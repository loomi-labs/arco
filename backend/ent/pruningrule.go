// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/pruningrule"
)

// PruningRule is the model entity for the PruningRule schema.
type PruningRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// IsEnabled holds the value of the "is_enabled" field.
	IsEnabled bool `json:"isEnabled"`
	// KeepHourly holds the value of the "keep_hourly" field.
	KeepHourly int `json:"keepHourly"`
	// KeepDaily holds the value of the "keep_daily" field.
	KeepDaily int `json:"keepDaily"`
	// KeepWeekly holds the value of the "keep_weekly" field.
	KeepWeekly int `json:"keepWeekly"`
	// KeepMonthly holds the value of the "keep_monthly" field.
	KeepMonthly int `json:"keepMonthly"`
	// KeepYearly holds the value of the "keep_yearly" field.
	KeepYearly int `json:"keepYearly"`
	// KeepWithinDays holds the value of the "keep_within_days" field.
	KeepWithinDays int `json:"keepWithinDays"`
	// NextRun holds the value of the "next_run" field.
	NextRun time.Time `json:"nextRun"`
	// LastRun holds the value of the "last_run" field.
	LastRun *time.Time `json:"lastRun"`
	// LastRunStatus holds the value of the "last_run_status" field.
	LastRunStatus *string `json:"lastRunStatus"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PruningRuleQuery when eager-loading is set.
	Edges                       PruningRuleEdges `json:"edges"`
	backup_profile_pruning_rule *int
	selectValues                sql.SelectValues
}

// PruningRuleEdges holds the relations/edges for other nodes in the graph.
type PruningRuleEdges struct {
	// BackupProfile holds the value of the backup_profile edge.
	BackupProfile *BackupProfile `json:"backupProfile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackupProfileOrErr returns the BackupProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PruningRuleEdges) BackupProfileOrErr() (*BackupProfile, error) {
	if e.BackupProfile != nil {
		return e.BackupProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: backupprofile.Label}
	}
	return nil, &NotLoadedError{edge: "backup_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PruningRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pruningrule.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case pruningrule.FieldID, pruningrule.FieldKeepHourly, pruningrule.FieldKeepDaily, pruningrule.FieldKeepWeekly, pruningrule.FieldKeepMonthly, pruningrule.FieldKeepYearly, pruningrule.FieldKeepWithinDays:
			values[i] = new(sql.NullInt64)
		case pruningrule.FieldLastRunStatus:
			values[i] = new(sql.NullString)
		case pruningrule.FieldCreatedAt, pruningrule.FieldUpdatedAt, pruningrule.FieldNextRun, pruningrule.FieldLastRun:
			values[i] = new(sql.NullTime)
		case pruningrule.ForeignKeys[0]: // backup_profile_pruning_rule
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PruningRule fields.
func (pr *PruningRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pruningrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case pruningrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case pruningrule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case pruningrule.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				pr.IsEnabled = value.Bool
			}
		case pruningrule.FieldKeepHourly:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keep_hourly", values[i])
			} else if value.Valid {
				pr.KeepHourly = int(value.Int64)
			}
		case pruningrule.FieldKeepDaily:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keep_daily", values[i])
			} else if value.Valid {
				pr.KeepDaily = int(value.Int64)
			}
		case pruningrule.FieldKeepWeekly:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keep_weekly", values[i])
			} else if value.Valid {
				pr.KeepWeekly = int(value.Int64)
			}
		case pruningrule.FieldKeepMonthly:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keep_monthly", values[i])
			} else if value.Valid {
				pr.KeepMonthly = int(value.Int64)
			}
		case pruningrule.FieldKeepYearly:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keep_yearly", values[i])
			} else if value.Valid {
				pr.KeepYearly = int(value.Int64)
			}
		case pruningrule.FieldKeepWithinDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keep_within_days", values[i])
			} else if value.Valid {
				pr.KeepWithinDays = int(value.Int64)
			}
		case pruningrule.FieldNextRun:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_run", values[i])
			} else if value.Valid {
				pr.NextRun = value.Time
			}
		case pruningrule.FieldLastRun:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run", values[i])
			} else if value.Valid {
				pr.LastRun = new(time.Time)
				*pr.LastRun = value.Time
			}
		case pruningrule.FieldLastRunStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_status", values[i])
			} else if value.Valid {
				pr.LastRunStatus = new(string)
				*pr.LastRunStatus = value.String
			}
		case pruningrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field backup_profile_pruning_rule", value)
			} else if value.Valid {
				pr.backup_profile_pruning_rule = new(int)
				*pr.backup_profile_pruning_rule = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PruningRule.
// This includes values selected through modifiers, order, etc.
func (pr *PruningRule) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryBackupProfile queries the "backup_profile" edge of the PruningRule entity.
func (pr *PruningRule) QueryBackupProfile() *BackupProfileQuery {
	return NewPruningRuleClient(pr.config).QueryBackupProfile(pr)
}

// Update returns a builder for updating this PruningRule.
// Note that you need to call PruningRule.Unwrap() before calling this method if this PruningRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PruningRule) Update() *PruningRuleUpdateOne {
	return NewPruningRuleClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PruningRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PruningRule) Unwrap() *PruningRule {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PruningRule is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PruningRule) String() string {
	var builder strings.Builder
	builder.WriteString("PruningRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsEnabled))
	builder.WriteString(", ")
	builder.WriteString("keep_hourly=")
	builder.WriteString(fmt.Sprintf("%v", pr.KeepHourly))
	builder.WriteString(", ")
	builder.WriteString("keep_daily=")
	builder.WriteString(fmt.Sprintf("%v", pr.KeepDaily))
	builder.WriteString(", ")
	builder.WriteString("keep_weekly=")
	builder.WriteString(fmt.Sprintf("%v", pr.KeepWeekly))
	builder.WriteString(", ")
	builder.WriteString("keep_monthly=")
	builder.WriteString(fmt.Sprintf("%v", pr.KeepMonthly))
	builder.WriteString(", ")
	builder.WriteString("keep_yearly=")
	builder.WriteString(fmt.Sprintf("%v", pr.KeepYearly))
	builder.WriteString(", ")
	builder.WriteString("keep_within_days=")
	builder.WriteString(fmt.Sprintf("%v", pr.KeepWithinDays))
	builder.WriteString(", ")
	builder.WriteString("next_run=")
	builder.WriteString(pr.NextRun.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.LastRun; v != nil {
		builder.WriteString("last_run=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.LastRunStatus; v != nil {
		builder.WriteString("last_run_status=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// PruningRules is a parsable slice of PruningRule.
type PruningRules []*PruningRule
