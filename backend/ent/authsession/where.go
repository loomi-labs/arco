// Code generated by ent, DO NOT EDIT.

package authsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserEmail applies equality check predicate on the "user_email" field. It's identical to UserEmailEQ.
func UserEmail(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldUserEmail, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserEmailEQ applies the EQ predicate on the "user_email" field.
func UserEmailEQ(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldUserEmail, v))
}

// UserEmailNEQ applies the NEQ predicate on the "user_email" field.
func UserEmailNEQ(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNEQ(FieldUserEmail, v))
}

// UserEmailIn applies the In predicate on the "user_email" field.
func UserEmailIn(vs ...string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldIn(FieldUserEmail, vs...))
}

// UserEmailNotIn applies the NotIn predicate on the "user_email" field.
func UserEmailNotIn(vs ...string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNotIn(FieldUserEmail, vs...))
}

// UserEmailGT applies the GT predicate on the "user_email" field.
func UserEmailGT(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGT(FieldUserEmail, v))
}

// UserEmailGTE applies the GTE predicate on the "user_email" field.
func UserEmailGTE(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGTE(FieldUserEmail, v))
}

// UserEmailLT applies the LT predicate on the "user_email" field.
func UserEmailLT(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLT(FieldUserEmail, v))
}

// UserEmailLTE applies the LTE predicate on the "user_email" field.
func UserEmailLTE(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLTE(FieldUserEmail, v))
}

// UserEmailContains applies the Contains predicate on the "user_email" field.
func UserEmailContains(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldContains(FieldUserEmail, v))
}

// UserEmailHasPrefix applies the HasPrefix predicate on the "user_email" field.
func UserEmailHasPrefix(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldHasPrefix(FieldUserEmail, v))
}

// UserEmailHasSuffix applies the HasSuffix predicate on the "user_email" field.
func UserEmailHasSuffix(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldHasSuffix(FieldUserEmail, v))
}

// UserEmailEqualFold applies the EqualFold predicate on the "user_email" field.
func UserEmailEqualFold(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEqualFold(FieldUserEmail, v))
}

// UserEmailContainsFold applies the ContainsFold predicate on the "user_email" field.
func UserEmailContainsFold(v string) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldContainsFold(FieldUserEmail, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNotIn(FieldStatus, vs...))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.AuthSession {
	return predicate.AuthSession(sql.FieldLTE(FieldExpiresAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthSession) predicate.AuthSession {
	return predicate.AuthSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthSession) predicate.AuthSession {
	return predicate.AuthSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthSession) predicate.AuthSession {
	return predicate.AuthSession(sql.NotPredicates(p))
}
