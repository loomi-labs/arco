// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arco/backend/ent/backupprofile"
	"arco/backend/ent/failedbackuprun"
	"arco/backend/ent/repository"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FailedBackupRunCreate is the builder for creating a FailedBackupRun entity.
type FailedBackupRunCreate struct {
	config
	mutation *FailedBackupRunMutation
	hooks    []Hook
}

// SetError sets the "error" field.
func (fbrc *FailedBackupRunCreate) SetError(s string) *FailedBackupRunCreate {
	fbrc.mutation.SetError(s)
	return fbrc
}

// SetBackupProfileID sets the "backup_profile" edge to the BackupProfile entity by ID.
func (fbrc *FailedBackupRunCreate) SetBackupProfileID(id int) *FailedBackupRunCreate {
	fbrc.mutation.SetBackupProfileID(id)
	return fbrc
}

// SetBackupProfile sets the "backup_profile" edge to the BackupProfile entity.
func (fbrc *FailedBackupRunCreate) SetBackupProfile(b *BackupProfile) *FailedBackupRunCreate {
	return fbrc.SetBackupProfileID(b.ID)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (fbrc *FailedBackupRunCreate) SetRepositoryID(id int) *FailedBackupRunCreate {
	fbrc.mutation.SetRepositoryID(id)
	return fbrc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (fbrc *FailedBackupRunCreate) SetRepository(r *Repository) *FailedBackupRunCreate {
	return fbrc.SetRepositoryID(r.ID)
}

// Mutation returns the FailedBackupRunMutation object of the builder.
func (fbrc *FailedBackupRunCreate) Mutation() *FailedBackupRunMutation {
	return fbrc.mutation
}

// Save creates the FailedBackupRun in the database.
func (fbrc *FailedBackupRunCreate) Save(ctx context.Context) (*FailedBackupRun, error) {
	return withHooks(ctx, fbrc.sqlSave, fbrc.mutation, fbrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fbrc *FailedBackupRunCreate) SaveX(ctx context.Context) *FailedBackupRun {
	v, err := fbrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fbrc *FailedBackupRunCreate) Exec(ctx context.Context) error {
	_, err := fbrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fbrc *FailedBackupRunCreate) ExecX(ctx context.Context) {
	if err := fbrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fbrc *FailedBackupRunCreate) check() error {
	if _, ok := fbrc.mutation.Error(); !ok {
		return &ValidationError{Name: "error", err: errors.New(`ent: missing required field "FailedBackupRun.error"`)}
	}
	if len(fbrc.mutation.BackupProfileIDs()) == 0 {
		return &ValidationError{Name: "backup_profile", err: errors.New(`ent: missing required edge "FailedBackupRun.backup_profile"`)}
	}
	if len(fbrc.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "FailedBackupRun.repository"`)}
	}
	return nil
}

func (fbrc *FailedBackupRunCreate) sqlSave(ctx context.Context) (*FailedBackupRun, error) {
	if err := fbrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fbrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fbrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fbrc.mutation.id = &_node.ID
	fbrc.mutation.done = true
	return _node, nil
}

func (fbrc *FailedBackupRunCreate) createSpec() (*FailedBackupRun, *sqlgraph.CreateSpec) {
	var (
		_node = &FailedBackupRun{config: fbrc.config}
		_spec = sqlgraph.NewCreateSpec(failedbackuprun.Table, sqlgraph.NewFieldSpec(failedbackuprun.FieldID, field.TypeInt))
	)
	if value, ok := fbrc.mutation.Error(); ok {
		_spec.SetField(failedbackuprun.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if nodes := fbrc.mutation.BackupProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   failedbackuprun.BackupProfileTable,
			Columns: []string{failedbackuprun.BackupProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.failed_backup_run_backup_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fbrc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   failedbackuprun.RepositoryTable,
			Columns: []string{failedbackuprun.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.failed_backup_run_repository = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FailedBackupRunCreateBulk is the builder for creating many FailedBackupRun entities in bulk.
type FailedBackupRunCreateBulk struct {
	config
	err      error
	builders []*FailedBackupRunCreate
}

// Save creates the FailedBackupRun entities in the database.
func (fbrcb *FailedBackupRunCreateBulk) Save(ctx context.Context) ([]*FailedBackupRun, error) {
	if fbrcb.err != nil {
		return nil, fbrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fbrcb.builders))
	nodes := make([]*FailedBackupRun, len(fbrcb.builders))
	mutators := make([]Mutator, len(fbrcb.builders))
	for i := range fbrcb.builders {
		func(i int, root context.Context) {
			builder := fbrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FailedBackupRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fbrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fbrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fbrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fbrcb *FailedBackupRunCreateBulk) SaveX(ctx context.Context) []*FailedBackupRun {
	v, err := fbrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fbrcb *FailedBackupRunCreateBulk) Exec(ctx context.Context) error {
	_, err := fbrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fbrcb *FailedBackupRunCreateBulk) ExecX(ctx context.Context) {
	if err := fbrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
