// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/cloudrepository"
	"github.com/loomi-labs/arco/backend/ent/notification"
	"github.com/loomi-labs/arco/backend/ent/predicate"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks     []Hook
	mutation  *RepositoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (_u *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RepositoryUpdate) SetUpdatedAt(v time.Time) *RepositoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *RepositoryUpdate) SetName(v string) *RepositoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableName(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *RepositoryUpdate) SetURL(v string) *RepositoryUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableURL(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *RepositoryUpdate) SetPassword(v string) *RepositoryUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillablePassword(v *string) *RepositoryUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetNextIntegrityCheck sets the "next_integrity_check" field.
func (_u *RepositoryUpdate) SetNextIntegrityCheck(v time.Time) *RepositoryUpdate {
	_u.mutation.SetNextIntegrityCheck(v)
	return _u
}

// SetNillableNextIntegrityCheck sets the "next_integrity_check" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableNextIntegrityCheck(v *time.Time) *RepositoryUpdate {
	if v != nil {
		_u.SetNextIntegrityCheck(*v)
	}
	return _u
}

// ClearNextIntegrityCheck clears the value of the "next_integrity_check" field.
func (_u *RepositoryUpdate) ClearNextIntegrityCheck() *RepositoryUpdate {
	_u.mutation.ClearNextIntegrityCheck()
	return _u
}

// SetStatsTotalChunks sets the "stats_total_chunks" field.
func (_u *RepositoryUpdate) SetStatsTotalChunks(v int) *RepositoryUpdate {
	_u.mutation.ResetStatsTotalChunks()
	_u.mutation.SetStatsTotalChunks(v)
	return _u
}

// SetNillableStatsTotalChunks sets the "stats_total_chunks" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableStatsTotalChunks(v *int) *RepositoryUpdate {
	if v != nil {
		_u.SetStatsTotalChunks(*v)
	}
	return _u
}

// AddStatsTotalChunks adds value to the "stats_total_chunks" field.
func (_u *RepositoryUpdate) AddStatsTotalChunks(v int) *RepositoryUpdate {
	_u.mutation.AddStatsTotalChunks(v)
	return _u
}

// SetStatsTotalSize sets the "stats_total_size" field.
func (_u *RepositoryUpdate) SetStatsTotalSize(v int) *RepositoryUpdate {
	_u.mutation.ResetStatsTotalSize()
	_u.mutation.SetStatsTotalSize(v)
	return _u
}

// SetNillableStatsTotalSize sets the "stats_total_size" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableStatsTotalSize(v *int) *RepositoryUpdate {
	if v != nil {
		_u.SetStatsTotalSize(*v)
	}
	return _u
}

// AddStatsTotalSize adds value to the "stats_total_size" field.
func (_u *RepositoryUpdate) AddStatsTotalSize(v int) *RepositoryUpdate {
	_u.mutation.AddStatsTotalSize(v)
	return _u
}

// SetStatsTotalCsize sets the "stats_total_csize" field.
func (_u *RepositoryUpdate) SetStatsTotalCsize(v int) *RepositoryUpdate {
	_u.mutation.ResetStatsTotalCsize()
	_u.mutation.SetStatsTotalCsize(v)
	return _u
}

// SetNillableStatsTotalCsize sets the "stats_total_csize" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableStatsTotalCsize(v *int) *RepositoryUpdate {
	if v != nil {
		_u.SetStatsTotalCsize(*v)
	}
	return _u
}

// AddStatsTotalCsize adds value to the "stats_total_csize" field.
func (_u *RepositoryUpdate) AddStatsTotalCsize(v int) *RepositoryUpdate {
	_u.mutation.AddStatsTotalCsize(v)
	return _u
}

// SetStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field.
func (_u *RepositoryUpdate) SetStatsTotalUniqueChunks(v int) *RepositoryUpdate {
	_u.mutation.ResetStatsTotalUniqueChunks()
	_u.mutation.SetStatsTotalUniqueChunks(v)
	return _u
}

// SetNillableStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableStatsTotalUniqueChunks(v *int) *RepositoryUpdate {
	if v != nil {
		_u.SetStatsTotalUniqueChunks(*v)
	}
	return _u
}

// AddStatsTotalUniqueChunks adds value to the "stats_total_unique_chunks" field.
func (_u *RepositoryUpdate) AddStatsTotalUniqueChunks(v int) *RepositoryUpdate {
	_u.mutation.AddStatsTotalUniqueChunks(v)
	return _u
}

// SetStatsUniqueSize sets the "stats_unique_size" field.
func (_u *RepositoryUpdate) SetStatsUniqueSize(v int) *RepositoryUpdate {
	_u.mutation.ResetStatsUniqueSize()
	_u.mutation.SetStatsUniqueSize(v)
	return _u
}

// SetNillableStatsUniqueSize sets the "stats_unique_size" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableStatsUniqueSize(v *int) *RepositoryUpdate {
	if v != nil {
		_u.SetStatsUniqueSize(*v)
	}
	return _u
}

// AddStatsUniqueSize adds value to the "stats_unique_size" field.
func (_u *RepositoryUpdate) AddStatsUniqueSize(v int) *RepositoryUpdate {
	_u.mutation.AddStatsUniqueSize(v)
	return _u
}

// SetStatsUniqueCsize sets the "stats_unique_csize" field.
func (_u *RepositoryUpdate) SetStatsUniqueCsize(v int) *RepositoryUpdate {
	_u.mutation.ResetStatsUniqueCsize()
	_u.mutation.SetStatsUniqueCsize(v)
	return _u
}

// SetNillableStatsUniqueCsize sets the "stats_unique_csize" field if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableStatsUniqueCsize(v *int) *RepositoryUpdate {
	if v != nil {
		_u.SetStatsUniqueCsize(*v)
	}
	return _u
}

// AddStatsUniqueCsize adds value to the "stats_unique_csize" field.
func (_u *RepositoryUpdate) AddStatsUniqueCsize(v int) *RepositoryUpdate {
	_u.mutation.AddStatsUniqueCsize(v)
	return _u
}

// AddBackupProfileIDs adds the "backup_profiles" edge to the BackupProfile entity by IDs.
func (_u *RepositoryUpdate) AddBackupProfileIDs(ids ...int) *RepositoryUpdate {
	_u.mutation.AddBackupProfileIDs(ids...)
	return _u
}

// AddBackupProfiles adds the "backup_profiles" edges to the BackupProfile entity.
func (_u *RepositoryUpdate) AddBackupProfiles(v ...*BackupProfile) *RepositoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBackupProfileIDs(ids...)
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by IDs.
func (_u *RepositoryUpdate) AddArchiveIDs(ids ...int) *RepositoryUpdate {
	_u.mutation.AddArchiveIDs(ids...)
	return _u
}

// AddArchives adds the "archives" edges to the Archive entity.
func (_u *RepositoryUpdate) AddArchives(v ...*Archive) *RepositoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddArchiveIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_u *RepositoryUpdate) AddNotificationIDs(ids ...int) *RepositoryUpdate {
	_u.mutation.AddNotificationIDs(ids...)
	return _u
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_u *RepositoryUpdate) AddNotifications(v ...*Notification) *RepositoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNotificationIDs(ids...)
}

// SetCloudRepositoryID sets the "cloud_repository" edge to the CloudRepository entity by ID.
func (_u *RepositoryUpdate) SetCloudRepositoryID(id int) *RepositoryUpdate {
	_u.mutation.SetCloudRepositoryID(id)
	return _u
}

// SetNillableCloudRepositoryID sets the "cloud_repository" edge to the CloudRepository entity by ID if the given value is not nil.
func (_u *RepositoryUpdate) SetNillableCloudRepositoryID(id *int) *RepositoryUpdate {
	if id != nil {
		_u = _u.SetCloudRepositoryID(*id)
	}
	return _u
}

// SetCloudRepository sets the "cloud_repository" edge to the CloudRepository entity.
func (_u *RepositoryUpdate) SetCloudRepository(v *CloudRepository) *RepositoryUpdate {
	return _u.SetCloudRepositoryID(v.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (_u *RepositoryUpdate) Mutation() *RepositoryMutation {
	return _u.mutation
}

// ClearBackupProfiles clears all "backup_profiles" edges to the BackupProfile entity.
func (_u *RepositoryUpdate) ClearBackupProfiles() *RepositoryUpdate {
	_u.mutation.ClearBackupProfiles()
	return _u
}

// RemoveBackupProfileIDs removes the "backup_profiles" edge to BackupProfile entities by IDs.
func (_u *RepositoryUpdate) RemoveBackupProfileIDs(ids ...int) *RepositoryUpdate {
	_u.mutation.RemoveBackupProfileIDs(ids...)
	return _u
}

// RemoveBackupProfiles removes "backup_profiles" edges to BackupProfile entities.
func (_u *RepositoryUpdate) RemoveBackupProfiles(v ...*BackupProfile) *RepositoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBackupProfileIDs(ids...)
}

// ClearArchives clears all "archives" edges to the Archive entity.
func (_u *RepositoryUpdate) ClearArchives() *RepositoryUpdate {
	_u.mutation.ClearArchives()
	return _u
}

// RemoveArchiveIDs removes the "archives" edge to Archive entities by IDs.
func (_u *RepositoryUpdate) RemoveArchiveIDs(ids ...int) *RepositoryUpdate {
	_u.mutation.RemoveArchiveIDs(ids...)
	return _u
}

// RemoveArchives removes "archives" edges to Archive entities.
func (_u *RepositoryUpdate) RemoveArchives(v ...*Archive) *RepositoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveArchiveIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (_u *RepositoryUpdate) ClearNotifications() *RepositoryUpdate {
	_u.mutation.ClearNotifications()
	return _u
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (_u *RepositoryUpdate) RemoveNotificationIDs(ids ...int) *RepositoryUpdate {
	_u.mutation.RemoveNotificationIDs(ids...)
	return _u
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (_u *RepositoryUpdate) RemoveNotifications(v ...*Notification) *RepositoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNotificationIDs(ids...)
}

// ClearCloudRepository clears the "cloud_repository" edge to the CloudRepository entity.
func (_u *RepositoryUpdate) ClearCloudRepository() *RepositoryUpdate {
	_u.mutation.ClearCloudRepository()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RepositoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := repository.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RepositoryUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := repository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repository.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RepositoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RepositoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RepositoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(repository.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.NextIntegrityCheck(); ok {
		_spec.SetField(repository.FieldNextIntegrityCheck, field.TypeTime, value)
	}
	if _u.mutation.NextIntegrityCheckCleared() {
		_spec.ClearField(repository.FieldNextIntegrityCheck, field.TypeTime)
	}
	if value, ok := _u.mutation.StatsTotalChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsTotalSize(); ok {
		_spec.SetField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalSize(); ok {
		_spec.AddField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsTotalCsize(); ok {
		_spec.SetField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalCsize(); ok {
		_spec.AddField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsTotalUniqueChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalUniqueChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsUniqueSize(); ok {
		_spec.SetField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsUniqueSize(); ok {
		_spec.AddField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsUniqueCsize(); ok {
		_spec.SetField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsUniqueCsize(); ok {
		_spec.AddField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if _u.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBackupProfilesIDs(); len(nodes) > 0 && !_u.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BackupProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedArchivesIDs(); len(nodes) > 0 && !_u.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArchivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !_u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CloudRepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   repository.CloudRepositoryTable,
			Columns: []string{repository.CloudRepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CloudRepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   repository.CloudRepositoryTable,
			Columns: []string{repository.CloudRepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RepositoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RepositoryUpdateOne) SetUpdatedAt(v time.Time) *RepositoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *RepositoryUpdateOne) SetName(v string) *RepositoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableName(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *RepositoryUpdateOne) SetURL(v string) *RepositoryUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableURL(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *RepositoryUpdateOne) SetPassword(v string) *RepositoryUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillablePassword(v *string) *RepositoryUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetNextIntegrityCheck sets the "next_integrity_check" field.
func (_u *RepositoryUpdateOne) SetNextIntegrityCheck(v time.Time) *RepositoryUpdateOne {
	_u.mutation.SetNextIntegrityCheck(v)
	return _u
}

// SetNillableNextIntegrityCheck sets the "next_integrity_check" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableNextIntegrityCheck(v *time.Time) *RepositoryUpdateOne {
	if v != nil {
		_u.SetNextIntegrityCheck(*v)
	}
	return _u
}

// ClearNextIntegrityCheck clears the value of the "next_integrity_check" field.
func (_u *RepositoryUpdateOne) ClearNextIntegrityCheck() *RepositoryUpdateOne {
	_u.mutation.ClearNextIntegrityCheck()
	return _u
}

// SetStatsTotalChunks sets the "stats_total_chunks" field.
func (_u *RepositoryUpdateOne) SetStatsTotalChunks(v int) *RepositoryUpdateOne {
	_u.mutation.ResetStatsTotalChunks()
	_u.mutation.SetStatsTotalChunks(v)
	return _u
}

// SetNillableStatsTotalChunks sets the "stats_total_chunks" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableStatsTotalChunks(v *int) *RepositoryUpdateOne {
	if v != nil {
		_u.SetStatsTotalChunks(*v)
	}
	return _u
}

// AddStatsTotalChunks adds value to the "stats_total_chunks" field.
func (_u *RepositoryUpdateOne) AddStatsTotalChunks(v int) *RepositoryUpdateOne {
	_u.mutation.AddStatsTotalChunks(v)
	return _u
}

// SetStatsTotalSize sets the "stats_total_size" field.
func (_u *RepositoryUpdateOne) SetStatsTotalSize(v int) *RepositoryUpdateOne {
	_u.mutation.ResetStatsTotalSize()
	_u.mutation.SetStatsTotalSize(v)
	return _u
}

// SetNillableStatsTotalSize sets the "stats_total_size" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableStatsTotalSize(v *int) *RepositoryUpdateOne {
	if v != nil {
		_u.SetStatsTotalSize(*v)
	}
	return _u
}

// AddStatsTotalSize adds value to the "stats_total_size" field.
func (_u *RepositoryUpdateOne) AddStatsTotalSize(v int) *RepositoryUpdateOne {
	_u.mutation.AddStatsTotalSize(v)
	return _u
}

// SetStatsTotalCsize sets the "stats_total_csize" field.
func (_u *RepositoryUpdateOne) SetStatsTotalCsize(v int) *RepositoryUpdateOne {
	_u.mutation.ResetStatsTotalCsize()
	_u.mutation.SetStatsTotalCsize(v)
	return _u
}

// SetNillableStatsTotalCsize sets the "stats_total_csize" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableStatsTotalCsize(v *int) *RepositoryUpdateOne {
	if v != nil {
		_u.SetStatsTotalCsize(*v)
	}
	return _u
}

// AddStatsTotalCsize adds value to the "stats_total_csize" field.
func (_u *RepositoryUpdateOne) AddStatsTotalCsize(v int) *RepositoryUpdateOne {
	_u.mutation.AddStatsTotalCsize(v)
	return _u
}

// SetStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field.
func (_u *RepositoryUpdateOne) SetStatsTotalUniqueChunks(v int) *RepositoryUpdateOne {
	_u.mutation.ResetStatsTotalUniqueChunks()
	_u.mutation.SetStatsTotalUniqueChunks(v)
	return _u
}

// SetNillableStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableStatsTotalUniqueChunks(v *int) *RepositoryUpdateOne {
	if v != nil {
		_u.SetStatsTotalUniqueChunks(*v)
	}
	return _u
}

// AddStatsTotalUniqueChunks adds value to the "stats_total_unique_chunks" field.
func (_u *RepositoryUpdateOne) AddStatsTotalUniqueChunks(v int) *RepositoryUpdateOne {
	_u.mutation.AddStatsTotalUniqueChunks(v)
	return _u
}

// SetStatsUniqueSize sets the "stats_unique_size" field.
func (_u *RepositoryUpdateOne) SetStatsUniqueSize(v int) *RepositoryUpdateOne {
	_u.mutation.ResetStatsUniqueSize()
	_u.mutation.SetStatsUniqueSize(v)
	return _u
}

// SetNillableStatsUniqueSize sets the "stats_unique_size" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableStatsUniqueSize(v *int) *RepositoryUpdateOne {
	if v != nil {
		_u.SetStatsUniqueSize(*v)
	}
	return _u
}

// AddStatsUniqueSize adds value to the "stats_unique_size" field.
func (_u *RepositoryUpdateOne) AddStatsUniqueSize(v int) *RepositoryUpdateOne {
	_u.mutation.AddStatsUniqueSize(v)
	return _u
}

// SetStatsUniqueCsize sets the "stats_unique_csize" field.
func (_u *RepositoryUpdateOne) SetStatsUniqueCsize(v int) *RepositoryUpdateOne {
	_u.mutation.ResetStatsUniqueCsize()
	_u.mutation.SetStatsUniqueCsize(v)
	return _u
}

// SetNillableStatsUniqueCsize sets the "stats_unique_csize" field if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableStatsUniqueCsize(v *int) *RepositoryUpdateOne {
	if v != nil {
		_u.SetStatsUniqueCsize(*v)
	}
	return _u
}

// AddStatsUniqueCsize adds value to the "stats_unique_csize" field.
func (_u *RepositoryUpdateOne) AddStatsUniqueCsize(v int) *RepositoryUpdateOne {
	_u.mutation.AddStatsUniqueCsize(v)
	return _u
}

// AddBackupProfileIDs adds the "backup_profiles" edge to the BackupProfile entity by IDs.
func (_u *RepositoryUpdateOne) AddBackupProfileIDs(ids ...int) *RepositoryUpdateOne {
	_u.mutation.AddBackupProfileIDs(ids...)
	return _u
}

// AddBackupProfiles adds the "backup_profiles" edges to the BackupProfile entity.
func (_u *RepositoryUpdateOne) AddBackupProfiles(v ...*BackupProfile) *RepositoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBackupProfileIDs(ids...)
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by IDs.
func (_u *RepositoryUpdateOne) AddArchiveIDs(ids ...int) *RepositoryUpdateOne {
	_u.mutation.AddArchiveIDs(ids...)
	return _u
}

// AddArchives adds the "archives" edges to the Archive entity.
func (_u *RepositoryUpdateOne) AddArchives(v ...*Archive) *RepositoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddArchiveIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_u *RepositoryUpdateOne) AddNotificationIDs(ids ...int) *RepositoryUpdateOne {
	_u.mutation.AddNotificationIDs(ids...)
	return _u
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_u *RepositoryUpdateOne) AddNotifications(v ...*Notification) *RepositoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNotificationIDs(ids...)
}

// SetCloudRepositoryID sets the "cloud_repository" edge to the CloudRepository entity by ID.
func (_u *RepositoryUpdateOne) SetCloudRepositoryID(id int) *RepositoryUpdateOne {
	_u.mutation.SetCloudRepositoryID(id)
	return _u
}

// SetNillableCloudRepositoryID sets the "cloud_repository" edge to the CloudRepository entity by ID if the given value is not nil.
func (_u *RepositoryUpdateOne) SetNillableCloudRepositoryID(id *int) *RepositoryUpdateOne {
	if id != nil {
		_u = _u.SetCloudRepositoryID(*id)
	}
	return _u
}

// SetCloudRepository sets the "cloud_repository" edge to the CloudRepository entity.
func (_u *RepositoryUpdateOne) SetCloudRepository(v *CloudRepository) *RepositoryUpdateOne {
	return _u.SetCloudRepositoryID(v.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (_u *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return _u.mutation
}

// ClearBackupProfiles clears all "backup_profiles" edges to the BackupProfile entity.
func (_u *RepositoryUpdateOne) ClearBackupProfiles() *RepositoryUpdateOne {
	_u.mutation.ClearBackupProfiles()
	return _u
}

// RemoveBackupProfileIDs removes the "backup_profiles" edge to BackupProfile entities by IDs.
func (_u *RepositoryUpdateOne) RemoveBackupProfileIDs(ids ...int) *RepositoryUpdateOne {
	_u.mutation.RemoveBackupProfileIDs(ids...)
	return _u
}

// RemoveBackupProfiles removes "backup_profiles" edges to BackupProfile entities.
func (_u *RepositoryUpdateOne) RemoveBackupProfiles(v ...*BackupProfile) *RepositoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBackupProfileIDs(ids...)
}

// ClearArchives clears all "archives" edges to the Archive entity.
func (_u *RepositoryUpdateOne) ClearArchives() *RepositoryUpdateOne {
	_u.mutation.ClearArchives()
	return _u
}

// RemoveArchiveIDs removes the "archives" edge to Archive entities by IDs.
func (_u *RepositoryUpdateOne) RemoveArchiveIDs(ids ...int) *RepositoryUpdateOne {
	_u.mutation.RemoveArchiveIDs(ids...)
	return _u
}

// RemoveArchives removes "archives" edges to Archive entities.
func (_u *RepositoryUpdateOne) RemoveArchives(v ...*Archive) *RepositoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveArchiveIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (_u *RepositoryUpdateOne) ClearNotifications() *RepositoryUpdateOne {
	_u.mutation.ClearNotifications()
	return _u
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (_u *RepositoryUpdateOne) RemoveNotificationIDs(ids ...int) *RepositoryUpdateOne {
	_u.mutation.RemoveNotificationIDs(ids...)
	return _u
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (_u *RepositoryUpdateOne) RemoveNotifications(v ...*Notification) *RepositoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNotificationIDs(ids...)
}

// ClearCloudRepository clears the "cloud_repository" edge to the CloudRepository entity.
func (_u *RepositoryUpdateOne) ClearCloudRepository() *RepositoryUpdateOne {
	_u.mutation.ClearCloudRepository()
	return _u
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (_u *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Repository entity.
func (_u *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RepositoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := repository.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RepositoryUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := repository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repository.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RepositoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RepositoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(repository.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.NextIntegrityCheck(); ok {
		_spec.SetField(repository.FieldNextIntegrityCheck, field.TypeTime, value)
	}
	if _u.mutation.NextIntegrityCheckCleared() {
		_spec.ClearField(repository.FieldNextIntegrityCheck, field.TypeTime)
	}
	if value, ok := _u.mutation.StatsTotalChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsTotalSize(); ok {
		_spec.SetField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalSize(); ok {
		_spec.AddField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsTotalCsize(); ok {
		_spec.SetField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalCsize(); ok {
		_spec.AddField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsTotalUniqueChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsTotalUniqueChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsUniqueSize(); ok {
		_spec.SetField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsUniqueSize(); ok {
		_spec.AddField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StatsUniqueCsize(); ok {
		_spec.SetField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatsUniqueCsize(); ok {
		_spec.AddField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if _u.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBackupProfilesIDs(); len(nodes) > 0 && !_u.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BackupProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedArchivesIDs(); len(nodes) > 0 && !_u.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArchivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !_u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CloudRepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   repository.CloudRepositoryTable,
			Columns: []string{repository.CloudRepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CloudRepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   repository.CloudRepositoryTable,
			Columns: []string{repository.CloudRepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Repository{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
