// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/notification"
	"github.com/loomi-labs/arco/backend/ent/predicate"
	"github.com/loomi-labs/arco/backend/ent/repository"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RepositoryUpdate) SetName(s string) *RepositoryUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableName(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetLocation sets the "location" field.
func (ru *RepositoryUpdate) SetLocation(s string) *RepositoryUpdate {
	ru.mutation.SetLocation(s)
	return ru
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableLocation(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetLocation(*s)
	}
	return ru
}

// SetPassword sets the "password" field.
func (ru *RepositoryUpdate) SetPassword(s string) *RepositoryUpdate {
	ru.mutation.SetPassword(s)
	return ru
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillablePassword(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetPassword(*s)
	}
	return ru
}

// SetNextIntegrityCheck sets the "next_integrity_check" field.
func (ru *RepositoryUpdate) SetNextIntegrityCheck(t time.Time) *RepositoryUpdate {
	ru.mutation.SetNextIntegrityCheck(t)
	return ru
}

// SetNillableNextIntegrityCheck sets the "next_integrity_check" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableNextIntegrityCheck(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetNextIntegrityCheck(*t)
	}
	return ru
}

// ClearNextIntegrityCheck clears the value of the "next_integrity_check" field.
func (ru *RepositoryUpdate) ClearNextIntegrityCheck() *RepositoryUpdate {
	ru.mutation.ClearNextIntegrityCheck()
	return ru
}

// SetStatsTotalChunks sets the "stats_total_chunks" field.
func (ru *RepositoryUpdate) SetStatsTotalChunks(i int) *RepositoryUpdate {
	ru.mutation.ResetStatsTotalChunks()
	ru.mutation.SetStatsTotalChunks(i)
	return ru
}

// SetNillableStatsTotalChunks sets the "stats_total_chunks" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatsTotalChunks(i *int) *RepositoryUpdate {
	if i != nil {
		ru.SetStatsTotalChunks(*i)
	}
	return ru
}

// AddStatsTotalChunks adds i to the "stats_total_chunks" field.
func (ru *RepositoryUpdate) AddStatsTotalChunks(i int) *RepositoryUpdate {
	ru.mutation.AddStatsTotalChunks(i)
	return ru
}

// SetStatsTotalSize sets the "stats_total_size" field.
func (ru *RepositoryUpdate) SetStatsTotalSize(i int) *RepositoryUpdate {
	ru.mutation.ResetStatsTotalSize()
	ru.mutation.SetStatsTotalSize(i)
	return ru
}

// SetNillableStatsTotalSize sets the "stats_total_size" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatsTotalSize(i *int) *RepositoryUpdate {
	if i != nil {
		ru.SetStatsTotalSize(*i)
	}
	return ru
}

// AddStatsTotalSize adds i to the "stats_total_size" field.
func (ru *RepositoryUpdate) AddStatsTotalSize(i int) *RepositoryUpdate {
	ru.mutation.AddStatsTotalSize(i)
	return ru
}

// SetStatsTotalCsize sets the "stats_total_csize" field.
func (ru *RepositoryUpdate) SetStatsTotalCsize(i int) *RepositoryUpdate {
	ru.mutation.ResetStatsTotalCsize()
	ru.mutation.SetStatsTotalCsize(i)
	return ru
}

// SetNillableStatsTotalCsize sets the "stats_total_csize" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatsTotalCsize(i *int) *RepositoryUpdate {
	if i != nil {
		ru.SetStatsTotalCsize(*i)
	}
	return ru
}

// AddStatsTotalCsize adds i to the "stats_total_csize" field.
func (ru *RepositoryUpdate) AddStatsTotalCsize(i int) *RepositoryUpdate {
	ru.mutation.AddStatsTotalCsize(i)
	return ru
}

// SetStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field.
func (ru *RepositoryUpdate) SetStatsTotalUniqueChunks(i int) *RepositoryUpdate {
	ru.mutation.ResetStatsTotalUniqueChunks()
	ru.mutation.SetStatsTotalUniqueChunks(i)
	return ru
}

// SetNillableStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatsTotalUniqueChunks(i *int) *RepositoryUpdate {
	if i != nil {
		ru.SetStatsTotalUniqueChunks(*i)
	}
	return ru
}

// AddStatsTotalUniqueChunks adds i to the "stats_total_unique_chunks" field.
func (ru *RepositoryUpdate) AddStatsTotalUniqueChunks(i int) *RepositoryUpdate {
	ru.mutation.AddStatsTotalUniqueChunks(i)
	return ru
}

// SetStatsUniqueSize sets the "stats_unique_size" field.
func (ru *RepositoryUpdate) SetStatsUniqueSize(i int) *RepositoryUpdate {
	ru.mutation.ResetStatsUniqueSize()
	ru.mutation.SetStatsUniqueSize(i)
	return ru
}

// SetNillableStatsUniqueSize sets the "stats_unique_size" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatsUniqueSize(i *int) *RepositoryUpdate {
	if i != nil {
		ru.SetStatsUniqueSize(*i)
	}
	return ru
}

// AddStatsUniqueSize adds i to the "stats_unique_size" field.
func (ru *RepositoryUpdate) AddStatsUniqueSize(i int) *RepositoryUpdate {
	ru.mutation.AddStatsUniqueSize(i)
	return ru
}

// SetStatsUniqueCsize sets the "stats_unique_csize" field.
func (ru *RepositoryUpdate) SetStatsUniqueCsize(i int) *RepositoryUpdate {
	ru.mutation.ResetStatsUniqueCsize()
	ru.mutation.SetStatsUniqueCsize(i)
	return ru
}

// SetNillableStatsUniqueCsize sets the "stats_unique_csize" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatsUniqueCsize(i *int) *RepositoryUpdate {
	if i != nil {
		ru.SetStatsUniqueCsize(*i)
	}
	return ru
}

// AddStatsUniqueCsize adds i to the "stats_unique_csize" field.
func (ru *RepositoryUpdate) AddStatsUniqueCsize(i int) *RepositoryUpdate {
	ru.mutation.AddStatsUniqueCsize(i)
	return ru
}

// AddBackupProfileIDs adds the "backup_profiles" edge to the BackupProfile entity by IDs.
func (ru *RepositoryUpdate) AddBackupProfileIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.AddBackupProfileIDs(ids...)
	return ru
}

// AddBackupProfiles adds the "backup_profiles" edges to the BackupProfile entity.
func (ru *RepositoryUpdate) AddBackupProfiles(b ...*BackupProfile) *RepositoryUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddBackupProfileIDs(ids...)
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by IDs.
func (ru *RepositoryUpdate) AddArchiveIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.AddArchiveIDs(ids...)
	return ru
}

// AddArchives adds the "archives" edges to the Archive entity.
func (ru *RepositoryUpdate) AddArchives(a ...*Archive) *RepositoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddArchiveIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ru *RepositoryUpdate) AddNotificationIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.AddNotificationIDs(ids...)
	return ru
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ru *RepositoryUpdate) AddNotifications(n ...*Notification) *RepositoryUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.AddNotificationIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearBackupProfiles clears all "backup_profiles" edges to the BackupProfile entity.
func (ru *RepositoryUpdate) ClearBackupProfiles() *RepositoryUpdate {
	ru.mutation.ClearBackupProfiles()
	return ru
}

// RemoveBackupProfileIDs removes the "backup_profiles" edge to BackupProfile entities by IDs.
func (ru *RepositoryUpdate) RemoveBackupProfileIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.RemoveBackupProfileIDs(ids...)
	return ru
}

// RemoveBackupProfiles removes "backup_profiles" edges to BackupProfile entities.
func (ru *RepositoryUpdate) RemoveBackupProfiles(b ...*BackupProfile) *RepositoryUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveBackupProfileIDs(ids...)
}

// ClearArchives clears all "archives" edges to the Archive entity.
func (ru *RepositoryUpdate) ClearArchives() *RepositoryUpdate {
	ru.mutation.ClearArchives()
	return ru
}

// RemoveArchiveIDs removes the "archives" edge to Archive entities by IDs.
func (ru *RepositoryUpdate) RemoveArchiveIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.RemoveArchiveIDs(ids...)
	return ru
}

// RemoveArchives removes "archives" edges to Archive entities.
func (ru *RepositoryUpdate) RemoveArchives(a ...*Archive) *RepositoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveArchiveIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ru *RepositoryUpdate) ClearNotifications() *RepositoryUpdate {
	ru.mutation.ClearNotifications()
	return ru
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ru *RepositoryUpdate) RemoveNotificationIDs(ids ...int) *RepositoryUpdate {
	ru.mutation.RemoveNotificationIDs(ids...)
	return ru
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ru *RepositoryUpdate) RemoveNotifications(n ...*Notification) *RepositoryUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Location(); ok {
		_spec.SetField(repository.FieldLocation, field.TypeString, value)
	}
	if value, ok := ru.mutation.Password(); ok {
		_spec.SetField(repository.FieldPassword, field.TypeString, value)
	}
	if value, ok := ru.mutation.NextIntegrityCheck(); ok {
		_spec.SetField(repository.FieldNextIntegrityCheck, field.TypeTime, value)
	}
	if ru.mutation.NextIntegrityCheckCleared() {
		_spec.ClearField(repository.FieldNextIntegrityCheck, field.TypeTime)
	}
	if value, ok := ru.mutation.StatsTotalChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatsTotalChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := ru.mutation.StatsTotalSize(); ok {
		_spec.SetField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatsTotalSize(); ok {
		_spec.AddField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.StatsTotalCsize(); ok {
		_spec.SetField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatsTotalCsize(); ok {
		_spec.AddField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.StatsTotalUniqueChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatsTotalUniqueChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := ru.mutation.StatsUniqueSize(); ok {
		_spec.SetField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatsUniqueSize(); ok {
		_spec.AddField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.StatsUniqueCsize(); ok {
		_spec.SetField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatsUniqueCsize(); ok {
		_spec.AddField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if ru.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBackupProfilesIDs(); len(nodes) > 0 && !ru.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BackupProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedArchivesIDs(); len(nodes) > 0 && !ru.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ArchivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ru.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetName sets the "name" field.
func (ruo *RepositoryUpdateOne) SetName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableName(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetLocation sets the "location" field.
func (ruo *RepositoryUpdateOne) SetLocation(s string) *RepositoryUpdateOne {
	ruo.mutation.SetLocation(s)
	return ruo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableLocation(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetLocation(*s)
	}
	return ruo
}

// SetPassword sets the "password" field.
func (ruo *RepositoryUpdateOne) SetPassword(s string) *RepositoryUpdateOne {
	ruo.mutation.SetPassword(s)
	return ruo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillablePassword(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetPassword(*s)
	}
	return ruo
}

// SetNextIntegrityCheck sets the "next_integrity_check" field.
func (ruo *RepositoryUpdateOne) SetNextIntegrityCheck(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetNextIntegrityCheck(t)
	return ruo
}

// SetNillableNextIntegrityCheck sets the "next_integrity_check" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableNextIntegrityCheck(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetNextIntegrityCheck(*t)
	}
	return ruo
}

// ClearNextIntegrityCheck clears the value of the "next_integrity_check" field.
func (ruo *RepositoryUpdateOne) ClearNextIntegrityCheck() *RepositoryUpdateOne {
	ruo.mutation.ClearNextIntegrityCheck()
	return ruo
}

// SetStatsTotalChunks sets the "stats_total_chunks" field.
func (ruo *RepositoryUpdateOne) SetStatsTotalChunks(i int) *RepositoryUpdateOne {
	ruo.mutation.ResetStatsTotalChunks()
	ruo.mutation.SetStatsTotalChunks(i)
	return ruo
}

// SetNillableStatsTotalChunks sets the "stats_total_chunks" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatsTotalChunks(i *int) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStatsTotalChunks(*i)
	}
	return ruo
}

// AddStatsTotalChunks adds i to the "stats_total_chunks" field.
func (ruo *RepositoryUpdateOne) AddStatsTotalChunks(i int) *RepositoryUpdateOne {
	ruo.mutation.AddStatsTotalChunks(i)
	return ruo
}

// SetStatsTotalSize sets the "stats_total_size" field.
func (ruo *RepositoryUpdateOne) SetStatsTotalSize(i int) *RepositoryUpdateOne {
	ruo.mutation.ResetStatsTotalSize()
	ruo.mutation.SetStatsTotalSize(i)
	return ruo
}

// SetNillableStatsTotalSize sets the "stats_total_size" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatsTotalSize(i *int) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStatsTotalSize(*i)
	}
	return ruo
}

// AddStatsTotalSize adds i to the "stats_total_size" field.
func (ruo *RepositoryUpdateOne) AddStatsTotalSize(i int) *RepositoryUpdateOne {
	ruo.mutation.AddStatsTotalSize(i)
	return ruo
}

// SetStatsTotalCsize sets the "stats_total_csize" field.
func (ruo *RepositoryUpdateOne) SetStatsTotalCsize(i int) *RepositoryUpdateOne {
	ruo.mutation.ResetStatsTotalCsize()
	ruo.mutation.SetStatsTotalCsize(i)
	return ruo
}

// SetNillableStatsTotalCsize sets the "stats_total_csize" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatsTotalCsize(i *int) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStatsTotalCsize(*i)
	}
	return ruo
}

// AddStatsTotalCsize adds i to the "stats_total_csize" field.
func (ruo *RepositoryUpdateOne) AddStatsTotalCsize(i int) *RepositoryUpdateOne {
	ruo.mutation.AddStatsTotalCsize(i)
	return ruo
}

// SetStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field.
func (ruo *RepositoryUpdateOne) SetStatsTotalUniqueChunks(i int) *RepositoryUpdateOne {
	ruo.mutation.ResetStatsTotalUniqueChunks()
	ruo.mutation.SetStatsTotalUniqueChunks(i)
	return ruo
}

// SetNillableStatsTotalUniqueChunks sets the "stats_total_unique_chunks" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatsTotalUniqueChunks(i *int) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStatsTotalUniqueChunks(*i)
	}
	return ruo
}

// AddStatsTotalUniqueChunks adds i to the "stats_total_unique_chunks" field.
func (ruo *RepositoryUpdateOne) AddStatsTotalUniqueChunks(i int) *RepositoryUpdateOne {
	ruo.mutation.AddStatsTotalUniqueChunks(i)
	return ruo
}

// SetStatsUniqueSize sets the "stats_unique_size" field.
func (ruo *RepositoryUpdateOne) SetStatsUniqueSize(i int) *RepositoryUpdateOne {
	ruo.mutation.ResetStatsUniqueSize()
	ruo.mutation.SetStatsUniqueSize(i)
	return ruo
}

// SetNillableStatsUniqueSize sets the "stats_unique_size" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatsUniqueSize(i *int) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStatsUniqueSize(*i)
	}
	return ruo
}

// AddStatsUniqueSize adds i to the "stats_unique_size" field.
func (ruo *RepositoryUpdateOne) AddStatsUniqueSize(i int) *RepositoryUpdateOne {
	ruo.mutation.AddStatsUniqueSize(i)
	return ruo
}

// SetStatsUniqueCsize sets the "stats_unique_csize" field.
func (ruo *RepositoryUpdateOne) SetStatsUniqueCsize(i int) *RepositoryUpdateOne {
	ruo.mutation.ResetStatsUniqueCsize()
	ruo.mutation.SetStatsUniqueCsize(i)
	return ruo
}

// SetNillableStatsUniqueCsize sets the "stats_unique_csize" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatsUniqueCsize(i *int) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStatsUniqueCsize(*i)
	}
	return ruo
}

// AddStatsUniqueCsize adds i to the "stats_unique_csize" field.
func (ruo *RepositoryUpdateOne) AddStatsUniqueCsize(i int) *RepositoryUpdateOne {
	ruo.mutation.AddStatsUniqueCsize(i)
	return ruo
}

// AddBackupProfileIDs adds the "backup_profiles" edge to the BackupProfile entity by IDs.
func (ruo *RepositoryUpdateOne) AddBackupProfileIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.AddBackupProfileIDs(ids...)
	return ruo
}

// AddBackupProfiles adds the "backup_profiles" edges to the BackupProfile entity.
func (ruo *RepositoryUpdateOne) AddBackupProfiles(b ...*BackupProfile) *RepositoryUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddBackupProfileIDs(ids...)
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by IDs.
func (ruo *RepositoryUpdateOne) AddArchiveIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.AddArchiveIDs(ids...)
	return ruo
}

// AddArchives adds the "archives" edges to the Archive entity.
func (ruo *RepositoryUpdateOne) AddArchives(a ...*Archive) *RepositoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddArchiveIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ruo *RepositoryUpdateOne) AddNotificationIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.AddNotificationIDs(ids...)
	return ruo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ruo *RepositoryUpdateOne) AddNotifications(n ...*Notification) *RepositoryUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.AddNotificationIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearBackupProfiles clears all "backup_profiles" edges to the BackupProfile entity.
func (ruo *RepositoryUpdateOne) ClearBackupProfiles() *RepositoryUpdateOne {
	ruo.mutation.ClearBackupProfiles()
	return ruo
}

// RemoveBackupProfileIDs removes the "backup_profiles" edge to BackupProfile entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveBackupProfileIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.RemoveBackupProfileIDs(ids...)
	return ruo
}

// RemoveBackupProfiles removes "backup_profiles" edges to BackupProfile entities.
func (ruo *RepositoryUpdateOne) RemoveBackupProfiles(b ...*BackupProfile) *RepositoryUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveBackupProfileIDs(ids...)
}

// ClearArchives clears all "archives" edges to the Archive entity.
func (ruo *RepositoryUpdateOne) ClearArchives() *RepositoryUpdateOne {
	ruo.mutation.ClearArchives()
	return ruo
}

// RemoveArchiveIDs removes the "archives" edge to Archive entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveArchiveIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.RemoveArchiveIDs(ids...)
	return ruo
}

// RemoveArchives removes "archives" edges to Archive entities.
func (ruo *RepositoryUpdateOne) RemoveArchives(a ...*Archive) *RepositoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveArchiveIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ruo *RepositoryUpdateOne) ClearNotifications() *RepositoryUpdateOne {
	ruo.mutation.ClearNotifications()
	return ruo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveNotificationIDs(ids ...int) *RepositoryUpdateOne {
	ruo.mutation.RemoveNotificationIDs(ids...)
	return ruo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ruo *RepositoryUpdateOne) RemoveNotifications(n ...*Notification) *RepositoryUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Location(); ok {
		_spec.SetField(repository.FieldLocation, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Password(); ok {
		_spec.SetField(repository.FieldPassword, field.TypeString, value)
	}
	if value, ok := ruo.mutation.NextIntegrityCheck(); ok {
		_spec.SetField(repository.FieldNextIntegrityCheck, field.TypeTime, value)
	}
	if ruo.mutation.NextIntegrityCheckCleared() {
		_spec.ClearField(repository.FieldNextIntegrityCheck, field.TypeTime)
	}
	if value, ok := ruo.mutation.StatsTotalChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatsTotalChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalChunks, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.StatsTotalSize(); ok {
		_spec.SetField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatsTotalSize(); ok {
		_spec.AddField(repository.FieldStatsTotalSize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.StatsTotalCsize(); ok {
		_spec.SetField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatsTotalCsize(); ok {
		_spec.AddField(repository.FieldStatsTotalCsize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.StatsTotalUniqueChunks(); ok {
		_spec.SetField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatsTotalUniqueChunks(); ok {
		_spec.AddField(repository.FieldStatsTotalUniqueChunks, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.StatsUniqueSize(); ok {
		_spec.SetField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatsUniqueSize(); ok {
		_spec.AddField(repository.FieldStatsUniqueSize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.StatsUniqueCsize(); ok {
		_spec.SetField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatsUniqueCsize(); ok {
		_spec.AddField(repository.FieldStatsUniqueCsize, field.TypeInt, value)
	}
	if ruo.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBackupProfilesIDs(); len(nodes) > 0 && !ruo.mutation.BackupProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BackupProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repository.BackupProfilesTable,
			Columns: repository.BackupProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedArchivesIDs(); len(nodes) > 0 && !ruo.mutation.ArchivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ArchivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.ArchivesTable,
			Columns: []string{repository.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ruo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   repository.NotificationsTable,
			Columns: []string{repository.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
