// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/arco/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// LastLoggedIn applies equality check predicate on the "last_logged_in" field. It's identical to LastLoggedInEQ.
func LastLoggedIn(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoggedIn, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRefreshToken, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenExpiresAt applies equality check predicate on the "access_token_expires_at" field. It's identical to AccessTokenExpiresAtEQ.
func AccessTokenExpiresAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessTokenExpiresAt, v))
}

// RefreshTokenExpiresAt applies equality check predicate on the "refresh_token_expires_at" field. It's identical to RefreshTokenExpiresAtEQ.
func RefreshTokenExpiresAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRefreshTokenExpiresAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// LastLoggedInEQ applies the EQ predicate on the "last_logged_in" field.
func LastLoggedInEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoggedIn, v))
}

// LastLoggedInNEQ applies the NEQ predicate on the "last_logged_in" field.
func LastLoggedInNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoggedIn, v))
}

// LastLoggedInIn applies the In predicate on the "last_logged_in" field.
func LastLoggedInIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoggedIn, vs...))
}

// LastLoggedInNotIn applies the NotIn predicate on the "last_logged_in" field.
func LastLoggedInNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoggedIn, vs...))
}

// LastLoggedInGT applies the GT predicate on the "last_logged_in" field.
func LastLoggedInGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoggedIn, v))
}

// LastLoggedInGTE applies the GTE predicate on the "last_logged_in" field.
func LastLoggedInGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoggedIn, v))
}

// LastLoggedInLT applies the LT predicate on the "last_logged_in" field.
func LastLoggedInLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoggedIn, v))
}

// LastLoggedInLTE applies the LTE predicate on the "last_logged_in" field.
func LastLoggedInLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoggedIn, v))
}

// LastLoggedInIsNil applies the IsNil predicate on the "last_logged_in" field.
func LastLoggedInIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoggedIn))
}

// LastLoggedInNotNil applies the NotNil predicate on the "last_logged_in" field.
func LastLoggedInNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoggedIn))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRefreshToken, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAccessToken, v))
}

// AccessTokenExpiresAtEQ applies the EQ predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtNEQ applies the NEQ predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtIn applies the In predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldAccessTokenExpiresAt, vs...))
}

// AccessTokenExpiresAtNotIn applies the NotIn predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAccessTokenExpiresAt, vs...))
}

// AccessTokenExpiresAtGT applies the GT predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtGTE applies the GTE predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtLT applies the LT predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtLTE applies the LTE predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtIsNil applies the IsNil predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAccessTokenExpiresAt))
}

// AccessTokenExpiresAtNotNil applies the NotNil predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAccessTokenExpiresAt))
}

// RefreshTokenExpiresAtEQ applies the EQ predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtNEQ applies the NEQ predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtIn applies the In predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldRefreshTokenExpiresAt, vs...))
}

// RefreshTokenExpiresAtNotIn applies the NotIn predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRefreshTokenExpiresAt, vs...))
}

// RefreshTokenExpiresAtGT applies the GT predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtGTE applies the GTE predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtLT applies the LT predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtLTE applies the LTE predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtIsNil applies the IsNil predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRefreshTokenExpiresAt))
}

// RefreshTokenExpiresAtNotNil applies the NotNil predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRefreshTokenExpiresAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
