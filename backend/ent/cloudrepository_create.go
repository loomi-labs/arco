// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/cloudrepository"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// CloudRepositoryCreate is the builder for creating a CloudRepository entity.
type CloudRepositoryCreate struct {
	config
	mutation *CloudRepositoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (crc *CloudRepositoryCreate) SetCreatedAt(t time.Time) *CloudRepositoryCreate {
	crc.mutation.SetCreatedAt(t)
	return crc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crc *CloudRepositoryCreate) SetNillableCreatedAt(t *time.Time) *CloudRepositoryCreate {
	if t != nil {
		crc.SetCreatedAt(*t)
	}
	return crc
}

// SetUpdatedAt sets the "updated_at" field.
func (crc *CloudRepositoryCreate) SetUpdatedAt(t time.Time) *CloudRepositoryCreate {
	crc.mutation.SetUpdatedAt(t)
	return crc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crc *CloudRepositoryCreate) SetNillableUpdatedAt(t *time.Time) *CloudRepositoryCreate {
	if t != nil {
		crc.SetUpdatedAt(*t)
	}
	return crc
}

// SetCloudID sets the "cloud_id" field.
func (crc *CloudRepositoryCreate) SetCloudID(s string) *CloudRepositoryCreate {
	crc.mutation.SetCloudID(s)
	return crc
}

// SetStorageUsedBytes sets the "storage_used_bytes" field.
func (crc *CloudRepositoryCreate) SetStorageUsedBytes(i int64) *CloudRepositoryCreate {
	crc.mutation.SetStorageUsedBytes(i)
	return crc
}

// SetNillableStorageUsedBytes sets the "storage_used_bytes" field if the given value is not nil.
func (crc *CloudRepositoryCreate) SetNillableStorageUsedBytes(i *int64) *CloudRepositoryCreate {
	if i != nil {
		crc.SetStorageUsedBytes(*i)
	}
	return crc
}

// SetLocation sets the "location" field.
func (crc *CloudRepositoryCreate) SetLocation(c cloudrepository.Location) *CloudRepositoryCreate {
	crc.mutation.SetLocation(c)
	return crc
}

// SetID sets the "id" field.
func (crc *CloudRepositoryCreate) SetID(i int) *CloudRepositoryCreate {
	crc.mutation.SetID(i)
	return crc
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (crc *CloudRepositoryCreate) SetRepositoryID(id int) *CloudRepositoryCreate {
	crc.mutation.SetRepositoryID(id)
	return crc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (crc *CloudRepositoryCreate) SetRepository(r *Repository) *CloudRepositoryCreate {
	return crc.SetRepositoryID(r.ID)
}

// Mutation returns the CloudRepositoryMutation object of the builder.
func (crc *CloudRepositoryCreate) Mutation() *CloudRepositoryMutation {
	return crc.mutation
}

// Save creates the CloudRepository in the database.
func (crc *CloudRepositoryCreate) Save(ctx context.Context) (*CloudRepository, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CloudRepositoryCreate) SaveX(ctx context.Context) *CloudRepository {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CloudRepositoryCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CloudRepositoryCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CloudRepositoryCreate) defaults() {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		v := cloudrepository.DefaultCreatedAt()
		crc.mutation.SetCreatedAt(v)
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		v := cloudrepository.DefaultUpdatedAt()
		crc.mutation.SetUpdatedAt(v)
	}
	if _, ok := crc.mutation.StorageUsedBytes(); !ok {
		v := cloudrepository.DefaultStorageUsedBytes
		crc.mutation.SetStorageUsedBytes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CloudRepositoryCreate) check() error {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CloudRepository.created_at"`)}
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CloudRepository.updated_at"`)}
	}
	if _, ok := crc.mutation.CloudID(); !ok {
		return &ValidationError{Name: "cloud_id", err: errors.New(`ent: missing required field "CloudRepository.cloud_id"`)}
	}
	if _, ok := crc.mutation.StorageUsedBytes(); !ok {
		return &ValidationError{Name: "storage_used_bytes", err: errors.New(`ent: missing required field "CloudRepository.storage_used_bytes"`)}
	}
	if _, ok := crc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "CloudRepository.location"`)}
	}
	if v, ok := crc.mutation.Location(); ok {
		if err := cloudrepository.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "CloudRepository.location": %w`, err)}
		}
	}
	if len(crc.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "CloudRepository.repository"`)}
	}
	return nil
}

func (crc *CloudRepositoryCreate) sqlSave(ctx context.Context) (*CloudRepository, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CloudRepositoryCreate) createSpec() (*CloudRepository, *sqlgraph.CreateSpec) {
	var (
		_node = &CloudRepository{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(cloudrepository.Table, sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt))
	)
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(cloudrepository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudrepository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := crc.mutation.CloudID(); ok {
		_spec.SetField(cloudrepository.FieldCloudID, field.TypeString, value)
		_node.CloudID = value
	}
	if value, ok := crc.mutation.StorageUsedBytes(); ok {
		_spec.SetField(cloudrepository.FieldStorageUsedBytes, field.TypeInt64, value)
		_node.StorageUsedBytes = value
	}
	if value, ok := crc.mutation.Location(); ok {
		_spec.SetField(cloudrepository.FieldLocation, field.TypeEnum, value)
		_node.Location = value
	}
	if nodes := crc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   cloudrepository.RepositoryTable,
			Columns: []string{cloudrepository.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CloudRepositoryCreateBulk is the builder for creating many CloudRepository entities in bulk.
type CloudRepositoryCreateBulk struct {
	config
	err      error
	builders []*CloudRepositoryCreate
}

// Save creates the CloudRepository entities in the database.
func (crcb *CloudRepositoryCreateBulk) Save(ctx context.Context) ([]*CloudRepository, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CloudRepository, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CloudRepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CloudRepositoryCreateBulk) SaveX(ctx context.Context) []*CloudRepository {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CloudRepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CloudRepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
