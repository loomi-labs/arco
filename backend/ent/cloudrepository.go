// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/arco/backend/ent/cloudrepository"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// CloudRepository is the model entity for the CloudRepository schema.
type CloudRepository struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// CloudID holds the value of the "cloud_id" field.
	CloudID string `json:"cloudId"`
	// StorageUsedBytes holds the value of the "storage_used_bytes" field.
	StorageUsedBytes int64 `json:"storageUsedBytes"`
	// Location holds the value of the "location" field.
	Location cloudrepository.Location `json:"location"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CloudRepositoryQuery when eager-loading is set.
	Edges        CloudRepositoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CloudRepositoryEdges holds the relations/edges for other nodes in the graph.
type CloudRepositoryEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CloudRepositoryEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CloudRepository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cloudrepository.FieldID, cloudrepository.FieldStorageUsedBytes:
			values[i] = new(sql.NullInt64)
		case cloudrepository.FieldCloudID, cloudrepository.FieldLocation:
			values[i] = new(sql.NullString)
		case cloudrepository.FieldCreatedAt, cloudrepository.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CloudRepository fields.
func (cr *CloudRepository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cloudrepository.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case cloudrepository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case cloudrepository.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		case cloudrepository.FieldCloudID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloud_id", values[i])
			} else if value.Valid {
				cr.CloudID = value.String
			}
		case cloudrepository.FieldStorageUsedBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field storage_used_bytes", values[i])
			} else if value.Valid {
				cr.StorageUsedBytes = value.Int64
			}
		case cloudrepository.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				cr.Location = cloudrepository.Location(value.String)
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CloudRepository.
// This includes values selected through modifiers, order, etc.
func (cr *CloudRepository) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the CloudRepository entity.
func (cr *CloudRepository) QueryRepository() *RepositoryQuery {
	return NewCloudRepositoryClient(cr.config).QueryRepository(cr)
}

// Update returns a builder for updating this CloudRepository.
// Note that you need to call CloudRepository.Unwrap() before calling this method if this CloudRepository
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CloudRepository) Update() *CloudRepositoryUpdateOne {
	return NewCloudRepositoryClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CloudRepository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CloudRepository) Unwrap() *CloudRepository {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CloudRepository is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CloudRepository) String() string {
	var builder strings.Builder
	builder.WriteString("CloudRepository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("cloud_id=")
	builder.WriteString(cr.CloudID)
	builder.WriteString(", ")
	builder.WriteString("storage_used_bytes=")
	builder.WriteString(fmt.Sprintf("%v", cr.StorageUsedBytes))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(fmt.Sprintf("%v", cr.Location))
	builder.WriteByte(')')
	return builder.String()
}

// CloudRepositories is a parsable slice of CloudRepository.
type CloudRepositories []*CloudRepository
