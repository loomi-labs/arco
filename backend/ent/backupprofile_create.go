// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/backupschedule"
	"github.com/loomi-labs/arco/backend/ent/notification"
	"github.com/loomi-labs/arco/backend/ent/pruningrule"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// BackupProfileCreate is the builder for creating a BackupProfile entity.
type BackupProfileCreate struct {
	config
	mutation *BackupProfileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *BackupProfileCreate) SetCreatedAt(v time.Time) *BackupProfileCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BackupProfileCreate) SetNillableCreatedAt(v *time.Time) *BackupProfileCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BackupProfileCreate) SetUpdatedAt(v time.Time) *BackupProfileCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BackupProfileCreate) SetNillableUpdatedAt(v *time.Time) *BackupProfileCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *BackupProfileCreate) SetName(v string) *BackupProfileCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetPrefix sets the "prefix" field.
func (_c *BackupProfileCreate) SetPrefix(v string) *BackupProfileCreate {
	_c.mutation.SetPrefix(v)
	return _c
}

// SetBackupPaths sets the "backup_paths" field.
func (_c *BackupProfileCreate) SetBackupPaths(v []string) *BackupProfileCreate {
	_c.mutation.SetBackupPaths(v)
	return _c
}

// SetExcludePaths sets the "exclude_paths" field.
func (_c *BackupProfileCreate) SetExcludePaths(v []string) *BackupProfileCreate {
	_c.mutation.SetExcludePaths(v)
	return _c
}

// SetIcon sets the "icon" field.
func (_c *BackupProfileCreate) SetIcon(v backupprofile.Icon) *BackupProfileCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetDataSectionCollapsed sets the "data_section_collapsed" field.
func (_c *BackupProfileCreate) SetDataSectionCollapsed(v bool) *BackupProfileCreate {
	_c.mutation.SetDataSectionCollapsed(v)
	return _c
}

// SetNillableDataSectionCollapsed sets the "data_section_collapsed" field if the given value is not nil.
func (_c *BackupProfileCreate) SetNillableDataSectionCollapsed(v *bool) *BackupProfileCreate {
	if v != nil {
		_c.SetDataSectionCollapsed(*v)
	}
	return _c
}

// SetScheduleSectionCollapsed sets the "schedule_section_collapsed" field.
func (_c *BackupProfileCreate) SetScheduleSectionCollapsed(v bool) *BackupProfileCreate {
	_c.mutation.SetScheduleSectionCollapsed(v)
	return _c
}

// SetNillableScheduleSectionCollapsed sets the "schedule_section_collapsed" field if the given value is not nil.
func (_c *BackupProfileCreate) SetNillableScheduleSectionCollapsed(v *bool) *BackupProfileCreate {
	if v != nil {
		_c.SetScheduleSectionCollapsed(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BackupProfileCreate) SetID(v int) *BackupProfileCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (_c *BackupProfileCreate) AddRepositoryIDs(ids ...int) *BackupProfileCreate {
	_c.mutation.AddRepositoryIDs(ids...)
	return _c
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (_c *BackupProfileCreate) AddRepositories(v ...*Repository) *BackupProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRepositoryIDs(ids...)
}

// AddArchiveIDs adds the "archives" edge to the Archive entity by IDs.
func (_c *BackupProfileCreate) AddArchiveIDs(ids ...int) *BackupProfileCreate {
	_c.mutation.AddArchiveIDs(ids...)
	return _c
}

// AddArchives adds the "archives" edges to the Archive entity.
func (_c *BackupProfileCreate) AddArchives(v ...*Archive) *BackupProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddArchiveIDs(ids...)
}

// SetBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by ID.
func (_c *BackupProfileCreate) SetBackupScheduleID(id int) *BackupProfileCreate {
	_c.mutation.SetBackupScheduleID(id)
	return _c
}

// SetNillableBackupScheduleID sets the "backup_schedule" edge to the BackupSchedule entity by ID if the given value is not nil.
func (_c *BackupProfileCreate) SetNillableBackupScheduleID(id *int) *BackupProfileCreate {
	if id != nil {
		_c = _c.SetBackupScheduleID(*id)
	}
	return _c
}

// SetBackupSchedule sets the "backup_schedule" edge to the BackupSchedule entity.
func (_c *BackupProfileCreate) SetBackupSchedule(v *BackupSchedule) *BackupProfileCreate {
	return _c.SetBackupScheduleID(v.ID)
}

// SetPruningRuleID sets the "pruning_rule" edge to the PruningRule entity by ID.
func (_c *BackupProfileCreate) SetPruningRuleID(id int) *BackupProfileCreate {
	_c.mutation.SetPruningRuleID(id)
	return _c
}

// SetNillablePruningRuleID sets the "pruning_rule" edge to the PruningRule entity by ID if the given value is not nil.
func (_c *BackupProfileCreate) SetNillablePruningRuleID(id *int) *BackupProfileCreate {
	if id != nil {
		_c = _c.SetPruningRuleID(*id)
	}
	return _c
}

// SetPruningRule sets the "pruning_rule" edge to the PruningRule entity.
func (_c *BackupProfileCreate) SetPruningRule(v *PruningRule) *BackupProfileCreate {
	return _c.SetPruningRuleID(v.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_c *BackupProfileCreate) AddNotificationIDs(ids ...int) *BackupProfileCreate {
	_c.mutation.AddNotificationIDs(ids...)
	return _c
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_c *BackupProfileCreate) AddNotifications(v ...*Notification) *BackupProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNotificationIDs(ids...)
}

// Mutation returns the BackupProfileMutation object of the builder.
func (_c *BackupProfileCreate) Mutation() *BackupProfileMutation {
	return _c.mutation
}

// Save creates the BackupProfile in the database.
func (_c *BackupProfileCreate) Save(ctx context.Context) (*BackupProfile, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BackupProfileCreate) SaveX(ctx context.Context) *BackupProfile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BackupProfileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BackupProfileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BackupProfileCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := backupprofile.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := backupprofile.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.BackupPaths(); !ok {
		v := backupprofile.DefaultBackupPaths
		_c.mutation.SetBackupPaths(v)
	}
	if _, ok := _c.mutation.ExcludePaths(); !ok {
		v := backupprofile.DefaultExcludePaths
		_c.mutation.SetExcludePaths(v)
	}
	if _, ok := _c.mutation.DataSectionCollapsed(); !ok {
		v := backupprofile.DefaultDataSectionCollapsed
		_c.mutation.SetDataSectionCollapsed(v)
	}
	if _, ok := _c.mutation.ScheduleSectionCollapsed(); !ok {
		v := backupprofile.DefaultScheduleSectionCollapsed
		_c.mutation.SetScheduleSectionCollapsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BackupProfileCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BackupProfile.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BackupProfile.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BackupProfile.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := backupprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BackupProfile.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Prefix(); !ok {
		return &ValidationError{Name: "prefix", err: errors.New(`ent: missing required field "BackupProfile.prefix"`)}
	}
	if v, ok := _c.mutation.Prefix(); ok {
		if err := backupprofile.PrefixValidator(v); err != nil {
			return &ValidationError{Name: "prefix", err: fmt.Errorf(`ent: validator failed for field "BackupProfile.prefix": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BackupPaths(); !ok {
		return &ValidationError{Name: "backup_paths", err: errors.New(`ent: missing required field "BackupProfile.backup_paths"`)}
	}
	if _, ok := _c.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "BackupProfile.icon"`)}
	}
	if v, ok := _c.mutation.Icon(); ok {
		if err := backupprofile.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "BackupProfile.icon": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DataSectionCollapsed(); !ok {
		return &ValidationError{Name: "data_section_collapsed", err: errors.New(`ent: missing required field "BackupProfile.data_section_collapsed"`)}
	}
	if _, ok := _c.mutation.ScheduleSectionCollapsed(); !ok {
		return &ValidationError{Name: "schedule_section_collapsed", err: errors.New(`ent: missing required field "BackupProfile.schedule_section_collapsed"`)}
	}
	if len(_c.mutation.RepositoriesIDs()) == 0 {
		return &ValidationError{Name: "repositories", err: errors.New(`ent: missing required edge "BackupProfile.repositories"`)}
	}
	return nil
}

func (_c *BackupProfileCreate) sqlSave(ctx context.Context) (*BackupProfile, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BackupProfileCreate) createSpec() (*BackupProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &BackupProfile{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(backupprofile.Table, sqlgraph.NewFieldSpec(backupprofile.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(backupprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(backupprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(backupprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Prefix(); ok {
		_spec.SetField(backupprofile.FieldPrefix, field.TypeString, value)
		_node.Prefix = value
	}
	if value, ok := _c.mutation.BackupPaths(); ok {
		_spec.SetField(backupprofile.FieldBackupPaths, field.TypeJSON, value)
		_node.BackupPaths = value
	}
	if value, ok := _c.mutation.ExcludePaths(); ok {
		_spec.SetField(backupprofile.FieldExcludePaths, field.TypeJSON, value)
		_node.ExcludePaths = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(backupprofile.FieldIcon, field.TypeEnum, value)
		_node.Icon = value
	}
	if value, ok := _c.mutation.DataSectionCollapsed(); ok {
		_spec.SetField(backupprofile.FieldDataSectionCollapsed, field.TypeBool, value)
		_node.DataSectionCollapsed = value
	}
	if value, ok := _c.mutation.ScheduleSectionCollapsed(); ok {
		_spec.SetField(backupprofile.FieldScheduleSectionCollapsed, field.TypeBool, value)
		_node.ScheduleSectionCollapsed = value
	}
	if nodes := _c.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   backupprofile.RepositoriesTable,
			Columns: backupprofile.RepositoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ArchivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   backupprofile.ArchivesTable,
			Columns: []string{backupprofile.ArchivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(archive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BackupScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   backupprofile.BackupScheduleTable,
			Columns: []string{backupprofile.BackupScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(backupschedule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PruningRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   backupprofile.PruningRuleTable,
			Columns: []string{backupprofile.PruningRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pruningrule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   backupprofile.NotificationsTable,
			Columns: []string{backupprofile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BackupProfileCreateBulk is the builder for creating many BackupProfile entities in bulk.
type BackupProfileCreateBulk struct {
	config
	err      error
	builders []*BackupProfileCreate
}

// Save creates the BackupProfile entities in the database.
func (_c *BackupProfileCreateBulk) Save(ctx context.Context) ([]*BackupProfile, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BackupProfile, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BackupProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BackupProfileCreateBulk) SaveX(ctx context.Context) []*BackupProfile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BackupProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BackupProfileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
