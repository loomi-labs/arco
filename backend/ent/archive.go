// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/arco/backend/ent/archive"
	"github.com/loomi-labs/arco/backend/ent/backupprofile"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// Archive is the model entity for the Archive schema.
type Archive struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt"`
	// Duration holds the value of the "duration" field.
	Duration time.Time `json:"duration"`
	// BorgID holds the value of the "borg_id" field.
	BorgID string `json:"borgId"`
	// WillBePruned holds the value of the "will_be_pruned" field.
	WillBePruned bool `json:"willBePruned"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArchiveQuery when eager-loading is set.
	Edges                   ArchiveEdges `json:"edges"`
	archive_repository      *int
	archive_backup_profile  *int
	backup_profile_archives *int
	selectValues            sql.SelectValues
}

// ArchiveEdges holds the relations/edges for other nodes in the graph.
type ArchiveEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// BackupProfile holds the value of the backup_profile edge.
	BackupProfile *BackupProfile `json:"backupProfile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArchiveEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// BackupProfileOrErr returns the BackupProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArchiveEdges) BackupProfileOrErr() (*BackupProfile, error) {
	if e.BackupProfile != nil {
		return e.BackupProfile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: backupprofile.Label}
	}
	return nil, &NotLoadedError{edge: "backup_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Archive) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case archive.FieldWillBePruned:
			values[i] = new(sql.NullBool)
		case archive.FieldID:
			values[i] = new(sql.NullInt64)
		case archive.FieldName, archive.FieldBorgID:
			values[i] = new(sql.NullString)
		case archive.FieldCreatedAt, archive.FieldDuration:
			values[i] = new(sql.NullTime)
		case archive.ForeignKeys[0]: // archive_repository
			values[i] = new(sql.NullInt64)
		case archive.ForeignKeys[1]: // archive_backup_profile
			values[i] = new(sql.NullInt64)
		case archive.ForeignKeys[2]: // backup_profile_archives
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Archive fields.
func (a *Archive) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case archive.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case archive.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case archive.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case archive.FieldDuration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				a.Duration = value.Time
			}
		case archive.FieldBorgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field borg_id", values[i])
			} else if value.Valid {
				a.BorgID = value.String
			}
		case archive.FieldWillBePruned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field will_be_pruned", values[i])
			} else if value.Valid {
				a.WillBePruned = value.Bool
			}
		case archive.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field archive_repository", value)
			} else if value.Valid {
				a.archive_repository = new(int)
				*a.archive_repository = int(value.Int64)
			}
		case archive.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field archive_backup_profile", value)
			} else if value.Valid {
				a.archive_backup_profile = new(int)
				*a.archive_backup_profile = int(value.Int64)
			}
		case archive.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field backup_profile_archives", value)
			} else if value.Valid {
				a.backup_profile_archives = new(int)
				*a.backup_profile_archives = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Archive.
// This includes values selected through modifiers, order, etc.
func (a *Archive) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the Archive entity.
func (a *Archive) QueryRepository() *RepositoryQuery {
	return NewArchiveClient(a.config).QueryRepository(a)
}

// QueryBackupProfile queries the "backup_profile" edge of the Archive entity.
func (a *Archive) QueryBackupProfile() *BackupProfileQuery {
	return NewArchiveClient(a.config).QueryBackupProfile(a)
}

// Update returns a builder for updating this Archive.
// Note that you need to call Archive.Unwrap() before calling this method if this Archive
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Archive) Update() *ArchiveUpdateOne {
	return NewArchiveClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Archive entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Archive) Unwrap() *Archive {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Archive is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Archive) String() string {
	var builder strings.Builder
	builder.WriteString("Archive(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(a.Duration.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("borg_id=")
	builder.WriteString(a.BorgID)
	builder.WriteString(", ")
	builder.WriteString("will_be_pruned=")
	builder.WriteString(fmt.Sprintf("%v", a.WillBePruned))
	builder.WriteByte(')')
	return builder.String()
}

// Archives is a parsable slice of Archive.
type Archives []*Archive
