// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/arco/backend/ent/cloudrepository"
	"github.com/loomi-labs/arco/backend/ent/predicate"
	"github.com/loomi-labs/arco/backend/ent/repository"
)

// CloudRepositoryUpdate is the builder for updating CloudRepository entities.
type CloudRepositoryUpdate struct {
	config
	hooks     []Hook
	mutation  *CloudRepositoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CloudRepositoryUpdate builder.
func (cru *CloudRepositoryUpdate) Where(ps ...predicate.CloudRepository) *CloudRepositoryUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *CloudRepositoryUpdate) SetUpdatedAt(t time.Time) *CloudRepositoryUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// SetStorageUsedBytes sets the "storage_used_bytes" field.
func (cru *CloudRepositoryUpdate) SetStorageUsedBytes(i int64) *CloudRepositoryUpdate {
	cru.mutation.ResetStorageUsedBytes()
	cru.mutation.SetStorageUsedBytes(i)
	return cru
}

// SetNillableStorageUsedBytes sets the "storage_used_bytes" field if the given value is not nil.
func (cru *CloudRepositoryUpdate) SetNillableStorageUsedBytes(i *int64) *CloudRepositoryUpdate {
	if i != nil {
		cru.SetStorageUsedBytes(*i)
	}
	return cru
}

// AddStorageUsedBytes adds i to the "storage_used_bytes" field.
func (cru *CloudRepositoryUpdate) AddStorageUsedBytes(i int64) *CloudRepositoryUpdate {
	cru.mutation.AddStorageUsedBytes(i)
	return cru
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (cru *CloudRepositoryUpdate) SetRepositoryID(id int) *CloudRepositoryUpdate {
	cru.mutation.SetRepositoryID(id)
	return cru
}

// SetRepository sets the "repository" edge to the Repository entity.
func (cru *CloudRepositoryUpdate) SetRepository(r *Repository) *CloudRepositoryUpdate {
	return cru.SetRepositoryID(r.ID)
}

// Mutation returns the CloudRepositoryMutation object of the builder.
func (cru *CloudRepositoryUpdate) Mutation() *CloudRepositoryMutation {
	return cru.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (cru *CloudRepositoryUpdate) ClearRepository() *CloudRepositoryUpdate {
	cru.mutation.ClearRepository()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CloudRepositoryUpdate) Save(ctx context.Context) (int, error) {
	cru.defaults()
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CloudRepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CloudRepositoryUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CloudRepositoryUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *CloudRepositoryUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := cloudrepository.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CloudRepositoryUpdate) check() error {
	if cru.mutation.RepositoryCleared() && len(cru.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CloudRepository.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cru *CloudRepositoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CloudRepositoryUpdate {
	cru.modifiers = append(cru.modifiers, modifiers...)
	return cru
}

func (cru *CloudRepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cloudrepository.Table, cloudrepository.Columns, sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudrepository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.StorageUsedBytes(); ok {
		_spec.SetField(cloudrepository.FieldStorageUsedBytes, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.AddedStorageUsedBytes(); ok {
		_spec.AddField(cloudrepository.FieldStorageUsedBytes, field.TypeInt64, value)
	}
	if cru.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   cloudrepository.RepositoryTable,
			Columns: []string{cloudrepository.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   cloudrepository.RepositoryTable,
			Columns: []string{cloudrepository.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudrepository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CloudRepositoryUpdateOne is the builder for updating a single CloudRepository entity.
type CloudRepositoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CloudRepositoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *CloudRepositoryUpdateOne) SetUpdatedAt(t time.Time) *CloudRepositoryUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// SetStorageUsedBytes sets the "storage_used_bytes" field.
func (cruo *CloudRepositoryUpdateOne) SetStorageUsedBytes(i int64) *CloudRepositoryUpdateOne {
	cruo.mutation.ResetStorageUsedBytes()
	cruo.mutation.SetStorageUsedBytes(i)
	return cruo
}

// SetNillableStorageUsedBytes sets the "storage_used_bytes" field if the given value is not nil.
func (cruo *CloudRepositoryUpdateOne) SetNillableStorageUsedBytes(i *int64) *CloudRepositoryUpdateOne {
	if i != nil {
		cruo.SetStorageUsedBytes(*i)
	}
	return cruo
}

// AddStorageUsedBytes adds i to the "storage_used_bytes" field.
func (cruo *CloudRepositoryUpdateOne) AddStorageUsedBytes(i int64) *CloudRepositoryUpdateOne {
	cruo.mutation.AddStorageUsedBytes(i)
	return cruo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (cruo *CloudRepositoryUpdateOne) SetRepositoryID(id int) *CloudRepositoryUpdateOne {
	cruo.mutation.SetRepositoryID(id)
	return cruo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (cruo *CloudRepositoryUpdateOne) SetRepository(r *Repository) *CloudRepositoryUpdateOne {
	return cruo.SetRepositoryID(r.ID)
}

// Mutation returns the CloudRepositoryMutation object of the builder.
func (cruo *CloudRepositoryUpdateOne) Mutation() *CloudRepositoryMutation {
	return cruo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (cruo *CloudRepositoryUpdateOne) ClearRepository() *CloudRepositoryUpdateOne {
	cruo.mutation.ClearRepository()
	return cruo
}

// Where appends a list predicates to the CloudRepositoryUpdate builder.
func (cruo *CloudRepositoryUpdateOne) Where(ps ...predicate.CloudRepository) *CloudRepositoryUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CloudRepositoryUpdateOne) Select(field string, fields ...string) *CloudRepositoryUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CloudRepository entity.
func (cruo *CloudRepositoryUpdateOne) Save(ctx context.Context) (*CloudRepository, error) {
	cruo.defaults()
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CloudRepositoryUpdateOne) SaveX(ctx context.Context) *CloudRepository {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CloudRepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CloudRepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *CloudRepositoryUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := cloudrepository.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CloudRepositoryUpdateOne) check() error {
	if cruo.mutation.RepositoryCleared() && len(cruo.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CloudRepository.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cruo *CloudRepositoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CloudRepositoryUpdateOne {
	cruo.modifiers = append(cruo.modifiers, modifiers...)
	return cruo
}

func (cruo *CloudRepositoryUpdateOne) sqlSave(ctx context.Context) (_node *CloudRepository, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cloudrepository.Table, cloudrepository.Columns, sqlgraph.NewFieldSpec(cloudrepository.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CloudRepository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudrepository.FieldID)
		for _, f := range fields {
			if !cloudrepository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cloudrepository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudrepository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.StorageUsedBytes(); ok {
		_spec.SetField(cloudrepository.FieldStorageUsedBytes, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.AddedStorageUsedBytes(); ok {
		_spec.AddField(cloudrepository.FieldStorageUsedBytes, field.TypeInt64, value)
	}
	if cruo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   cloudrepository.RepositoryTable,
			Columns: []string{cloudrepository.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   cloudrepository.RepositoryTable,
			Columns: []string{cloudrepository.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cruo.modifiers...)
	_node = &CloudRepository{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudrepository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
