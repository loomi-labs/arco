// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/v1/plan.proto

package arcov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeatureSet represents the tier of features available in a subscription plan.
//
// Each feature set defines the capabilities and storage limits available
// to subscribers of that plan tier.
type FeatureSet int32

const (
	// Default unspecified feature set.
	FeatureSet_FEATURE_SET_UNSPECIFIED FeatureSet = 0
	// Basic feature set with 250GB storage limit.
	// No overage billing - users cannot exceed storage limit.
	FeatureSet_FEATURE_SET_BASIC FeatureSet = 1
	// Pro feature set with 1TB base storage and overage billing.
	// Includes advanced features and unlimited storage with usage-based pricing.
	FeatureSet_FEATURE_SET_PRO FeatureSet = 2
)

// Enum value maps for FeatureSet.
var (
	FeatureSet_name = map[int32]string{
		0: "FEATURE_SET_UNSPECIFIED",
		1: "FEATURE_SET_BASIC",
		2: "FEATURE_SET_PRO",
	}
	FeatureSet_value = map[string]int32{
		"FEATURE_SET_UNSPECIFIED": 0,
		"FEATURE_SET_BASIC":       1,
		"FEATURE_SET_PRO":         2,
	}
)

func (x FeatureSet) Enum() *FeatureSet {
	p := new(FeatureSet)
	*p = x
	return p
}

func (x FeatureSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureSet) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plan_proto_enumTypes[0].Descriptor()
}

func (FeatureSet) Type() protoreflect.EnumType {
	return &file_api_v1_plan_proto_enumTypes[0]
}

func (x FeatureSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureSet.Descriptor instead.
func (FeatureSet) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{0}
}

// ListPlansRequest initiates retrieval of all available subscription plans.
//
// This request requires no parameters as it returns all publicly available
// plan information.
type ListPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPlansRequest) Reset() {
	*x = ListPlansRequest{}
	mi := &file_api_v1_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansRequest) ProtoMessage() {}

func (x *ListPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansRequest.ProtoReflect.Descriptor instead.
func (*ListPlansRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{0}
}

// ListPlansResponse contains all available subscription plans.
//
// Returns both Basic and Pro plans with complete pricing information
// for USD pricing and billing cycles.
type ListPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All available subscription plans with USD pricing.
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *ListPlansResponse) Reset() {
	*x = ListPlansResponse{}
	mi := &file_api_v1_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansResponse) ProtoMessage() {}

func (x *ListPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansResponse.ProtoReflect.Descriptor instead.
func (*ListPlansResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{1}
}

func (x *ListPlansResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

// PlanPrice represents pricing information for a plan in USD.
//
// Contains both monthly and yearly pricing with yearly billing offering
// significant discounts. Stripe price IDs are used for payment processing.
type PlanPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monthly subscription price in cents (e.g., 500 = $5.00).
	MonthlyCents int64 `protobuf:"varint,1,opt,name=monthly_cents,json=monthlyCents,proto3" json:"monthly_cents,omitempty"`
	// Yearly subscription price in cents with discount (e.g., 4800 = $48.00).
	// Yearly billing typically offers 15-20% savings compared to monthly.
	YearlyCents int64 `protobuf:"varint,2,opt,name=yearly_cents,json=yearlyCents,proto3" json:"yearly_cents,omitempty"`
}

func (x *PlanPrice) Reset() {
	*x = PlanPrice{}
	mi := &file_api_v1_plan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanPrice) ProtoMessage() {}

func (x *PlanPrice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanPrice.ProtoReflect.Descriptor instead.
func (*PlanPrice) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{2}
}

func (x *PlanPrice) GetMonthlyCents() int64 {
	if x != nil {
		return x.MonthlyCents
	}
	return 0
}

func (x *PlanPrice) GetYearlyCents() int64 {
	if x != nil {
		return x.YearlyCents
	}
	return 0
}

// OveragePrice represents additional storage pricing for Pro plans.
//
// Pro plans include overage billing for storage usage beyond the base 1TB limit.
// Overage is charged in 10GB increments and billed monthly based on peak usage.
type OveragePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price per 10GB block in cents (e.g., 10 = $0.10 per 10GB).
	// Charged monthly based on peak storage usage above the base limit.
	Per_10GbCents int64 `protobuf:"varint,1,opt,name=per_10gb_cents,json=per10gbCents,proto3" json:"per_10gb_cents,omitempty"`
}

func (x *OveragePrice) Reset() {
	*x = OveragePrice{}
	mi := &file_api_v1_plan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OveragePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OveragePrice) ProtoMessage() {}

func (x *OveragePrice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OveragePrice.ProtoReflect.Descriptor instead.
func (*OveragePrice) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{3}
}

func (x *OveragePrice) GetPer_10GbCents() int64 {
	if x != nil {
		return x.Per_10GbCents
	}
	return 0
}

// Plan represents a complete subscription plan with pricing and features.
//
// Each plan defines storage limits, feature availability, and USD pricing
// for monthly and yearly billing cycles.
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable plan name (e.g., "Basic", "Pro").
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Feature set tier determining available capabilities.
	FeatureSet FeatureSet `protobuf:"varint,2,opt,name=feature_set,json=featureSet,proto3,enum=api.v1.FeatureSet" json:"feature_set,omitempty"`
	// Base storage limit in GB (250 for Basic, 1000 for Pro).
	// Pro plans allow overage beyond this limit with additional charges.
	StorageGb int64 `protobuf:"varint,3,opt,name=storage_gb,json=storageGb,proto3" json:"storage_gb,omitempty"`
	// Pricing information for USD in monthly and yearly billing cycles.
	Price *PlanPrice `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Overage pricing for usage beyond base storage limit.
	// Not set for Basic plans (no overage allowed).
	// Set for Pro plans with per-10GB pricing.
	OveragePrice *OveragePrice `protobuf:"bytes,5,opt,name=overage_price,json=overagePrice,proto3" json:"overage_price,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_api_v1_plan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{4}
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetFeatureSet() FeatureSet {
	if x != nil {
		return x.FeatureSet
	}
	return FeatureSet_FEATURE_SET_UNSPECIFIED
}

func (x *Plan) GetStorageGb() int64 {
	if x != nil {
		return x.StorageGb
	}
	return 0
}

func (x *Plan) GetPrice() *PlanPrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Plan) GetOveragePrice() *OveragePrice {
	if x != nil {
		return x.OveragePrice
	}
	return nil
}

var File_api_v1_plan_proto protoreflect.FileDescriptor

var file_api_v1_plan_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0x12, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x79, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a,
	0x0c, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x5f, 0x31, 0x30, 0x67, 0x62, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x31, 0x30, 0x67, 0x62, 0x43, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x47, 0x62, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2a, 0x55, 0x0a, 0x0a, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x02, 0x32,
	0x51, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x82, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x42, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6d, 0x69,
	0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x72, 0x63, 0x6f, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x70, 0x69, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07,
	0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_plan_proto_rawDescOnce sync.Once
	file_api_v1_plan_proto_rawDescData = file_api_v1_plan_proto_rawDesc
)

func file_api_v1_plan_proto_rawDescGZIP() []byte {
	file_api_v1_plan_proto_rawDescOnce.Do(func() {
		file_api_v1_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_plan_proto_rawDescData)
	})
	return file_api_v1_plan_proto_rawDescData
}

var file_api_v1_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_v1_plan_proto_goTypes = []any{
	(FeatureSet)(0),           // 0: api.v1.FeatureSet
	(*ListPlansRequest)(nil),  // 1: api.v1.ListPlansRequest
	(*ListPlansResponse)(nil), // 2: api.v1.ListPlansResponse
	(*PlanPrice)(nil),         // 3: api.v1.PlanPrice
	(*OveragePrice)(nil),      // 4: api.v1.OveragePrice
	(*Plan)(nil),              // 5: api.v1.Plan
}
var file_api_v1_plan_proto_depIdxs = []int32{
	5, // 0: api.v1.ListPlansResponse.plans:type_name -> api.v1.Plan
	0, // 1: api.v1.Plan.feature_set:type_name -> api.v1.FeatureSet
	3, // 2: api.v1.Plan.price:type_name -> api.v1.PlanPrice
	4, // 3: api.v1.Plan.overage_price:type_name -> api.v1.OveragePrice
	1, // 4: api.v1.PlanService.ListPlans:input_type -> api.v1.ListPlansRequest
	2, // 5: api.v1.PlanService.ListPlans:output_type -> api.v1.ListPlansResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_v1_plan_proto_init() }
func file_api_v1_plan_proto_init() {
	if File_api_v1_plan_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_plan_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_plan_proto_goTypes,
		DependencyIndexes: file_api_v1_plan_proto_depIdxs,
		EnumInfos:         file_api_v1_plan_proto_enumTypes,
		MessageInfos:      file_api_v1_plan_proto_msgTypes,
	}.Build()
	File_api_v1_plan_proto = out.File
	file_api_v1_plan_proto_rawDesc = nil
	file_api_v1_plan_proto_goTypes = nil
	file_api_v1_plan_proto_depIdxs = nil
}
