// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/v1/plan.proto

package arcov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListPlansRequest initiates retrieval of all available subscription plans.
//
// This request requires no parameters as it returns all publicly available
// plan information.
type ListPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPlansRequest) Reset() {
	*x = ListPlansRequest{}
	mi := &file_api_v1_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansRequest) ProtoMessage() {}

func (x *ListPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansRequest.ProtoReflect.Descriptor instead.
func (*ListPlansRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{0}
}

// ListPlansResponse contains all available subscription plans.
//
// Returns all available plans (Lite, Pro, Max) with complete pricing
// information for USD pricing and yearly billing cycles.
type ListPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All available subscription plans with USD pricing.
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *ListPlansResponse) Reset() {
	*x = ListPlansResponse{}
	mi := &file_api_v1_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansResponse) ProtoMessage() {}

func (x *ListPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansResponse.ProtoReflect.Descriptor instead.
func (*ListPlansResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{1}
}

func (x *ListPlansResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

// Plan represents a complete subscription plan with pricing and features.
//
// Each plan is sourced from Polar products and contains all necessary
// information for displaying plans and handling subscriptions.
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the product ID of Polar used for checkout sessions and subscriptions
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable plan name (e.g., "Arco Cloud - Lite", "Arco Cloud - Pro").
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Plan description with storage and pricing details.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Base storage limit in GB included in the plan.
	StorageGb int64 `protobuf:"varint,4,opt,name=storage_gb,json=storageGb,proto3" json:"storage_gb,omitempty"`
	// Maximum number of repositories allowed for this plan.
	AllowedRepositories int32 `protobuf:"varint,5,opt,name=allowed_repositories,json=allowedRepositories,proto3" json:"allowed_repositories,omitempty"`
	// Whether this plan should be highlighted as popular/recommended.
	Popular bool `protobuf:"varint,6,opt,name=popular,proto3" json:"popular,omitempty"`
	// Base yearly subscription price in cents (e.g., 2400 = $24.00).
	PriceCents int64 `protobuf:"varint,7,opt,name=price_cents,json=priceCents,proto3" json:"price_cents,omitempty"`
	// Overage pricing per GB in cents for usage beyond base storage limit.
	OveragePerGbCents int64 `protobuf:"varint,8,opt,name=overage_per_gb_cents,json=overagePerGbCents,proto3" json:"overage_per_gb_cents,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_api_v1_plan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_api_v1_plan_proto_rawDescGZIP(), []int{2}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetStorageGb() int64 {
	if x != nil {
		return x.StorageGb
	}
	return 0
}

func (x *Plan) GetAllowedRepositories() int32 {
	if x != nil {
		return x.AllowedRepositories
	}
	return 0
}

func (x *Plan) GetPopular() bool {
	if x != nil {
		return x.Popular
	}
	return false
}

func (x *Plan) GetPriceCents() int64 {
	if x != nil {
		return x.PriceCents
	}
	return 0
}

func (x *Plan) GetOveragePerGbCents() int64 {
	if x != nil {
		return x.OveragePerGbCents
	}
	return 0
}

var File_api_v1_plan_proto protoreflect.FileDescriptor

var file_api_v1_plan_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0x12, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x04, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x47, 0x62, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x67, 0x62, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x47, 0x62,
	0x43, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x51, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x82, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x6f, 0x6f, 0x6d, 0x69, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x6f,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x72, 0x63, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x12, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_plan_proto_rawDescOnce sync.Once
	file_api_v1_plan_proto_rawDescData = file_api_v1_plan_proto_rawDesc
)

func file_api_v1_plan_proto_rawDescGZIP() []byte {
	file_api_v1_plan_proto_rawDescOnce.Do(func() {
		file_api_v1_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_plan_proto_rawDescData)
	})
	return file_api_v1_plan_proto_rawDescData
}

var file_api_v1_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_v1_plan_proto_goTypes = []any{
	(*ListPlansRequest)(nil),  // 0: api.v1.ListPlansRequest
	(*ListPlansResponse)(nil), // 1: api.v1.ListPlansResponse
	(*Plan)(nil),              // 2: api.v1.Plan
}
var file_api_v1_plan_proto_depIdxs = []int32{
	2, // 0: api.v1.ListPlansResponse.plans:type_name -> api.v1.Plan
	0, // 1: api.v1.PlanService.ListPlans:input_type -> api.v1.ListPlansRequest
	1, // 2: api.v1.PlanService.ListPlans:output_type -> api.v1.ListPlansResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_v1_plan_proto_init() }
func file_api_v1_plan_proto_init() {
	if File_api_v1_plan_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_plan_proto_goTypes,
		DependencyIndexes: file_api_v1_plan_proto_depIdxs,
		MessageInfos:      file_api_v1_plan_proto_msgTypes,
	}.Build()
	File_api_v1_plan_proto = out.File
	file_api_v1_plan_proto_rawDesc = nil
	file_api_v1_plan_proto_goTypes = nil
	file_api_v1_plan_proto_depIdxs = nil
}
