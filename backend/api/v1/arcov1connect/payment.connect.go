// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/payment.proto

package arcov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/loomi-labs/arco/backend/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "api.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceAddPaymentMethodProcedure is the fully-qualified name of the PaymentService's
	// AddPaymentMethod RPC.
	PaymentServiceAddPaymentMethodProcedure = "/api.v1.PaymentService/AddPaymentMethod"
	// PaymentServiceListPaymentMethodsProcedure is the fully-qualified name of the PaymentService's
	// ListPaymentMethods RPC.
	PaymentServiceListPaymentMethodsProcedure = "/api.v1.PaymentService/ListPaymentMethods"
	// PaymentServiceGetPaymentHistoryProcedure is the fully-qualified name of the PaymentService's
	// GetPaymentHistory RPC.
	PaymentServiceGetPaymentHistoryProcedure = "/api.v1.PaymentService/GetPaymentHistory"
)

// PaymentServiceClient is a client for the api.v1.PaymentService service.
type PaymentServiceClient interface {
	// AddPaymentMethod adds a new payment method to the user's account.
	//
	// Attaches a Stripe payment method to the user's Stripe customer account.
	// Creates a Stripe customer automatically if one doesn't exist.
	// Optionally sets the new payment method as the default for future charges.
	//
	// Requires authentication. The payment method must be created client-side
	// using Stripe.js or mobile SDKs before calling this endpoint.
	AddPaymentMethod(context.Context, *connect.Request[v1.AddPaymentMethodRequest]) (*connect.Response[v1.AddPaymentMethodResponse], error)
	// ListPaymentMethods retrieves all saved payment methods for the user.
	//
	// Returns a list of payment methods with security-safe details (last 4 digits,
	// expiry date, brand) and indicates which is set as the default.
	// Only includes payment methods attached to the user's Stripe customer.
	//
	// Requires authentication. Returns empty list if user has no payment methods.
	ListPaymentMethods(context.Context, *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error)
	// GetPaymentHistory retrieves the user's payment and billing history.
	//
	// Returns paginated payment history including successful payments, failed attempts,
	// refunds, and associated invoice details. Includes payment method information
	// and links to Stripe-hosted invoice PDFs.
	//
	// Requires authentication. Supports cursor-based pagination for large histories.
	// Currently returns unimplemented status - implementation in progress.
	GetPaymentHistory(context.Context, *connect.Request[v1.GetPaymentHistoryRequest]) (*connect.Response[v1.GetPaymentHistoryResponse], error)
}

// NewPaymentServiceClient constructs a client for the api.v1.PaymentService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := v1.File_api_v1_payment_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		addPaymentMethod: connect.NewClient[v1.AddPaymentMethodRequest, v1.AddPaymentMethodResponse](
			httpClient,
			baseURL+PaymentServiceAddPaymentMethodProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("AddPaymentMethod")),
			connect.WithClientOptions(opts...),
		),
		listPaymentMethods: connect.NewClient[v1.ListPaymentMethodsRequest, v1.ListPaymentMethodsResponse](
			httpClient,
			baseURL+PaymentServiceListPaymentMethodsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("ListPaymentMethods")),
			connect.WithClientOptions(opts...),
		),
		getPaymentHistory: connect.NewClient[v1.GetPaymentHistoryRequest, v1.GetPaymentHistoryResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentHistoryProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPaymentHistory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	addPaymentMethod   *connect.Client[v1.AddPaymentMethodRequest, v1.AddPaymentMethodResponse]
	listPaymentMethods *connect.Client[v1.ListPaymentMethodsRequest, v1.ListPaymentMethodsResponse]
	getPaymentHistory  *connect.Client[v1.GetPaymentHistoryRequest, v1.GetPaymentHistoryResponse]
}

// AddPaymentMethod calls api.v1.PaymentService.AddPaymentMethod.
func (c *paymentServiceClient) AddPaymentMethod(ctx context.Context, req *connect.Request[v1.AddPaymentMethodRequest]) (*connect.Response[v1.AddPaymentMethodResponse], error) {
	return c.addPaymentMethod.CallUnary(ctx, req)
}

// ListPaymentMethods calls api.v1.PaymentService.ListPaymentMethods.
func (c *paymentServiceClient) ListPaymentMethods(ctx context.Context, req *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error) {
	return c.listPaymentMethods.CallUnary(ctx, req)
}

// GetPaymentHistory calls api.v1.PaymentService.GetPaymentHistory.
func (c *paymentServiceClient) GetPaymentHistory(ctx context.Context, req *connect.Request[v1.GetPaymentHistoryRequest]) (*connect.Response[v1.GetPaymentHistoryResponse], error) {
	return c.getPaymentHistory.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the api.v1.PaymentService service.
type PaymentServiceHandler interface {
	// AddPaymentMethod adds a new payment method to the user's account.
	//
	// Attaches a Stripe payment method to the user's Stripe customer account.
	// Creates a Stripe customer automatically if one doesn't exist.
	// Optionally sets the new payment method as the default for future charges.
	//
	// Requires authentication. The payment method must be created client-side
	// using Stripe.js or mobile SDKs before calling this endpoint.
	AddPaymentMethod(context.Context, *connect.Request[v1.AddPaymentMethodRequest]) (*connect.Response[v1.AddPaymentMethodResponse], error)
	// ListPaymentMethods retrieves all saved payment methods for the user.
	//
	// Returns a list of payment methods with security-safe details (last 4 digits,
	// expiry date, brand) and indicates which is set as the default.
	// Only includes payment methods attached to the user's Stripe customer.
	//
	// Requires authentication. Returns empty list if user has no payment methods.
	ListPaymentMethods(context.Context, *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error)
	// GetPaymentHistory retrieves the user's payment and billing history.
	//
	// Returns paginated payment history including successful payments, failed attempts,
	// refunds, and associated invoice details. Includes payment method information
	// and links to Stripe-hosted invoice PDFs.
	//
	// Requires authentication. Supports cursor-based pagination for large histories.
	// Currently returns unimplemented status - implementation in progress.
	GetPaymentHistory(context.Context, *connect.Request[v1.GetPaymentHistoryRequest]) (*connect.Response[v1.GetPaymentHistoryResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := v1.File_api_v1_payment_proto.Services().ByName("PaymentService").Methods()
	paymentServiceAddPaymentMethodHandler := connect.NewUnaryHandler(
		PaymentServiceAddPaymentMethodProcedure,
		svc.AddPaymentMethod,
		connect.WithSchema(paymentServiceMethods.ByName("AddPaymentMethod")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceListPaymentMethodsHandler := connect.NewUnaryHandler(
		PaymentServiceListPaymentMethodsProcedure,
		svc.ListPaymentMethods,
		connect.WithSchema(paymentServiceMethods.ByName("ListPaymentMethods")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetPaymentHistoryHandler := connect.NewUnaryHandler(
		PaymentServiceGetPaymentHistoryProcedure,
		svc.GetPaymentHistory,
		connect.WithSchema(paymentServiceMethods.ByName("GetPaymentHistory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceAddPaymentMethodProcedure:
			paymentServiceAddPaymentMethodHandler.ServeHTTP(w, r)
		case PaymentServiceListPaymentMethodsProcedure:
			paymentServiceListPaymentMethodsHandler.ServeHTTP(w, r)
		case PaymentServiceGetPaymentHistoryProcedure:
			paymentServiceGetPaymentHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) AddPaymentMethod(context.Context, *connect.Request[v1.AddPaymentMethodRequest]) (*connect.Response[v1.AddPaymentMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.PaymentService.AddPaymentMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) ListPaymentMethods(context.Context, *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.PaymentService.ListPaymentMethods is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPaymentHistory(context.Context, *connect.Request[v1.GetPaymentHistoryRequest]) (*connect.Response[v1.GetPaymentHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.PaymentService.GetPaymentHistory is not implemented"))
}
