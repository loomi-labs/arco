// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/subscription.proto

package arcov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/loomi-labs/arco/backend/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubscriptionServiceName is the fully-qualified name of the SubscriptionService service.
	SubscriptionServiceName = "api.v1.SubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriptionServiceGetSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's GetSubscription RPC.
	SubscriptionServiceGetSubscriptionProcedure = "/api.v1.SubscriptionService/GetSubscription"
	// SubscriptionServiceCreateCheckoutSessionProcedure is the fully-qualified name of the
	// SubscriptionService's CreateCheckoutSession RPC.
	SubscriptionServiceCreateCheckoutSessionProcedure = "/api.v1.SubscriptionService/CreateCheckoutSession"
	// SubscriptionServiceWaitForCheckoutCompletionProcedure is the fully-qualified name of the
	// SubscriptionService's WaitForCheckoutCompletion RPC.
	SubscriptionServiceWaitForCheckoutCompletionProcedure = "/api.v1.SubscriptionService/WaitForCheckoutCompletion"
	// SubscriptionServiceCancelSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's CancelSubscription RPC.
	SubscriptionServiceCancelSubscriptionProcedure = "/api.v1.SubscriptionService/CancelSubscription"
	// SubscriptionServiceReactivateSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's ReactivateSubscription RPC.
	SubscriptionServiceReactivateSubscriptionProcedure = "/api.v1.SubscriptionService/ReactivateSubscription"
	// SubscriptionServiceUpgradeSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's UpgradeSubscription RPC.
	SubscriptionServiceUpgradeSubscriptionProcedure = "/api.v1.SubscriptionService/UpgradeSubscription"
	// SubscriptionServiceDowngradeSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's DowngradeSubscription RPC.
	SubscriptionServiceDowngradeSubscriptionProcedure = "/api.v1.SubscriptionService/DowngradeSubscription"
)

// SubscriptionServiceClient is a client for the api.v1.SubscriptionService service.
type SubscriptionServiceClient interface {
	// GetSubscription retrieves the current user's subscription details.
	//
	// Returns the user's active subscription including plan information,
	// billing cycle, storage usage, and current status. Returns null if
	// the user has no active subscription.
	//
	// Requires authentication. Users can only access their own subscription.
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	// CreateCheckoutSession creates a payment checkout session for plan purchase or upgrade.
	//
	// Initiates the payment flow by creating a checkout session with
	// the specified plan and billing cycle. Returns a checkout URL
	// that users can visit to complete payment.
	//
	// Rate limited to prevent abuse. Requires authentication and
	// automatically creates customer if needed.
	//
	// Use WaitForCheckoutCompletion to receive real-time payment status updates.
	CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error)
	// WaitForCheckoutCompletion provides real-time streaming updates for payment completion.
	//
	// Desktop applications should call this immediately after CreateCheckoutSession
	// to receive instant notifications when payment is completed, failed, or expired.
	//
	// The stream automatically times out when the checkout session expires and
	// provides periodic keepalive messages to prevent client timeout.
	WaitForCheckoutCompletion(context.Context, *connect.Request[v1.WaitForCheckoutCompletionRequest]) (*connect.ServerStreamForClient[v1.WaitForCheckoutCompletionResponse], error)
	// CancelSubscription schedules subscription cancellation at the end of the current billing period.
	//
	// Users retain access to their subscription until the current period ends.
	// The subscription can be reactivated before the period ends using ReactivateSubscription.
	//
	// Requires authentication and subscription ownership validation.
	CancelSubscription(context.Context, *connect.Request[v1.CancelSubscriptionRequest]) (*connect.Response[v1.CancelSubscriptionResponse], error)
	// ReactivateSubscription removes scheduled cancellation before it takes effect.
	//
	// Can only be used on subscriptions that are scheduled for cancellation
	// but have not yet been fully canceled. Once a subscription is fully
	// canceled, users must create a new subscription.
	//
	// Requires authentication and subscription ownership validation.
	ReactivateSubscription(context.Context, *connect.Request[v1.ReactivateSubscriptionRequest]) (*connect.Response[v1.ReactivateSubscriptionResponse], error)
	// UpgradeSubscription performs immediate plan upgrade with proration.
	//
	// Upgrades an existing subscription to a higher-tier plan with immediate effect.
	// The upgrade includes proration for the remaining billing period, charging
	// the difference between plans immediately.
	//
	// Requires active subscription and authentication.
	UpgradeSubscription(context.Context, *connect.Request[v1.UpgradeSubscriptionRequest]) (*connect.Response[v1.UpgradeSubscriptionResponse], error)
	// DowngradeSubscription schedules plan downgrades to take effect at the end of the current billing period.
	//
	// Supports downgrades to lower-tier plans with effect at the end of the current billing period.
	// Users retain access to their current plan features until the period ends, then are
	// automatically moved to the lower-tier plan without additional charges.
	//
	// For upgrades to higher tiers, use CreateCheckoutSession instead to collect
	// additional payment through the standard checkout flow.
	//
	// Requires active subscription and authentication.
	DowngradeSubscription(context.Context, *connect.Request[v1.DowngradeSubscriptionRequest]) (*connect.Response[v1.DowngradeSubscriptionResponse], error)
}

// NewSubscriptionServiceClient constructs a client for the api.v1.SubscriptionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	subscriptionServiceMethods := v1.File_api_v1_subscription_proto.Services().ByName("SubscriptionService").Methods()
	return &subscriptionServiceClient{
		getSubscription: connect.NewClient[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceGetSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("GetSubscription")),
			connect.WithClientOptions(opts...),
		),
		createCheckoutSession: connect.NewClient[v1.CreateCheckoutSessionRequest, v1.CreateCheckoutSessionResponse](
			httpClient,
			baseURL+SubscriptionServiceCreateCheckoutSessionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("CreateCheckoutSession")),
			connect.WithClientOptions(opts...),
		),
		waitForCheckoutCompletion: connect.NewClient[v1.WaitForCheckoutCompletionRequest, v1.WaitForCheckoutCompletionResponse](
			httpClient,
			baseURL+SubscriptionServiceWaitForCheckoutCompletionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("WaitForCheckoutCompletion")),
			connect.WithClientOptions(opts...),
		),
		cancelSubscription: connect.NewClient[v1.CancelSubscriptionRequest, v1.CancelSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceCancelSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("CancelSubscription")),
			connect.WithClientOptions(opts...),
		),
		reactivateSubscription: connect.NewClient[v1.ReactivateSubscriptionRequest, v1.ReactivateSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceReactivateSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("ReactivateSubscription")),
			connect.WithClientOptions(opts...),
		),
		upgradeSubscription: connect.NewClient[v1.UpgradeSubscriptionRequest, v1.UpgradeSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceUpgradeSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("UpgradeSubscription")),
			connect.WithClientOptions(opts...),
		),
		downgradeSubscription: connect.NewClient[v1.DowngradeSubscriptionRequest, v1.DowngradeSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionServiceDowngradeSubscriptionProcedure,
			connect.WithSchema(subscriptionServiceMethods.ByName("DowngradeSubscription")),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriptionServiceClient implements SubscriptionServiceClient.
type subscriptionServiceClient struct {
	getSubscription           *connect.Client[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse]
	createCheckoutSession     *connect.Client[v1.CreateCheckoutSessionRequest, v1.CreateCheckoutSessionResponse]
	waitForCheckoutCompletion *connect.Client[v1.WaitForCheckoutCompletionRequest, v1.WaitForCheckoutCompletionResponse]
	cancelSubscription        *connect.Client[v1.CancelSubscriptionRequest, v1.CancelSubscriptionResponse]
	reactivateSubscription    *connect.Client[v1.ReactivateSubscriptionRequest, v1.ReactivateSubscriptionResponse]
	upgradeSubscription       *connect.Client[v1.UpgradeSubscriptionRequest, v1.UpgradeSubscriptionResponse]
	downgradeSubscription     *connect.Client[v1.DowngradeSubscriptionRequest, v1.DowngradeSubscriptionResponse]
}

// GetSubscription calls api.v1.SubscriptionService.GetSubscription.
func (c *subscriptionServiceClient) GetSubscription(ctx context.Context, req *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// CreateCheckoutSession calls api.v1.SubscriptionService.CreateCheckoutSession.
func (c *subscriptionServiceClient) CreateCheckoutSession(ctx context.Context, req *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error) {
	return c.createCheckoutSession.CallUnary(ctx, req)
}

// WaitForCheckoutCompletion calls api.v1.SubscriptionService.WaitForCheckoutCompletion.
func (c *subscriptionServiceClient) WaitForCheckoutCompletion(ctx context.Context, req *connect.Request[v1.WaitForCheckoutCompletionRequest]) (*connect.ServerStreamForClient[v1.WaitForCheckoutCompletionResponse], error) {
	return c.waitForCheckoutCompletion.CallServerStream(ctx, req)
}

// CancelSubscription calls api.v1.SubscriptionService.CancelSubscription.
func (c *subscriptionServiceClient) CancelSubscription(ctx context.Context, req *connect.Request[v1.CancelSubscriptionRequest]) (*connect.Response[v1.CancelSubscriptionResponse], error) {
	return c.cancelSubscription.CallUnary(ctx, req)
}

// ReactivateSubscription calls api.v1.SubscriptionService.ReactivateSubscription.
func (c *subscriptionServiceClient) ReactivateSubscription(ctx context.Context, req *connect.Request[v1.ReactivateSubscriptionRequest]) (*connect.Response[v1.ReactivateSubscriptionResponse], error) {
	return c.reactivateSubscription.CallUnary(ctx, req)
}

// UpgradeSubscription calls api.v1.SubscriptionService.UpgradeSubscription.
func (c *subscriptionServiceClient) UpgradeSubscription(ctx context.Context, req *connect.Request[v1.UpgradeSubscriptionRequest]) (*connect.Response[v1.UpgradeSubscriptionResponse], error) {
	return c.upgradeSubscription.CallUnary(ctx, req)
}

// DowngradeSubscription calls api.v1.SubscriptionService.DowngradeSubscription.
func (c *subscriptionServiceClient) DowngradeSubscription(ctx context.Context, req *connect.Request[v1.DowngradeSubscriptionRequest]) (*connect.Response[v1.DowngradeSubscriptionResponse], error) {
	return c.downgradeSubscription.CallUnary(ctx, req)
}

// SubscriptionServiceHandler is an implementation of the api.v1.SubscriptionService service.
type SubscriptionServiceHandler interface {
	// GetSubscription retrieves the current user's subscription details.
	//
	// Returns the user's active subscription including plan information,
	// billing cycle, storage usage, and current status. Returns null if
	// the user has no active subscription.
	//
	// Requires authentication. Users can only access their own subscription.
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	// CreateCheckoutSession creates a payment checkout session for plan purchase or upgrade.
	//
	// Initiates the payment flow by creating a checkout session with
	// the specified plan and billing cycle. Returns a checkout URL
	// that users can visit to complete payment.
	//
	// Rate limited to prevent abuse. Requires authentication and
	// automatically creates customer if needed.
	//
	// Use WaitForCheckoutCompletion to receive real-time payment status updates.
	CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error)
	// WaitForCheckoutCompletion provides real-time streaming updates for payment completion.
	//
	// Desktop applications should call this immediately after CreateCheckoutSession
	// to receive instant notifications when payment is completed, failed, or expired.
	//
	// The stream automatically times out when the checkout session expires and
	// provides periodic keepalive messages to prevent client timeout.
	WaitForCheckoutCompletion(context.Context, *connect.Request[v1.WaitForCheckoutCompletionRequest], *connect.ServerStream[v1.WaitForCheckoutCompletionResponse]) error
	// CancelSubscription schedules subscription cancellation at the end of the current billing period.
	//
	// Users retain access to their subscription until the current period ends.
	// The subscription can be reactivated before the period ends using ReactivateSubscription.
	//
	// Requires authentication and subscription ownership validation.
	CancelSubscription(context.Context, *connect.Request[v1.CancelSubscriptionRequest]) (*connect.Response[v1.CancelSubscriptionResponse], error)
	// ReactivateSubscription removes scheduled cancellation before it takes effect.
	//
	// Can only be used on subscriptions that are scheduled for cancellation
	// but have not yet been fully canceled. Once a subscription is fully
	// canceled, users must create a new subscription.
	//
	// Requires authentication and subscription ownership validation.
	ReactivateSubscription(context.Context, *connect.Request[v1.ReactivateSubscriptionRequest]) (*connect.Response[v1.ReactivateSubscriptionResponse], error)
	// UpgradeSubscription performs immediate plan upgrade with proration.
	//
	// Upgrades an existing subscription to a higher-tier plan with immediate effect.
	// The upgrade includes proration for the remaining billing period, charging
	// the difference between plans immediately.
	//
	// Requires active subscription and authentication.
	UpgradeSubscription(context.Context, *connect.Request[v1.UpgradeSubscriptionRequest]) (*connect.Response[v1.UpgradeSubscriptionResponse], error)
	// DowngradeSubscription schedules plan downgrades to take effect at the end of the current billing period.
	//
	// Supports downgrades to lower-tier plans with effect at the end of the current billing period.
	// Users retain access to their current plan features until the period ends, then are
	// automatically moved to the lower-tier plan without additional charges.
	//
	// For upgrades to higher tiers, use CreateCheckoutSession instead to collect
	// additional payment through the standard checkout flow.
	//
	// Requires active subscription and authentication.
	DowngradeSubscription(context.Context, *connect.Request[v1.DowngradeSubscriptionRequest]) (*connect.Response[v1.DowngradeSubscriptionResponse], error)
}

// NewSubscriptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionServiceHandler(svc SubscriptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriptionServiceMethods := v1.File_api_v1_subscription_proto.Services().ByName("SubscriptionService").Methods()
	subscriptionServiceGetSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		connect.WithSchema(subscriptionServiceMethods.ByName("GetSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceCreateCheckoutSessionHandler := connect.NewUnaryHandler(
		SubscriptionServiceCreateCheckoutSessionProcedure,
		svc.CreateCheckoutSession,
		connect.WithSchema(subscriptionServiceMethods.ByName("CreateCheckoutSession")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceWaitForCheckoutCompletionHandler := connect.NewServerStreamHandler(
		SubscriptionServiceWaitForCheckoutCompletionProcedure,
		svc.WaitForCheckoutCompletion,
		connect.WithSchema(subscriptionServiceMethods.ByName("WaitForCheckoutCompletion")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceCancelSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceCancelSubscriptionProcedure,
		svc.CancelSubscription,
		connect.WithSchema(subscriptionServiceMethods.ByName("CancelSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceReactivateSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceReactivateSubscriptionProcedure,
		svc.ReactivateSubscription,
		connect.WithSchema(subscriptionServiceMethods.ByName("ReactivateSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceUpgradeSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceUpgradeSubscriptionProcedure,
		svc.UpgradeSubscription,
		connect.WithSchema(subscriptionServiceMethods.ByName("UpgradeSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionServiceDowngradeSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionServiceDowngradeSubscriptionProcedure,
		svc.DowngradeSubscription,
		connect.WithSchema(subscriptionServiceMethods.ByName("DowngradeSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.SubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionServiceGetSubscriptionProcedure:
			subscriptionServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceCreateCheckoutSessionProcedure:
			subscriptionServiceCreateCheckoutSessionHandler.ServeHTTP(w, r)
		case SubscriptionServiceWaitForCheckoutCompletionProcedure:
			subscriptionServiceWaitForCheckoutCompletionHandler.ServeHTTP(w, r)
		case SubscriptionServiceCancelSubscriptionProcedure:
			subscriptionServiceCancelSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceReactivateSubscriptionProcedure:
			subscriptionServiceReactivateSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceUpgradeSubscriptionProcedure:
			subscriptionServiceUpgradeSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceDowngradeSubscriptionProcedure:
			subscriptionServiceDowngradeSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionServiceHandler struct{}

func (UnimplementedSubscriptionServiceHandler) GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.GetSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) CreateCheckoutSession(context.Context, *connect.Request[v1.CreateCheckoutSessionRequest]) (*connect.Response[v1.CreateCheckoutSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.CreateCheckoutSession is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) WaitForCheckoutCompletion(context.Context, *connect.Request[v1.WaitForCheckoutCompletionRequest], *connect.ServerStream[v1.WaitForCheckoutCompletionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.WaitForCheckoutCompletion is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) CancelSubscription(context.Context, *connect.Request[v1.CancelSubscriptionRequest]) (*connect.Response[v1.CancelSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.CancelSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) ReactivateSubscription(context.Context, *connect.Request[v1.ReactivateSubscriptionRequest]) (*connect.Response[v1.ReactivateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.ReactivateSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) UpgradeSubscription(context.Context, *connect.Request[v1.UpgradeSubscriptionRequest]) (*connect.Response[v1.UpgradeSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.UpgradeSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) DowngradeSubscription(context.Context, *connect.Request[v1.DowngradeSubscriptionRequest]) (*connect.Response[v1.DowngradeSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SubscriptionService.DowngradeSubscription is not implemented"))
}
