// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/repository.proto

package arcov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/loomi-labs/arco/backend/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RepositoryServiceName is the fully-qualified name of the RepositoryService service.
	RepositoryServiceName = "api.v1.RepositoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RepositoryServiceAddRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// AddRepository RPC.
	RepositoryServiceAddRepositoryProcedure = "/api.v1.RepositoryService/AddRepository"
	// RepositoryServiceDeleteRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// DeleteRepository RPC.
	RepositoryServiceDeleteRepositoryProcedure = "/api.v1.RepositoryService/DeleteRepository"
	// RepositoryServiceListRepositoriesProcedure is the fully-qualified name of the RepositoryService's
	// ListRepositories RPC.
	RepositoryServiceListRepositoriesProcedure = "/api.v1.RepositoryService/ListRepositories"
	// RepositoryServiceGetRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// GetRepository RPC.
	RepositoryServiceGetRepositoryProcedure = "/api.v1.RepositoryService/GetRepository"
	// RepositoryServiceReplaceSSHKeyProcedure is the fully-qualified name of the RepositoryService's
	// ReplaceSSHKey RPC.
	RepositoryServiceReplaceSSHKeyProcedure = "/api.v1.RepositoryService/ReplaceSSHKey"
)

// RepositoryServiceClient is a client for the api.v1.RepositoryService service.
type RepositoryServiceClient interface {
	// AddRepository creates a new ArcoCloud repository for the authenticated user.
	//
	// Provisions a new repository under the master ArcoCloud account with the
	// specified name, password, location, and SSH key for access. The repository is
	// automatically configured with the user's subscription quota limits.
	//
	// Repository naming: The actual ArcoCloud repository name will be prefixed with
	// the user ID ({user.id}-{name}) for admin console identification, but users
	// will only see the provided name in all client interfaces.
	//
	// Rate limited to prevent ArcoCloud abuse. Requires authentication and active
	// subscription for quota determination.
	//
	// The password should be a strong passphrase for repository encryption.
	// The SSH public key enables secure access to the repository.
	AddRepository(context.Context, *connect.Request[v1.AddRepositoryRequest]) (*connect.Response[v1.AddRepositoryResponse], error)
	// DeleteRepository permanently removes a ArcoCloud repository.
	//
	// Completely deletes the repository and all its backup data from ArcoCloud.
	// This operation is irreversible and will result in permanent data loss.
	//
	// Requires authentication and repository ownership validation.
	// Can only be performed by the repository owner.
	DeleteRepository(context.Context, *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[v1.DeleteRepositoryResponse], error)
	// ListRepositories retrieves all repositories owned by the authenticated user.
	//
	// Returns a list of all ArcoCloud repositories created by the user,
	// including their usage statistics, quotas, and access information.
	//
	// Requires authentication. Users can only see their own repositories.
	ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error)
	// GetRepository retrieves detailed information about a specific repository.
	//
	// Returns complete repository details including current storage usage,
	// quota limits, SSH key fingerprint, and access credentials.
	//
	// Requires authentication and repository ownership validation.
	// Users can only access repositories they own.
	GetRepository(context.Context, *connect.Request[v1.GetRepositoryRequest]) (*connect.Response[v1.GetRepositoryResponse], error)
	// ReplaceSSHKey updates the SSH public key for repository access.
	//
	// Replaces the current SSH key with a new one for secure repository access.
	// The old SSH key is immediately revoked and the new key takes effect.
	//
	// Requires authentication and repository ownership validation.
	// Only one SSH key is supported per repository for security simplicity.
	ReplaceSSHKey(context.Context, *connect.Request[v1.ReplaceSSHKeyRequest]) (*connect.Response[v1.ReplaceSSHKeyResponse], error)
}

// NewRepositoryServiceClient constructs a client for the api.v1.RepositoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RepositoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	repositoryServiceMethods := v1.File_api_v1_repository_proto.Services().ByName("RepositoryService").Methods()
	return &repositoryServiceClient{
		addRepository: connect.NewClient[v1.AddRepositoryRequest, v1.AddRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceAddRepositoryProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("AddRepository")),
			connect.WithClientOptions(opts...),
		),
		deleteRepository: connect.NewClient[v1.DeleteRepositoryRequest, v1.DeleteRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceDeleteRepositoryProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("DeleteRepository")),
			connect.WithClientOptions(opts...),
		),
		listRepositories: connect.NewClient[v1.ListRepositoriesRequest, v1.ListRepositoriesResponse](
			httpClient,
			baseURL+RepositoryServiceListRepositoriesProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("ListRepositories")),
			connect.WithClientOptions(opts...),
		),
		getRepository: connect.NewClient[v1.GetRepositoryRequest, v1.GetRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceGetRepositoryProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("GetRepository")),
			connect.WithClientOptions(opts...),
		),
		replaceSSHKey: connect.NewClient[v1.ReplaceSSHKeyRequest, v1.ReplaceSSHKeyResponse](
			httpClient,
			baseURL+RepositoryServiceReplaceSSHKeyProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("ReplaceSSHKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// repositoryServiceClient implements RepositoryServiceClient.
type repositoryServiceClient struct {
	addRepository    *connect.Client[v1.AddRepositoryRequest, v1.AddRepositoryResponse]
	deleteRepository *connect.Client[v1.DeleteRepositoryRequest, v1.DeleteRepositoryResponse]
	listRepositories *connect.Client[v1.ListRepositoriesRequest, v1.ListRepositoriesResponse]
	getRepository    *connect.Client[v1.GetRepositoryRequest, v1.GetRepositoryResponse]
	replaceSSHKey    *connect.Client[v1.ReplaceSSHKeyRequest, v1.ReplaceSSHKeyResponse]
}

// AddRepository calls api.v1.RepositoryService.AddRepository.
func (c *repositoryServiceClient) AddRepository(ctx context.Context, req *connect.Request[v1.AddRepositoryRequest]) (*connect.Response[v1.AddRepositoryResponse], error) {
	return c.addRepository.CallUnary(ctx, req)
}

// DeleteRepository calls api.v1.RepositoryService.DeleteRepository.
func (c *repositoryServiceClient) DeleteRepository(ctx context.Context, req *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[v1.DeleteRepositoryResponse], error) {
	return c.deleteRepository.CallUnary(ctx, req)
}

// ListRepositories calls api.v1.RepositoryService.ListRepositories.
func (c *repositoryServiceClient) ListRepositories(ctx context.Context, req *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error) {
	return c.listRepositories.CallUnary(ctx, req)
}

// GetRepository calls api.v1.RepositoryService.GetRepository.
func (c *repositoryServiceClient) GetRepository(ctx context.Context, req *connect.Request[v1.GetRepositoryRequest]) (*connect.Response[v1.GetRepositoryResponse], error) {
	return c.getRepository.CallUnary(ctx, req)
}

// ReplaceSSHKey calls api.v1.RepositoryService.ReplaceSSHKey.
func (c *repositoryServiceClient) ReplaceSSHKey(ctx context.Context, req *connect.Request[v1.ReplaceSSHKeyRequest]) (*connect.Response[v1.ReplaceSSHKeyResponse], error) {
	return c.replaceSSHKey.CallUnary(ctx, req)
}

// RepositoryServiceHandler is an implementation of the api.v1.RepositoryService service.
type RepositoryServiceHandler interface {
	// AddRepository creates a new ArcoCloud repository for the authenticated user.
	//
	// Provisions a new repository under the master ArcoCloud account with the
	// specified name, password, location, and SSH key for access. The repository is
	// automatically configured with the user's subscription quota limits.
	//
	// Repository naming: The actual ArcoCloud repository name will be prefixed with
	// the user ID ({user.id}-{name}) for admin console identification, but users
	// will only see the provided name in all client interfaces.
	//
	// Rate limited to prevent ArcoCloud abuse. Requires authentication and active
	// subscription for quota determination.
	//
	// The password should be a strong passphrase for repository encryption.
	// The SSH public key enables secure access to the repository.
	AddRepository(context.Context, *connect.Request[v1.AddRepositoryRequest]) (*connect.Response[v1.AddRepositoryResponse], error)
	// DeleteRepository permanently removes a ArcoCloud repository.
	//
	// Completely deletes the repository and all its backup data from ArcoCloud.
	// This operation is irreversible and will result in permanent data loss.
	//
	// Requires authentication and repository ownership validation.
	// Can only be performed by the repository owner.
	DeleteRepository(context.Context, *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[v1.DeleteRepositoryResponse], error)
	// ListRepositories retrieves all repositories owned by the authenticated user.
	//
	// Returns a list of all ArcoCloud repositories created by the user,
	// including their usage statistics, quotas, and access information.
	//
	// Requires authentication. Users can only see their own repositories.
	ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error)
	// GetRepository retrieves detailed information about a specific repository.
	//
	// Returns complete repository details including current storage usage,
	// quota limits, SSH key fingerprint, and access credentials.
	//
	// Requires authentication and repository ownership validation.
	// Users can only access repositories they own.
	GetRepository(context.Context, *connect.Request[v1.GetRepositoryRequest]) (*connect.Response[v1.GetRepositoryResponse], error)
	// ReplaceSSHKey updates the SSH public key for repository access.
	//
	// Replaces the current SSH key with a new one for secure repository access.
	// The old SSH key is immediately revoked and the new key takes effect.
	//
	// Requires authentication and repository ownership validation.
	// Only one SSH key is supported per repository for security simplicity.
	ReplaceSSHKey(context.Context, *connect.Request[v1.ReplaceSSHKeyRequest]) (*connect.Response[v1.ReplaceSSHKeyResponse], error)
}

// NewRepositoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoryServiceHandler(svc RepositoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	repositoryServiceMethods := v1.File_api_v1_repository_proto.Services().ByName("RepositoryService").Methods()
	repositoryServiceAddRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceAddRepositoryProcedure,
		svc.AddRepository,
		connect.WithSchema(repositoryServiceMethods.ByName("AddRepository")),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceDeleteRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceDeleteRepositoryProcedure,
		svc.DeleteRepository,
		connect.WithSchema(repositoryServiceMethods.ByName("DeleteRepository")),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceListRepositoriesHandler := connect.NewUnaryHandler(
		RepositoryServiceListRepositoriesProcedure,
		svc.ListRepositories,
		connect.WithSchema(repositoryServiceMethods.ByName("ListRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceGetRepositoryProcedure,
		svc.GetRepository,
		connect.WithSchema(repositoryServiceMethods.ByName("GetRepository")),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceReplaceSSHKeyHandler := connect.NewUnaryHandler(
		RepositoryServiceReplaceSSHKeyProcedure,
		svc.ReplaceSSHKey,
		connect.WithSchema(repositoryServiceMethods.ByName("ReplaceSSHKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.RepositoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RepositoryServiceAddRepositoryProcedure:
			repositoryServiceAddRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceDeleteRepositoryProcedure:
			repositoryServiceDeleteRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceListRepositoriesProcedure:
			repositoryServiceListRepositoriesHandler.ServeHTTP(w, r)
		case RepositoryServiceGetRepositoryProcedure:
			repositoryServiceGetRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceReplaceSSHKeyProcedure:
			repositoryServiceReplaceSSHKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRepositoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoryServiceHandler struct{}

func (UnimplementedRepositoryServiceHandler) AddRepository(context.Context, *connect.Request[v1.AddRepositoryRequest]) (*connect.Response[v1.AddRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RepositoryService.AddRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) DeleteRepository(context.Context, *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[v1.DeleteRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RepositoryService.DeleteRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RepositoryService.ListRepositories is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetRepository(context.Context, *connect.Request[v1.GetRepositoryRequest]) (*connect.Response[v1.GetRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RepositoryService.GetRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) ReplaceSSHKey(context.Context, *connect.Request[v1.ReplaceSSHKeyRequest]) (*connect.Response[v1.ReplaceSSHKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.RepositoryService.ReplaceSSHKey is not implemented"))
}
