// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user.proto

package arcov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/loomi-labs/arco/backend/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "arco.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetProfileProcedure is the fully-qualified name of the UserService's GetProfile RPC.
	UserServiceGetProfileProcedure = "/arco.v1.UserService/GetProfile"
	// UserServiceUpdateProfileProcedure is the fully-qualified name of the UserService's UpdateProfile
	// RPC.
	UserServiceUpdateProfileProcedure = "/arco.v1.UserService/UpdateProfile"
)

// UserServiceClient is a client for the arco.v1.UserService service.
type UserServiceClient interface {
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	UpdateProfile(context.Context, *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error)
}

// NewUserServiceClient constructs a client for the arco.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getProfile: connect.NewClient[v1.GetProfileRequest, v1.GetProfileResponse](
			httpClient,
			baseURL+UserServiceGetProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		updateProfile: connect.NewClient[v1.UpdateProfileRequest, v1.UpdateProfileResponse](
			httpClient,
			baseURL+UserServiceUpdateProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getProfile    *connect.Client[v1.GetProfileRequest, v1.GetProfileResponse]
	updateProfile *connect.Client[v1.UpdateProfileRequest, v1.UpdateProfileResponse]
}

// GetProfile calls arco.v1.UserService.GetProfile.
func (c *userServiceClient) GetProfile(ctx context.Context, req *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// UpdateProfile calls arco.v1.UserService.UpdateProfile.
func (c *userServiceClient) UpdateProfile(ctx context.Context, req *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error) {
	return c.updateProfile.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the arco.v1.UserService service.
type UserServiceHandler interface {
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	UpdateProfile(context.Context, *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceGetProfileHandler := connect.NewUnaryHandler(
		UserServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(userServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateProfileHandler := connect.NewUnaryHandler(
		UserServiceUpdateProfileProcedure,
		svc.UpdateProfile,
		connect.WithSchema(userServiceMethods.ByName("UpdateProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arco.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetProfileProcedure:
			userServiceGetProfileHandler.ServeHTTP(w, r)
		case UserServiceUpdateProfileProcedure:
			userServiceUpdateProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arco.v1.UserService.GetProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateProfile(context.Context, *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arco.v1.UserService.UpdateProfile is not implemented"))
}
