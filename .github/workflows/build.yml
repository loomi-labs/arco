name: Build Application

on:
  workflow_call:
    inputs:
      push_artifacts:
        description: 'Whether to push artifacts to releases'
        type: boolean
        required: false
        default: false
      version:
        description: 'Version tag for the build (e.g., v1.1.0)'
        required: false
        type: string
    outputs:
      artifacts:
        description: 'List of built artifacts'
        value: ${{ jobs.build.outputs.artifacts }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # Build Arco for Linux and MacOS
        build: [
          { zip-name: arco-linux, platform: linux/amd64, os: ubuntu-latest },
          { zip-name: arco-macos, platform: darwin/universal, os: macos-latest }
        ]
    runs-on: ${{ matrix.build.os }}
    outputs:
      artifacts: ${{ steps.artifacts.outputs.list }}
    steps:
      # Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # Validate version for release builds
      - name: Validate version for release
        if: inputs.push_artifacts == true
        run: |
          VERSION="${{ inputs.version }}"

          # Check if version is empty
          if [ -z "$VERSION" ]; then
            echo "::error::VERSION is required for release builds but was not provided"
            echo "inputs.version: '${{ inputs.version }}'"
            exit 1
          fi

          # Check if version is 'dev'
          if [ "$VERSION" = "dev" ]; then
            echo "::error::VERSION cannot be 'dev' for release builds"
            echo "inputs.version: '$VERSION'"
            exit 1
          fi

          # Check if version is v0.0.0
          if [ "$VERSION" = "v0.0.0" ]; then
            echo "::error::VERSION cannot be 'v0.0.0' for release builds"
            echo "inputs.version: '$VERSION'"
            exit 1
          fi

          # Validate version format (should start with 'v' and contain digits)
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "::error::VERSION must be in format 'vX.Y.Z' (e.g., v1.2.3)"
            echo "inputs.version: '$VERSION'"
            exit 1
          fi

          echo "✅ Version validation passed: $VERSION"

      - name: Check for relevant changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            build:
              - 'backend/**'
              - 'frontend/**'
              - 'build/**'
              - 'go.mod'
              - 'go.sum'
              - 'package.json'
              - 'Taskfile*.yml'
              - '.github/workflows/build.yml'

      - name: Check if build should run
        id: should-build
        run: |
          # Always build if artifacts should be pushed (release scenario)
          if [ "${{ inputs.push_artifacts }}" = "true" ]; then
            echo "reason=release" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Build required: Release artifacts needed"
          # Build if relevant files changed
          elif [ "${{ steps.changes.outputs.build }}" = "true" ]; then
            echo "reason=changes" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Build required: Relevant files changed"
          # Skip build
          else
            echo "reason=skip" >> $GITHUB_OUTPUT
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Build skipped: No relevant changes and no release"
          fi

      # Setup Golang
      - name: 🐿 Setup Golang
        if: steps.should-build.outputs.should_run == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      # Install task
      - name: Install Task
        if: steps.should-build.outputs.should_run == 'true'
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      # Install pnpm
      - name: Install pnpm
        if: steps.should-build.outputs.should_run == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: 10
      # Install Wails deps
      - name: Install Linux Wails deps
        if: steps.should-build.outputs.should_run == 'true' && runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libgtk-3-0 libwebkit2gtk-4.1-dev gcc-aarch64-linux-gnu jq
        shell: bash
      - name: Install macOS Wails deps
        if: steps.should-build.outputs.should_run == 'true' && runner.os == 'macOS'
        run: brew install mitchellh/gon/gon jq
        shell: bash

      # Building step
      - name: Build App
        if: steps.should-build.outputs.should_run == 'true'
        run: task build PRODUCTION=true
        shell: bash
        env:
          PLATFORM: ${{ matrix.build.platform }}
          VERSION: ${{ inputs.version || 'dev' }}
      
      - name: Add execute permissions
        if: steps.should-build.outputs.should_run == 'true'
        run: chmod +x bin/*
        shell: bash

      # Compress build artifact
      - name: Compress build artifact
        if: steps.should-build.outputs.should_run == 'true'
        id: compress
        run: |
          cd ./bin
          ZIP_NAME="${{ matrix.build.zip-name }}.zip"
          zip -j "../$ZIP_NAME" arco
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "zip_path=$(pwd)/../$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Set artifact list
        if: steps.should-build.outputs.should_run == 'true'
        id: artifacts
        run: |
          echo "list=${{ steps.compress.outputs.zip_name }}" >> $GITHUB_OUTPUT

      # Package and Sign MacOS
#      - name: Import Code-Signing Certificates for macOS
#        if: runner.os == 'macOS' && inputs.sign != 'false' && startsWith(github.ref, 'refs/tags/')
#        uses: Apple-Actions/import-codesign-certs@v1
#        with:
#          keychain-password: ${{ inputs.sign-macos-apple-password }}
#          p12-file-base64: ${{ inputs.sign-macos-app-cert }}
#          p12-password: ${{ inputs.sign-macos-app-cert-password }}
#      - name: Import Code-Signing Certificates for macOS Installer
#        if: runner.os == 'macOS' && inputs.sign != 'false' && startsWith(github.ref, 'refs/tags/')
#        uses: Apple-Actions/import-codesign-certs@v1
#        with:
#          keychain-password: ${{ inputs.sign-macos-apple-password }}
#          p12-file-base64: ${{ inputs.sign-macos-installer-cert }}
#          p12-password: ${{ inputs.sign-macos-installer-cert-password }}
#          create-keychain: false
#      - name: Sign our macOS binary
#        if: runner.os == 'macOS' && inputs.sign != 'false' && startsWith(github.ref, 'refs/tags/')
#        shell: bash
#        env:
#          APPLE_PASSWORD: ${{ inputs.sign-macos-apple-password }}
#        run: |
#          echo "Signing Package"
#          gon -log-level=info ./build/darwin/gon-sign.json
#      - name: Build .app zip file
#        if: runner.os == 'macOS'
#        shell: bash
#        run: |
#          ditto -c -k ./bin/arco.app ${{ matrix.build.zip-name }}.zip
#      - name: Building Installer
#        if: runner.os == 'macOS' && inputs.sign != 'false' && inputs.sign-macos-installer-id != '' && startsWith(github.ref, 'refs/tags/')
#        shell: bash
#        run: |
#          productbuild --sign '${{inputs.sign-macos-installer-id}}' --component ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.app ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.pkg
#      - name: Building Installery
#        if: runner.os == 'macOS' && inputs.sign-macos-installer-id == '' && startsWith(github.ref, 'refs/tags/')
#        shell: bash
#        working-directory: ${{ inputs.app-working-directory }}
#        run: |
#          productbuild --component ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.app ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.pkg
#      - name: Notarising Installer and zip
#        if: runner.os == 'macOS' && inputs.sign != 'false' && startsWith(github.ref, 'refs/tags/')
#        shell: bash
#        working-directory: ${{ inputs.app-working-directory }}
#        env:
#          APPLE_PASSWORD: ${{ inputs.sign-macos-apple-password }}
#        run: |
#          gon -log-level=info ${{ inputs.app-working-directory }}/build/darwin/gon-notarize.json

      # Upload build assets
      - name: Upload build artifacts
        if: steps.should-build.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        id: upload
        with:
          name: ${{ steps.compress.outputs.zip_name }}
          path: ${{ steps.compress.outputs.zip_name }}
          retention-days: 30

      # Upload to release if this is a release build
      - name: Upload to release
        if: steps.should-build.outputs.should_run == 'true' && inputs.push_artifacts && inputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          files: ${{ steps.compress.outputs.zip_name }}
          draft: false
          prerelease: false
