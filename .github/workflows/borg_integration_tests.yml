name: Borg Integration Tests Matrix

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and cache Docker images for Ubuntu testing
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        borg-version: ["1.4.0", "1.4.1"]
        base-image: ["ubuntu-20.04", "ubuntu-22.04", "ubuntu-24.04"]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Borg Client Images
      - name: Build and push Borg client image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/borg-client/${{ matrix.base-image }}.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-client-${{ matrix.borg-version }}-${{ matrix.base-image }}
          build-args: |
            CLIENT_BORG_VERSION=${{ matrix.borg-version }}
          cache-from: type=gha,scope=client-${{ matrix.borg-version }}-${{ matrix.base-image }}
          cache-to: type=gha,mode=max,scope=client-${{ matrix.borg-version }}-${{ matrix.base-image }}

      # Build Borg Server Images (only once per version)
      - name: Build and push Borg server image
        if: matrix.base-image == 'ubuntu-22.04'  # Only build server once per version
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/borg-server/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }}
          build-args: |
            BORG_VERSION=${{ matrix.borg-version }}
          cache-from: type=gha,scope=server-${{ matrix.borg-version }}
          cache-to: type=gha,mode=max,scope=server-${{ matrix.borg-version }}

  # Ubuntu integration tests using Docker
  ubuntu-tests:
    needs: build-images
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Version compatibility matrix
          - os: ubuntu-latest
            borg-version: "1.4.0"
            base-image: ubuntu-22.04
          - os: ubuntu-latest  
            borg-version: "1.4.1"
            base-image: ubuntu-22.04
          # OS compatibility matrix
          - os: ubuntu-20.04
            borg-version: "1.4.1"
            base-image: ubuntu-20.04
          - os: ubuntu-22.04
            borg-version: "1.4.1"
            base-image: ubuntu-22.04
          - os: ubuntu-24.04
            borg-version: "1.4.1"
            base-image: ubuntu-24.04
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create borg-test-network

      - name: Start Borg server container
        run: |
          docker run -d \
            --name borg-server \
            --network borg-test-network \
            -e BORG_VERSION=${{ matrix.borg-version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }}

      - name: Wait for Borg server to be ready
        run: |
          timeout 60 bash -c 'until docker exec borg-server ss -tlnp | grep :22; do sleep 2; done'

      - name: Run integration tests
        run: |
          docker run --rm \
            --name borg-client \
            --network borg-test-network \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${PWD}/docker:/app/docker:ro" \
            -e CLIENT_BORG_VERSION=${{ matrix.borg-version }} \
            -e SERVER_BORG_VERSION=${{ matrix.borg-version }} \
            -e SERVER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }} \
            -e TESTCONTAINERS_RYUK_DISABLED=true \
            -e TESTCONTAINERS_CHECKS_DISABLE=true \
            -e TESTCONTAINERS_NETWORK_STRATEGY=reuse \
            -e TESTCONTAINERS_NETWORK_NAME=borg-test-network \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            --group-add $(getent group docker | cut -d: -f3) \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-client-${{ matrix.borg-version }}-${{ matrix.base-image }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-test-results-${{ matrix.os }}-borg-${{ matrix.borg-version }}-${{ matrix.base-image }}
          path: |
            *.log
            test-results.xml
          retention-days: 30

  # macOS integration tests using native Borg
  macos-tests:
    needs: build-images
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            borg-version: "1.4.1"
          - os: macos-15
            borg-version: "1.4.1"
          - os: macos-latest
            borg-version: "1.4.0"
          - os: macos-latest
            borg-version: "1.4.1"
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install Borg via Homebrew
        run: |
          # Install specific Borg version via Homebrew
          if [ "${{ matrix.borg-version }}" = "1.4.0" ]; then
            # For 1.4.0, we might need to install from a specific formula or build from source
            brew install borgbackup
          else
            # For latest version
            brew install borgbackup
          fi
          
          # Verify installation
          borg --version

      - name: Install Docker via Homebrew
        run: |
          # Install Docker Desktop
          HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask docker
          
          # Start Docker Desktop
          sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended &
          sleep 30
          
          # Wait for Docker to start
          timeout 120 bash -c 'until docker info; do sleep 5; done'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests with Docker server
        run: |
          # Create network and start server
          docker network create borg-test-network
          docker run -d \
            --name borg-server \
            --network borg-test-network \
            -p 2222:22 \
            -e BORG_VERSION=${{ matrix.borg-version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }}
          
          # Wait for server to be ready
          timeout 60 bash -c 'until nc -z localhost 2222; do sleep 2; done'
          
          # Run tests natively with Docker server
          cd backend/borg/integration
          BORG_SERVER_HOST=localhost BORG_SERVER_PORT=2222 go test -v -timeout=10m ./...


      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-test-results-${{ matrix.os }}-borg-${{ matrix.borg-version }}
          path: |
            *.log
            test-results.xml
          retention-days: 30

  # Collect and summarize results
  collect-results:
    needs: [ubuntu-tests, macos-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Borg Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count artifacts and generate summary
          ubuntu_count=$(find . -name "*ubuntu-test-results*" -type d | wc -l)
          macos_count=$(find . -name "*macos-test-results*" -type d | wc -l)
          
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu tests completed: $ubuntu_count" >> $GITHUB_STEP_SUMMARY
          echo "- macOS tests completed: $macos_count" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $ubuntu_count -gt 0 ] || [ $macos_count -gt 0 ]; then
            echo "✅ Integration tests executed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No test results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results-${{ github.sha }}
          path: .
          retention-days: 30