name: Borg Integration Tests Matrix

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and cache Docker images for Ubuntu testing
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        borg-version: ["1.4.0", "1.4.1"]
        base-image: ["ubuntu-20.04", "ubuntu-22.04", "ubuntu-24.04"]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Borg Client Images
      - name: Build and push Borg client image
        timeout-minutes: 20
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/borg-client/${{ matrix.base-image }}.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-client-${{ matrix.borg-version }}-${{ matrix.base-image }}
          build-args: |
            CLIENT_BORG_VERSION=${{ matrix.borg-version }}
          cache-from: type=gha,scope=client-${{ matrix.borg-version }}-${{ matrix.base-image }}
          cache-to: type=gha,mode=max,scope=client-${{ matrix.borg-version }}-${{ matrix.base-image }}

      # Build Borg Server Images (only once per version)
      - name: Build and push Borg server image
        if: matrix.base-image == 'ubuntu-22.04'  # Only build server once per version
        timeout-minutes: 15
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/borg-server/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }}
          build-args: |
            BORG_VERSION=${{ matrix.borg-version }}
          cache-from: type=gha,scope=server-${{ matrix.borg-version }}
          cache-to: type=gha,mode=max,scope=server-${{ matrix.borg-version }}

  # Ubuntu integration tests using Docker
  ubuntu-tests:
    needs: build-images
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Version compatibility matrix
#          - os: ubuntu-latest
#            borg-version: "1.4.0"
#            base-image: ubuntu-22.04
#          - os: ubuntu-latest
#            borg-version: "1.4.1"
#            base-image: ubuntu-22.04
#          # OS compatibility matrix
#          - os: ubuntu-20.04
#            borg-version: "1.4.1"
#            base-image: ubuntu-20.04
#          - os: ubuntu-22.04
#            borg-version: "1.4.1"
#            base-image: ubuntu-22.04
          - os: ubuntu-24.04
            borg-version: "1.4.1"
            base-image: ubuntu-24.04
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests in client container
        timeout-minutes: 15
        run: |
          echo "Running integration tests in client container..."
          
          # Get Docker group ID for proper permissions
          DOCKER_GID=$(stat -c '%g' /var/run/docker.sock)
          
          # Run client container with same approach as script
          docker run --rm \
            --name borg-client-test \
            --privileged \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${PWD}/docker:/app/docker:ro" \
            -e CLIENT_BORG_VERSION=${{ matrix.borg-version }} \
            -e SERVER_BORG_VERSION=${{ matrix.borg-version }} \
            -e SERVER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }} \
            -e TESTCONTAINERS_RYUK_DISABLED=true \
            -e TESTCONTAINERS_CHECKS_DISABLE=true \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            -e TEST_ARGS="-test.v" \
            --group-add "${DOCKER_GID}" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-client-${{ matrix.borg-version }}-${{ matrix.base-image }} || {
            echo "Integration tests failed"
            exit 1
          }

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-test-results-${{ matrix.os }}-borg-${{ matrix.borg-version }}-${{ matrix.base-image }}
          path: |
            *.log
            test-results.xml
          retention-days: 30

  # macOS integration tests using native Borg
  macos-tests:
    needs: build-images
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - os: macos-14
#            borg-version: "1.4.1"
#          - os: macos-15
#            borg-version: "1.4.1"
#          - os: macos-latest
#            borg-version: "1.4.0"
          - os: macos-latest
            borg-version: "1.4.1"
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install and start Colima
        timeout-minutes: 10
        run: |
          # Install Colima as a lightweight Docker runtime for macOS
          brew install colima docker
          
          # Start Colima with minimal resources
          colima start --cpu 2 --memory 4 --disk 10
          
          # Wait for Docker to be ready
          echo "Waiting for Docker to be ready..."
          for i in {1..30}; do
            if docker info >/dev/null 2>&1; then
              echo "✅ Docker is ready!"
              docker version
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Docker failed to start"
              colima status
              exit 1
            fi
            echo "Waiting for Docker... (attempt $i/30)"
            sleep 2
          done

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests in client container
        timeout-minutes: 15
        run: |
          echo "Running integration tests in client container..."
          
          # Get Docker group ID - on macOS with Colima this might be different
          DOCKER_GID=$(stat -f '%g' /var/run/docker.sock)
          
          # For macOS, we need to use a Linux client image (ubuntu-22.04 as default)
          CLIENT_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-client-${{ matrix.borg-version }}-ubuntu-22.04
          
          # Run client container with same approach as script
          docker run --rm \
            --name borg-client-test \
            --privileged \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${PWD}/docker:/app/docker:ro" \
            -e CLIENT_BORG_VERSION=${{ matrix.borg-version }} \
            -e SERVER_BORG_VERSION=${{ matrix.borg-version }} \
            -e SERVER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-server-${{ matrix.borg-version }} \
            -e TESTCONTAINERS_RYUK_DISABLED=true \
            -e TESTCONTAINERS_CHECKS_DISABLE=true \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            -e TEST_ARGS="-test.v" \
            --group-add "${DOCKER_GID}" \
            "${CLIENT_IMAGE}" || {
            echo "Integration tests failed"
            exit 1
          }


      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-test-results-${{ matrix.os }}-borg-${{ matrix.borg-version }}
          path: |
            *.log
            test-results.xml
          retention-days: 30

  # Collect and summarize results
  collect-results:
    needs: [ubuntu-tests, macos-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Borg Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count artifacts and generate summary
          ubuntu_count=$(find . -name "*ubuntu-test-results*" -type d | wc -l)
          macos_count=$(find . -name "*macos-test-results*" -type d | wc -l)
          
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu tests completed: $ubuntu_count" >> $GITHUB_STEP_SUMMARY
          echo "- macOS tests completed: $macos_count" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $ubuntu_count -gt 0 ] || [ $macos_count -gt 0 ]; then
            echo "✅ Integration tests executed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No test results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results-${{ github.sha }}
          path: .
          retention-days: 30