// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * RepositoryClient is a client for repository related operations
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as state$0 from "./state/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "./types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../ent/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function All(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(2526434296).then(($result: any) => {
        return $$createType2($result);
    });
}

export function BreakLock(id: number): $CancellablePromise<void> {
    return $Call.ByID(2942799755, id);
}

export function Create(name: string, location: string, password: string, noPassword: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(612708017, name, location, password, noPassword).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * Delete deletes the repository with the given ID and all its backup profiles if they only have this repository
 * It also deletes the physical repository on disk
 */
export function Delete(id: number): $CancellablePromise<void> {
    return $Call.ByID(2573780214, id);
}

export function DeleteArchive(id: number): $CancellablePromise<void> {
    return $Call.ByID(1586226500, id);
}

export function Get(repoId: number): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(780877459, repoId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetArchiveMountStates(repoId: number): $CancellablePromise<{ [_: `${number}`]: types$0.MountState }> {
    return $Call.ByID(1147463246, repoId).then(($result: any) => {
        return $$createType4($result);
    });
}

/**
 * GetBackupProfilesThatHaveOnlyRepo returns all backup profiles that only have the given repository
 */
export function GetBackupProfilesThatHaveOnlyRepo(repoId: number): $CancellablePromise<(ent$0.BackupProfile | null)[]> {
    return $Call.ByID(1663080506, repoId).then(($result: any) => {
        return $$createType7($result);
    });
}

export function GetByBackupId(bId: types$0.BackupId): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(1271764309, bId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetConnectedRemoteHosts(): $CancellablePromise<string[]> {
    return $Call.ByID(2134730831).then(($result: any) => {
        return $$createType8($result);
    });
}

export function GetLastArchiveByBackupId(backupId: types$0.BackupId): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(3886225341, backupId).then(($result: any) => {
        return $$createType10($result);
    });
}

export function GetLastArchiveByRepoId(repoId: number): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(2588996103, repoId).then(($result: any) => {
        return $$createType10($result);
    });
}

export function GetLastBackupErrorMsg(repoId: number): $CancellablePromise<string> {
    return $Call.ByID(664305602, repoId);
}

export function GetLocked(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(4264571629).then(($result: any) => {
        return $$createType2($result);
    });
}

export function GetNbrOfArchives(repoId: number): $CancellablePromise<number> {
    return $Call.ByID(3772611033, repoId);
}

export function GetPaginatedArchives(req: $models.PaginatedArchivesRequest | null): $CancellablePromise<$models.PaginatedArchivesResponse | null> {
    return $Call.ByID(1668417057, req).then(($result: any) => {
        return $$createType12($result);
    });
}

export function GetPruningDates(archiveIds: number[]): $CancellablePromise<$models.PruningDates> {
    return $Call.ByID(3765996199, archiveIds).then(($result: any) => {
        return $$createType13($result);
    });
}

export function GetRepoMountState(repoId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(1501940089, repoId).then(($result: any) => {
        return $$createType3($result);
    });
}

export function GetState(id: number): $CancellablePromise<state$0.RepoState> {
    return $Call.ByID(2378277252, id).then(($result: any) => {
        return $$createType14($result);
    });
}

export function GetWithActiveMounts(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(2168472827).then(($result: any) => {
        return $$createType2($result);
    });
}

export function IsBorgRepository(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(178334261, path);
}

export function MountArchive(archiveId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(201270564, archiveId).then(($result: any) => {
        return $$createType3($result);
    });
}

export function MountRepository(repoId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(3541128038, repoId).then(($result: any) => {
        return $$createType3($result);
    });
}

export function RefreshArchives(repoId: number): $CancellablePromise<(ent$0.Archive | null)[]> {
    return $Call.ByID(3797315543, repoId).then(($result: any) => {
        return $$createType15($result);
    });
}

/**
 * Remove deletes the repository with the given ID and all its backup profiles if they only have this repository
 * It does not delete the physical repository on disk
 */
export function Remove(id: number): $CancellablePromise<void> {
    return $Call.ByID(3776962993, id);
}

export function RenameArchive(id: number, prefix: string, name: string): $CancellablePromise<void> {
    return $Call.ByID(3353083215, id, prefix, name);
}

export function SaveIntegrityCheckSettings(repoId: number, enabled: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2391017896, repoId, enabled).then(($result: any) => {
        return $$createType1($result);
    });
}

export function TestRepoConnection(path: string, password: string): $CancellablePromise<$models.TestRepoConnectionResult> {
    return $Call.ByID(727566925, path, password).then(($result: any) => {
        return $$createType16($result);
    });
}

export function UnmountAllForRepos(repoIds: number[]): $CancellablePromise<void> {
    return $Call.ByID(2439726606, repoIds);
}

export function UnmountArchive(archiveId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(1173310935, archiveId).then(($result: any) => {
        return $$createType3($result);
    });
}

export function UnmountRepository(repoId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(1515889019, repoId).then(($result: any) => {
        return $$createType3($result);
    });
}

export function Update(repository: ent$0.Repository | null): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2676062496, repository).then(($result: any) => {
        return $$createType1($result);
    });
}

// Private type creation functions
const $$createType0 = ent$0.Repository.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = types$0.MountState.createFrom;
const $$createType4 = $Create.Map($Create.Any, $$createType3);
const $$createType5 = ent$0.BackupProfile.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = $Create.Array($$createType6);
const $$createType8 = $Create.Array($Create.Any);
const $$createType9 = ent$0.Archive.createFrom;
const $$createType10 = $Create.Nullable($$createType9);
const $$createType11 = $models.PaginatedArchivesResponse.createFrom;
const $$createType12 = $Create.Nullable($$createType11);
const $$createType13 = $models.PruningDates.createFrom;
const $$createType14 = state$0.RepoState.createFrom;
const $$createType15 = $Create.Array($$createType10);
const $$createType16 = $models.TestRepoConnectionResult.createFrom;
