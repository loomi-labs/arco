// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../../borg/types/models.js";

export class AuthState {
    "isAuthenticated": boolean;

    /** Creates a new AuthState instance. */
    constructor($$source: Partial<AuthState> = {}) {
        if (!("isAuthenticated" in $$source)) {
            this["isAuthenticated"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AuthState instance from a string or object.
     */
    static createFrom($$source: any = {}): AuthState {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AuthState($$parsedSource as Partial<AuthState>);
    }
}

export enum BackupButtonStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    BackupButtonStatusRunBackup = "runBackup",
    BackupButtonStatusWaiting = "waiting",
    BackupButtonStatusAbort = "abort",
    BackupButtonStatusLocked = "locked",
    BackupButtonStatusUnmount = "unmount",
    BackupButtonStatusBusy = "busy",
};

export class BackupState {
    "status": BackupStatus;
    "progress"?: types$0.BackupProgress | null;
    "error"?: string;

    /** Creates a new BackupState instance. */
    constructor($$source: Partial<BackupState> = {}) {
        if (!("status" in $$source)) {
            this["status"] = BackupStatus.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new BackupState instance from a string or object.
     */
    static createFrom($$source: any = {}): BackupState {
        const $$createField1_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("progress" in $$parsedSource) {
            $$parsedSource["progress"] = $$createField1_0($$parsedSource["progress"]);
        }
        return new BackupState($$parsedSource as Partial<BackupState>);
    }
}

export enum BackupStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    BackupStatusIdle = "idle",
    BackupStatusWaiting = "waiting",
    BackupStatusRunning = "running",
    BackupStatusCompleted = "completed",
    BackupStatusCancelled = "cancelled",
    BackupStatusFailed = "failed",
};

export class CheckoutResult {
    "status": CheckoutResultStatus;
    "errorMessage"?: string;
    "subscriptionId"?: string;

    /** Creates a new CheckoutResult instance. */
    constructor($$source: Partial<CheckoutResult> = {}) {
        if (!("status" in $$source)) {
            this["status"] = CheckoutResultStatus.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CheckoutResult instance from a string or object.
     */
    static createFrom($$source: any = {}): CheckoutResult {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CheckoutResult($$parsedSource as Partial<CheckoutResult>);
    }
}

export enum CheckoutResultStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    CheckoutStatusPending = "pending",
    CheckoutStatusCompleted = "completed",
    CheckoutStatusFailed = "failed",
    CheckoutStatusTimeout = "timeout",
};

export enum RepoErrorAction {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    RepoErrorActionNone = "none",
    RepoErrorActionRegenerateSSH = "regenerateSSH",
};

export enum RepoErrorType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    RepoErrorTypeNone = "none",
    RepoErrorTypeSSHKey = "sshKey",
    RepoErrorTypePassphrase = "passphrase",
};

export class RepoState {
    "status": RepoStatus;
    "errorType": RepoErrorType;
    "errorMessage": string;
    "errorAction": RepoErrorAction;
    "hasWarning": boolean;
    "warningMessage": string;

    /** Creates a new RepoState instance. */
    constructor($$source: Partial<RepoState> = {}) {
        if (!("status" in $$source)) {
            this["status"] = RepoStatus.$zero;
        }
        if (!("errorType" in $$source)) {
            this["errorType"] = RepoErrorType.$zero;
        }
        if (!("errorMessage" in $$source)) {
            this["errorMessage"] = "";
        }
        if (!("errorAction" in $$source)) {
            this["errorAction"] = RepoErrorAction.$zero;
        }
        if (!("hasWarning" in $$source)) {
            this["hasWarning"] = false;
        }
        if (!("warningMessage" in $$source)) {
            this["warningMessage"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RepoState instance from a string or object.
     */
    static createFrom($$source: any = {}): RepoState {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RepoState($$parsedSource as Partial<RepoState>);
    }
}

export enum RepoStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    RepoStatusIdle = "idle",
    RepoStatusBackingUp = "backingUp",
    RepoStatusPruning = "pruning",
    RepoStatusDeleting = "deleting",
    RepoStatusMounted = "mounted",
    RepoStatusPerformingOperation = "performingOperation",
    RepoStatusLocked = "locked",
};

export class StartupState {
    "error": string;
    "status": StartupStatus;

    /** Creates a new StartupState instance. */
    constructor($$source: Partial<StartupState> = {}) {
        if (!("error" in $$source)) {
            this["error"] = "";
        }
        if (!("status" in $$source)) {
            this["status"] = StartupStatus.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StartupState instance from a string or object.
     */
    static createFrom($$source: any = {}): StartupState {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new StartupState($$parsedSource as Partial<StartupState>);
    }
}

export enum StartupStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    StartupStatusUnknown = "unknown",
    StartupStatusCheckingForUpdates = "checkingForUpdates",
    StartupStatusApplyingUpdates = "applyingUpdates",
    StartupStatusRestartingArco = "restartingArco",
    StartupStatusInitializingDatabase = "initializingDatabase",
    StartupStatusCheckingForBorgUpdates = "checkingForBorgUpdates",
    StartupStatusUpdatingBorg = "updatingBorg",
    StartupStatusInitializingApp = "initializingApp",
    StartupStatusReady = "ready",
};

// Private type creation functions
const $$createType0 = types$0.BackupProgress.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
