// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service contains the business logic and provides methods exposed to the frontend
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as arcov1$0 from "../../api/v1/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as state$0 from "../state/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$1 from "../../borg/types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../../ent/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as platform$0 from "../../platform/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AbortBackupJob(id: types$0.BackupId): $CancellablePromise<void> {
    return $Call.ByID(3571784831, id);
}

export function AbortBackupJobs(bIds: types$0.BackupId[]): $CancellablePromise<void> {
    return $Call.ByID(816522980, bIds);
}

export function All(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(3856180219).then(($result: any) => {
        return $$createType2($result);
    });
}

export function BreakLock(id: number): $CancellablePromise<void> {
    return $Call.ByID(4154443424, id);
}

export function ChangePassword(repoId: number, password: string): $CancellablePromise<void> {
    return $Call.ByID(4017714233, repoId, password);
}

export function Create(name: string, location: string, password: string, noPassword: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2087752412, name, location, password, noPassword).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * CreateCloudRepository creates a new ArcoCloud repository
 */
export function CreateCloudRepository(name: string, password: string, location: arcov1$0.RepositoryLocation): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2732947493, name, password, location).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * Delete deletes the repository with the given ID and all its backup profiles if they only have this repository
 * It also deletes the physical repository on disk or cloud
 */
export function Delete(id: number): $CancellablePromise<void> {
    return $Call.ByID(1315454819, id);
}

export function DeleteArchive(id: number): $CancellablePromise<void> {
    return $Call.ByID(2583702267, id);
}

export function ExaminePrunes(backupProfileId: number, pruningRule: ent$0.PruningRule | null, saveResults: boolean): $CancellablePromise<types$0.ExaminePruningResult[]> {
    return $Call.ByID(1748452314, backupProfileId, pruningRule, saveResults).then(($result: any) => {
        return $$createType4($result);
    });
}

export function Get(repoId: number): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(1765610980, repoId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetArchive(id: number): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(731009914, id).then(($result: any) => {
        return $$createType6($result);
    });
}

export function GetArchiveMountStates(repoId: number): $CancellablePromise<{ [_: `${number}`]: platform$0.MountState }> {
    return $Call.ByID(872714797, repoId).then(($result: any) => {
        return $$createType8($result);
    });
}

export function GetBackupButtonStatus(bIds: types$0.BackupId[]): $CancellablePromise<state$0.BackupButtonStatus> {
    return $Call.ByID(3872890060, bIds);
}

/**
 * GetBackupProfilesThatHaveOnlyRepo returns all backup profiles that only have the given repository
 */
export function GetBackupProfilesThatHaveOnlyRepo(repoId: number): $CancellablePromise<(ent$0.BackupProfile | null)[]> {
    return $Call.ByID(3928548141, repoId).then(($result: any) => {
        return $$createType11($result);
    });
}

export function GetBackupState(bId: types$0.BackupId): $CancellablePromise<state$0.BackupState> {
    return $Call.ByID(3112221775, bId).then(($result: any) => {
        return $$createType12($result);
    });
}

export function GetByBackupId(bId: types$0.BackupId): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(4106782590, bId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetCombinedBackupProgress(bIds: types$0.BackupId[]): $CancellablePromise<types$1.BackupProgress | null> {
    return $Call.ByID(1684624602, bIds).then(($result: any) => {
        return $$createType14($result);
    });
}

export function GetConnectedRemoteHosts(): $CancellablePromise<string[]> {
    return $Call.ByID(4007433704).then(($result: any) => {
        return $$createType15($result);
    });
}

export function GetLastArchiveByBackupId(backupId: types$0.BackupId): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(2360629540, backupId).then(($result: any) => {
        return $$createType6($result);
    });
}

export function GetLastArchiveByRepoId(repoId: number): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(3676465958, repoId).then(($result: any) => {
        return $$createType6($result);
    });
}

export function GetLastBackupErrorMsg(repoId: number): $CancellablePromise<string> {
    return $Call.ByID(2883860469, repoId);
}

export function GetLastBackupErrorMsgByBackupId(bId: types$0.BackupId): $CancellablePromise<string> {
    return $Call.ByID(1996917111, bId);
}

export function GetLocked(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(2777371626).then(($result: any) => {
        return $$createType2($result);
    });
}

export function GetNbrOfArchives(repoId: number): $CancellablePromise<number> {
    return $Call.ByID(679620168, repoId);
}

export function GetPaginatedArchives(req: $models.PaginatedArchivesRequest | null): $CancellablePromise<$models.PaginatedArchivesResponse | null> {
    return $Call.ByID(98627984, req).then(($result: any) => {
        return $$createType17($result);
    });
}

export function GetPruningDates(archiveIds: number[]): $CancellablePromise<$models.PruningDates> {
    return $Call.ByID(255069008, archiveIds).then(($result: any) => {
        return $$createType18($result);
    });
}

export function GetRepoMountState(repoId: number): $CancellablePromise<platform$0.MountState> {
    return $Call.ByID(4105855054, repoId).then(($result: any) => {
        return $$createType7($result);
    });
}

export function GetState(id: number): $CancellablePromise<state$0.RepoState> {
    return $Call.ByID(3753695897, id).then(($result: any) => {
        return $$createType19($result);
    });
}

export function GetWithActiveMounts(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(2419498644).then(($result: any) => {
        return $$createType2($result);
    });
}

export function IsBorgRepository(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(1588354504, path);
}

export function MountArchive(archiveId: number): $CancellablePromise<platform$0.MountState> {
    return $Call.ByID(3629366181, archiveId).then(($result: any) => {
        return $$createType7($result);
    });
}

export function MountRepository(repoId: number): $CancellablePromise<platform$0.MountState> {
    return $Call.ByID(1628991477, repoId).then(($result: any) => {
        return $$createType7($result);
    });
}

export function RefreshArchives(repoId: number): $CancellablePromise<(ent$0.Archive | null)[]> {
    return $Call.ByID(2370357240, repoId).then(($result: any) => {
        return $$createType20($result);
    });
}

/**
 * RegenerateSSHKey regenerates SSH key for ArcoCloud repositories
 */
export function RegenerateSSHKey(): $CancellablePromise<void> {
    return $Call.ByID(2889558523);
}

/**
 * Remove deletes the repository with the given ID and all its backup profiles if they only have this repository
 * It does not delete the physical repository on disk
 */
export function Remove(id: number): $CancellablePromise<void> {
    return $Call.ByID(735524320, id);
}

/**
 * RenameArchive requires access to validation client
 */
export function RenameArchive(id: number, prefix: string, name: string): $CancellablePromise<void> {
    return $Call.ByID(1805646144, id, prefix, name);
}

export function RunBorgDelete(bId: types$0.BackupId, location: string, password: string, prefix: string): $CancellablePromise<types$0.DeleteResult> {
    return $Call.ByID(802771302, bId, location, password, prefix);
}

export function SaveIntegrityCheckSettings(repoId: number, enabled: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2513339337, repoId, enabled).then(($result: any) => {
        return $$createType1($result);
    });
}

export function StartBackupJob(bId: types$0.BackupId): $CancellablePromise<void> {
    return $Call.ByID(497978813, bId);
}

export function StartBackupJobs(bIds: types$0.BackupId[]): $CancellablePromise<void> {
    return $Call.ByID(2278112074, bIds);
}

export function StartPruneJob(bId: types$0.BackupId): $CancellablePromise<void> {
    return $Call.ByID(3271049111, bId);
}

export function TestRepoConnection(path: string, password: string): $CancellablePromise<$models.TestRepoConnectionResult> {
    return $Call.ByID(1682953056, path, password).then(($result: any) => {
        return $$createType21($result);
    });
}

export function UnmountAllForRepos(repoIds: number[]): $CancellablePromise<void> {
    return $Call.ByID(2028989399, repoIds);
}

export function UnmountArchive(archiveId: number): $CancellablePromise<platform$0.MountState> {
    return $Call.ByID(1722009978, archiveId).then(($result: any) => {
        return $$createType7($result);
    });
}

export function UnmountRepository(repoId: number): $CancellablePromise<platform$0.MountState> {
    return $Call.ByID(851934984, repoId).then(($result: any) => {
        return $$createType7($result);
    });
}

export function Update(repository: ent$0.Repository | null): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(1664842649, repository).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * ValidateArchiveName validates the name of an archive.
 * The rules are not enforced by the database because we import them from borg repositories which have different rules.
 */
export function ValidateArchiveName(archiveId: number, prefix: string, name: string): $CancellablePromise<string> {
    return $Call.ByID(180251175, archiveId, prefix, name);
}

/**
 * ValidateRepoName validates the name of a repository.
 * The rules are enforced by the database.
 */
export function ValidateRepoName(name: string): $CancellablePromise<string> {
    return $Call.ByID(2441982329, name);
}

/**
 * ValidateRepoPath validates the path of a repository.
 */
export function ValidateRepoPath(path: string, isLocal: boolean): $CancellablePromise<string> {
    return $Call.ByID(1987805649, path, isLocal);
}

// Private type creation functions
const $$createType0 = ent$0.Repository.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = types$0.ExaminePruningResult.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = ent$0.Archive.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = platform$0.MountState.createFrom;
const $$createType8 = $Create.Map($Create.Any, $$createType7);
const $$createType9 = ent$0.BackupProfile.createFrom;
const $$createType10 = $Create.Nullable($$createType9);
const $$createType11 = $Create.Array($$createType10);
const $$createType12 = state$0.BackupState.createFrom;
const $$createType13 = types$1.BackupProgress.createFrom;
const $$createType14 = $Create.Nullable($$createType13);
const $$createType15 = $Create.Array($Create.Any);
const $$createType16 = $models.PaginatedArchivesResponse.createFrom;
const $$createType17 = $Create.Nullable($$createType16);
const $$createType18 = $models.PruningDates.createFrom;
const $$createType19 = state$0.RepoState.createFrom;
const $$createType20 = $Create.Array($$createType6);
const $$createType21 = $models.TestRepoConnectionResult.createFrom;
