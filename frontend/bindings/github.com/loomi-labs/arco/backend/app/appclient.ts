// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * AppClient is a client for application related operations
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as state$0 from "./state/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "./types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../ent/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function GetAllEvents(): Promise<types$0.Event[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2291731178) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetAppInfo(): Promise<$models.AppInfo> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3424893203) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetEnvVars(): Promise<$models.Env> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4207036961) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetNotifications(): Promise<types$0.Notification[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3763006584) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType4($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetSettings(): Promise<ent$0.Settings | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(86417097) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType6($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetStartupState(): Promise<state$0.StartupState> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1848985638) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType7($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetUser(): Promise<$models.User | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2302117383) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType9($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function HandleError(msg: string, fErr: types$0.FrontendError | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4280892152, msg, fErr) as any;
    return $resultPromise;
}

export function SaveSettings(settings: ent$0.Settings | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2023083000, settings) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $models.AppInfo.createFrom;
const $$createType2 = $models.Env.createFrom;
const $$createType3 = types$0.Notification.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = ent$0.Settings.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = state$0.StartupState.createFrom;
const $$createType8 = $models.User.createFrom;
const $$createType9 = $Create.Nullable($$createType8);
