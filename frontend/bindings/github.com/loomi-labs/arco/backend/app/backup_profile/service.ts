// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service contains the business logic for backup profiles
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../../ent/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AddRepositoryToBackupProfile(backupProfileId: number, repositoryId: number): $CancellablePromise<void> {
    return $Call.ByID(3526086703, backupProfileId, repositoryId);
}

export function CreateBackupProfile(backup: ent$0.BackupProfile, repositoryIds: number[]): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(2577817897, backup, repositoryIds).then(($result: any) => {
        return $$createType1($result);
    });
}

export function CreateDirectory(path: string): $CancellablePromise<void> {
    return $Call.ByID(1541730377, path);
}

/**
 * DeleteBackupProfile deletes a backup profile and optionally its archives
 */
export function DeleteBackupProfile(backupProfileId: number, deleteArchives: boolean): $CancellablePromise<void> {
    return $Call.ByID(2961732020, backupProfileId, deleteArchives);
}

export function DoesPathExist(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(994840831, path);
}

export function GetBackupProfile(id: number): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(3013370265, id).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetBackupProfileFilterOptions(repoId: number): $CancellablePromise<$models.BackupProfileFilter[]> {
    return $Call.ByID(3072685743, repoId).then(($result: any) => {
        return $$createType3($result);
    });
}

export function GetBackupProfiles(): $CancellablePromise<(ent$0.BackupProfile | null)[]> {
    return $Call.ByID(2838373214).then(($result: any) => {
        return $$createType4($result);
    });
}

export function GetDirectorySuggestions(): $CancellablePromise<string[]> {
    return $Call.ByID(2763193742).then(($result: any) => {
        return $$createType5($result);
    });
}

export function GetPrefixSuggestion(name: string): $CancellablePromise<string> {
    return $Call.ByID(940095954, name);
}

export function GetPruningOptions(): $CancellablePromise<$models.GetPruningOptionsResponse> {
    return $Call.ByID(3242338265).then(($result: any) => {
        return $$createType6($result);
    });
}

export function IsDirectory(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(653433633, path);
}

export function IsDirectoryEmpty(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(508393962, path);
}

export function NewBackupProfile(): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(1625183835).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * RemoveRepositoryFromBackupProfile removes a repository from a backup profile
 */
export function RemoveRepositoryFromBackupProfile(backupProfileId: number, repositoryId: number, deleteArchives: boolean): $CancellablePromise<void> {
    return $Call.ByID(1486652365, backupProfileId, repositoryId, deleteArchives);
}

export function SaveBackupSchedule(backupProfileId: number, schedule: ent$0.BackupSchedule): $CancellablePromise<void> {
    return $Call.ByID(1589423160, backupProfileId, schedule);
}

export function SavePruningRule(backupId: number, rule: ent$0.PruningRule): $CancellablePromise<ent$0.PruningRule | null> {
    return $Call.ByID(2170098212, backupId, rule).then(($result: any) => {
        return $$createType8($result);
    });
}

export function SelectDirectory(data: $models.SelectDirectoryData): $CancellablePromise<string> {
    return $Call.ByID(3272771389, data);
}

export function StartPruneScheduleChangeListener(): $CancellablePromise<void> {
    return $Call.ByID(3246040019);
}

export function StartScheduleChangeListener(): $CancellablePromise<void> {
    return $Call.ByID(4010538815);
}

export function UpdateBackupProfile(backup: ent$0.BackupProfile): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(3631835510, backup).then(($result: any) => {
        return $$createType1($result);
    });
}

// Private type creation functions
const $$createType0 = ent$0.BackupProfile.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $models.BackupProfileFilter.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $Create.Array($$createType1);
const $$createType5 = $Create.Array($Create.Any);
const $$createType6 = $models.GetPruningOptionsResponse.createFrom;
const $$createType7 = ent$0.PruningRule.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
