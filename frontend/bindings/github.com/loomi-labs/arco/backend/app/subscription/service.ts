// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service contains the business logic and provides methods exposed to the frontend
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as arcov1$0 from "../../api/v1/models.js";

/**
 * CancelSubscription cancels the user's subscription
 */
export function CancelSubscription(subscriptionID: string, immediate: boolean): Promise<arcov1$0.CancelSubscriptionResponse | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2256032254, subscriptionID, immediate) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * CreateCheckoutSession creates a payment checkout session
 */
export function CreateCheckoutSession(planName: string): Promise<arcov1$0.CreateCheckoutSessionResponse | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(54709411, planName) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetSubscription returns the user's current subscription
 */
export function GetSubscription(userID: string): Promise<arcov1$0.GetSubscriptionResponse | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3325132602, userID) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType5($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = arcov1$0.CancelSubscriptionResponse.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = arcov1$0.CreateCheckoutSessionResponse.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = arcov1$0.GetSubscriptionResponse.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
