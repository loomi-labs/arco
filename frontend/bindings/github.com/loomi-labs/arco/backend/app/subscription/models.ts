// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../../time/models.js";

/**
 * PendingChange represents a simplified pending change with only frontend-needed fields
 */
export class PendingChange {
    "id": number;

    /**
     * "Plan Change" or "Billing Cycle Change"
     */
    "change_type": string;

    /**
     * e.g., "BASIC" or "Monthly"
     */
    "old_value": string;

    /**
     * e.g., "PRO" or "Yearly"
     */
    "new_value": string;
    "effective_date": time$0.Time;

    /** Creates a new PendingChange instance. */
    constructor($$source: Partial<PendingChange> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("change_type" in $$source)) {
            this["change_type"] = "";
        }
        if (!("old_value" in $$source)) {
            this["old_value"] = "";
        }
        if (!("new_value" in $$source)) {
            this["new_value"] = "";
        }
        if (!("effective_date" in $$source)) {
            this["effective_date"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PendingChange instance from a string or object.
     */
    static createFrom($$source: any = {}): PendingChange {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PendingChange($$parsedSource as Partial<PendingChange>);
    }
}

/**
 * PendingChanges represents a simplified response with only frontend-needed fields
 */
export class PendingChanges {
    "pending_changes": PendingChange[];

    /** Creates a new PendingChanges instance. */
    constructor($$source: Partial<PendingChanges> = {}) {
        if (!("pending_changes" in $$source)) {
            this["pending_changes"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PendingChanges instance from a string or object.
     */
    static createFrom($$source: any = {}): PendingChanges {
        const $$createField0_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("pending_changes" in $$parsedSource) {
            $$parsedSource["pending_changes"] = $$createField0_0($$parsedSource["pending_changes"]);
        }
        return new PendingChanges($$parsedSource as Partial<PendingChanges>);
    }
}

// Private type creation functions
const $$createType0 = PendingChange.createFrom;
const $$createType1 = $Create.Array($$createType0);
