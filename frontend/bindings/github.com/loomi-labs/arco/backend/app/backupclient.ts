// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * BackupClient is a client for backup related operations
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as state$0 from "./state/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "./types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$1 from "../borg/types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../ent/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AbortBackupJobs(bIds: types$0.BackupId[]): $CancellablePromise<void> {
    return $Call.ByID(158665837, bIds);
}

export function AddRepositoryToBackupProfile(backupProfileId: number, repositoryId: number): $CancellablePromise<void> {
    return $Call.ByID(2277303818, backupProfileId, repositoryId);
}

export function CreateBackupProfile(backup: ent$0.BackupProfile, repositoryIds: number[]): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(1869117442, backup, repositoryIds).then(($result: any) => {
        return $$createType1($result);
    });
}

export function CreateDirectory(path: string): $CancellablePromise<void> {
    return $Call.ByID(384386562, path);
}

export function DeleteBackupProfile(backupProfileId: number, deleteArchives: boolean): $CancellablePromise<void> {
    return $Call.ByID(2748646819, backupProfileId, deleteArchives);
}

export function DoesPathExist(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(2517090612, path);
}

export function ExaminePrunes(backupProfileId: number, pruningRule: ent$0.PruningRule | null, saveResults: boolean): $CancellablePromise<$models.ExaminePruningResult[]> {
    return $Call.ByID(3315475643, backupProfileId, pruningRule, saveResults).then(($result: any) => {
        return $$createType3($result);
    });
}

export function GetBackupButtonStatus(bIds: types$0.BackupId[]): $CancellablePromise<state$0.BackupButtonStatus> {
    return $Call.ByID(1193421857, bIds);
}

export function GetBackupProfile(id: number): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(4228689432, id).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetBackupProfileFilterOptions(repoId: number): $CancellablePromise<$models.BackupProfileFilter[]> {
    return $Call.ByID(169520516, repoId).then(($result: any) => {
        return $$createType5($result);
    });
}

export function GetBackupProfiles(): $CancellablePromise<(ent$0.BackupProfile | null)[]> {
    return $Call.ByID(855020145).then(($result: any) => {
        return $$createType6($result);
    });
}

export function GetCombinedBackupProgress(bIds: types$0.BackupId[]): $CancellablePromise<types$1.BackupProgress | null> {
    return $Call.ByID(2559126927, bIds).then(($result: any) => {
        return $$createType8($result);
    });
}

export function GetDirectorySuggestions(): $CancellablePromise<string[]> {
    return $Call.ByID(2682457829).then(($result: any) => {
        return $$createType9($result);
    });
}

export function GetLastBackupErrorMsg(bId: types$0.BackupId): $CancellablePromise<string> {
    return $Call.ByID(3222434012, bId);
}

export function GetPrefixSuggestion(name: string): $CancellablePromise<string> {
    return $Call.ByID(2653689665, name);
}

export function GetPruningOptions(): $CancellablePromise<$models.GetPruningOptionsResponse> {
    return $Call.ByID(2377421126).then(($result: any) => {
        return $$createType10($result);
    });
}

export function GetState(bId: types$0.BackupId): $CancellablePromise<state$0.BackupState> {
    return $Call.ByID(1185260030, bId).then(($result: any) => {
        return $$createType11($result);
    });
}

export function IsDirectory(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(2744183134, path);
}

export function IsDirectoryEmpty(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(2479767251, path);
}

export function NewBackupProfile(): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(3671076802).then(($result: any) => {
        return $$createType1($result);
    });
}

export function RemoveRepositoryFromBackupProfile(backupProfileId: number, repositoryId: number, deleteArchives: boolean): $CancellablePromise<void> {
    return $Call.ByID(2324600110, backupProfileId, repositoryId, deleteArchives);
}

export function SaveBackupSchedule(backupProfileId: number, schedule: ent$0.BackupSchedule): $CancellablePromise<void> {
    return $Call.ByID(1024354325, backupProfileId, schedule);
}

export function SavePruningRule(backupId: number, rule: ent$0.PruningRule): $CancellablePromise<ent$0.PruningRule | null> {
    return $Call.ByID(519732571, backupId, rule).then(($result: any) => {
        return $$createType13($result);
    });
}

export function SelectDirectory(data: $models.SelectDirectoryData): $CancellablePromise<string> {
    return $Call.ByID(1473199266, data);
}

export function StartBackupJobs(bIds: types$0.BackupId[]): $CancellablePromise<void> {
    return $Call.ByID(1345090683, bIds);
}

export function StartPruneJob(bId: types$0.BackupId): $CancellablePromise<void> {
    return $Call.ByID(2502566490, bId);
}

export function UpdateBackupProfile(backup: ent$0.BackupProfile): $CancellablePromise<ent$0.BackupProfile | null> {
    return $Call.ByID(1168330145, backup).then(($result: any) => {
        return $$createType1($result);
    });
}

// Private type creation functions
const $$createType0 = ent$0.BackupProfile.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $models.ExaminePruningResult.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $models.BackupProfileFilter.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $Create.Array($$createType1);
const $$createType7 = types$1.BackupProgress.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
const $$createType9 = $Create.Array($Create.Any);
const $$createType10 = $models.GetPruningOptionsResponse.createFrom;
const $$createType11 = state$0.BackupState.createFrom;
const $$createType12 = ent$0.PruningRule.createFrom;
const $$createType13 = $Create.Nullable($$createType12);
