// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as statemachine$0 from "../statemachine/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../../ent/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../../time/models.js";

export class ArcoCloud {
    "cloudId": string;

    /** Creates a new ArcoCloud instance. */
    constructor($$source: Partial<ArcoCloud> = {}) {
        if (!("cloudId" in $$source)) {
            this["cloudId"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ArcoCloud instance from a string or object.
     */
    static createFrom($$source: any = {}): ArcoCloud {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ArcoCloud($$parsedSource as Partial<ArcoCloud>);
    }
}

/**
 * ExaminePruningResult represents the result of examining pruning operations
 */
export class ExaminePruningResult {
    "backupId": types$0.BackupId;
    "repositoryName": string;
    "cntArchivesToBeDeleted": number;
    "error"?: any;

    /** Creates a new ExaminePruningResult instance. */
    constructor($$source: Partial<ExaminePruningResult> = {}) {
        if (!("backupId" in $$source)) {
            this["backupId"] = (new types$0.BackupId());
        }
        if (!("repositoryName" in $$source)) {
            this["repositoryName"] = "";
        }
        if (!("cntArchivesToBeDeleted" in $$source)) {
            this["cntArchivesToBeDeleted"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExaminePruningResult instance from a string or object.
     */
    static createFrom($$source: any = {}): ExaminePruningResult {
        const $$createField0_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("backupId" in $$parsedSource) {
            $$parsedSource["backupId"] = $$createField0_0($$parsedSource["backupId"]);
        }
        return new ExaminePruningResult($$parsedSource as Partial<ExaminePruningResult>);
    }
}

/**
 * Repository type variants
 */
export class Local {

    /** Creates a new Local instance. */
    constructor($$source: Partial<Local> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Local instance from a string or object.
     */
    static createFrom($$source: any = {}): Local {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Local($$parsedSource as Partial<Local>);
    }
}

/**
 * LocationType is the discriminator enum for Location
 */
export enum LocationType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    LocationTypeArcoCloud = "ArcoCloud",
    LocationTypeLocal = "Local",
    LocationTypeRemote = "Remote",
};

/**
 * LocationUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
 */
export class LocationUnion {
    /**
     * Discriminator field
     */
    "type": LocationType;

    /**
     * Variant fields - only one will be non-nil
     */
    "local"?: Local | null;
    "remote"?: Remote | null;
    "arcoCloud"?: ArcoCloud | null;

    /** Creates a new LocationUnion instance. */
    constructor($$source: Partial<LocationUnion> = {}) {
        if (!("type" in $$source)) {
            this["type"] = LocationType.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LocationUnion instance from a string or object.
     */
    static createFrom($$source: any = {}): LocationUnion {
        const $$createField1_0 = $$createType2;
        const $$createField2_0 = $$createType4;
        const $$createField3_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("local" in $$parsedSource) {
            $$parsedSource["local"] = $$createField1_0($$parsedSource["local"]);
        }
        if ("remote" in $$parsedSource) {
            $$parsedSource["remote"] = $$createField2_0($$parsedSource["remote"]);
        }
        if ("arcoCloud" in $$parsedSource) {
            $$parsedSource["arcoCloud"] = $$createField3_0($$parsedSource["arcoCloud"]);
        }
        return new LocationUnion($$parsedSource as Partial<LocationUnion>);
    }
}

/**
 * OperationStatus ADT definition
 */
export type OperationStatus = any;

/**
 * OperationStatusType is the discriminator enum for OperationStatus
 */
export enum OperationStatusType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    OperationStatusTypeStatusCompleted = "StatusCompleted",
    OperationStatusTypeStatusExpired = "StatusExpired",
    OperationStatusTypeStatusFailed = "StatusFailed",
    OperationStatusTypeStatusQueued = "StatusQueued",
    OperationStatusTypeStatusRunning = "StatusRunning",
};

/**
 * PaginatedArchivesRequest represents a request for paginated archives
 */
export class PaginatedArchivesRequest {
    /**
     * Required
     */
    "repositoryId": number;
    "page": number;
    "pageSize": number;

    /** Creates a new PaginatedArchivesRequest instance. */
    constructor($$source: Partial<PaginatedArchivesRequest> = {}) {
        if (!("repositoryId" in $$source)) {
            this["repositoryId"] = 0;
        }
        if (!("page" in $$source)) {
            this["page"] = 0;
        }
        if (!("pageSize" in $$source)) {
            this["pageSize"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PaginatedArchivesRequest instance from a string or object.
     */
    static createFrom($$source: any = {}): PaginatedArchivesRequest {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PaginatedArchivesRequest($$parsedSource as Partial<PaginatedArchivesRequest>);
    }
}

/**
 * PaginatedArchivesResponse represents the response for paginated archives
 */
export class PaginatedArchivesResponse {
    "archives": (ent$0.Archive | null)[];
    "total": number;

    /** Creates a new PaginatedArchivesResponse instance. */
    constructor($$source: Partial<PaginatedArchivesResponse> = {}) {
        if (!("archives" in $$source)) {
            this["archives"] = [];
        }
        if (!("total" in $$source)) {
            this["total"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PaginatedArchivesResponse instance from a string or object.
     */
    static createFrom($$source: any = {}): PaginatedArchivesResponse {
        const $$createField0_0 = $$createType9;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("archives" in $$parsedSource) {
            $$parsedSource["archives"] = $$createField0_0($$parsedSource["archives"]);
        }
        return new PaginatedArchivesResponse($$parsedSource as Partial<PaginatedArchivesResponse>);
    }
}

/**
 * PruningDate represents pruning information for a single archive
 */
export class PruningDate {
    "archiveId": number;
    "date": time$0.Time;

    /** Creates a new PruningDate instance. */
    constructor($$source: Partial<PruningDate> = {}) {
        if (!("archiveId" in $$source)) {
            this["archiveId"] = 0;
        }
        if (!("date" in $$source)) {
            this["date"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PruningDate instance from a string or object.
     */
    static createFrom($$source: any = {}): PruningDate {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PruningDate($$parsedSource as Partial<PruningDate>);
    }
}

/**
 * PruningDates represents pruning date information for archives
 */
export class PruningDates {
    "dates": PruningDate[];

    /** Creates a new PruningDates instance. */
    constructor($$source: Partial<PruningDates> = {}) {
        if (!("dates" in $$source)) {
            this["dates"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PruningDates instance from a string or object.
     */
    static createFrom($$source: any = {}): PruningDates {
        const $$createField0_0 = $$createType11;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("dates" in $$parsedSource) {
            $$parsedSource["dates"] = $$createField0_0($$parsedSource["dates"]);
        }
        return new PruningDates($$parsedSource as Partial<PruningDates>);
    }
}

/**
 * QueuedOperation represents a queued repository operation
 */
export class QueuedOperation {
    /**
     * Unique operation ID (UUID) - enables idempotency and deduplication
     */
    "id": string;

    /**
     * ADT containing type and parameters
     */
    "operation": statemachine$0.Operation;

    /**
     * ADT containing status, progress, error
     */
    "status": OperationStatus;
    "repoId": number;
    "createdAt": time$0.Time;

    /**
     * Auto-expire if not started
     */
    "validUntil": time$0.Time;

    /** Creates a new QueuedOperation instance. */
    constructor($$source: Partial<QueuedOperation> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("operation" in $$source)) {
            this["operation"] = null;
        }
        if (!("status" in $$source)) {
            this["status"] = null;
        }
        if (!("repoId" in $$source)) {
            this["repoId"] = 0;
        }
        if (!("createdAt" in $$source)) {
            this["createdAt"] = null;
        }
        if (!("validUntil" in $$source)) {
            this["validUntil"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new QueuedOperation instance from a string or object.
     */
    static createFrom($$source: any = {}): QueuedOperation {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new QueuedOperation($$parsedSource as Partial<QueuedOperation>);
    }
}

export class Remote {

    /** Creates a new Remote instance. */
    constructor($$source: Partial<Remote> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Remote instance from a string or object.
     */
    static createFrom($$source: any = {}): Remote {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Remote($$parsedSource as Partial<Remote>);
    }
}

/**
 * Repository represents the consolidated repository data structure
 */
export class Repository {
    /**
     * Core fields
     */
    "id": number;
    "name": string;
    "url": string;

    /**
     * Repository type with associated data
     */
    "type": LocationUnion;

    /**
     * Current state
     */
    "state": statemachine$0.RepositoryStateUnion;

    /**
     * Metadata
     */
    "archiveCount": number;
    "lastBackupTime"?: time$0.Time | null;
    "lastBackupError"?: string;
    "lastBackupWarning"?: string;
    "storageUsed": number;

    /** Creates a new Repository instance. */
    constructor($$source: Partial<Repository> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("url" in $$source)) {
            this["url"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = (new LocationUnion());
        }
        if (!("state" in $$source)) {
            this["state"] = (new statemachine$0.RepositoryStateUnion());
        }
        if (!("archiveCount" in $$source)) {
            this["archiveCount"] = 0;
        }
        if (!("storageUsed" in $$source)) {
            this["storageUsed"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Repository instance from a string or object.
     */
    static createFrom($$source: any = {}): Repository {
        const $$createField3_0 = $$createType12;
        const $$createField4_0 = $$createType13;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("type" in $$parsedSource) {
            $$parsedSource["type"] = $$createField3_0($$parsedSource["type"]);
        }
        if ("state" in $$parsedSource) {
            $$parsedSource["state"] = $$createField4_0($$parsedSource["state"]);
        }
        return new Repository($$parsedSource as Partial<Repository>);
    }
}

/**
 * RepositoryWithQueue extends Repository with queue information for frontend
 */
export class RepositoryWithQueue {
    /**
     * Core fields
     */
    "id": number;
    "name": string;
    "url": string;

    /**
     * Repository type with associated data
     */
    "type": LocationUnion;

    /**
     * Current state
     */
    "state": statemachine$0.RepositoryStateUnion;

    /**
     * Metadata
     */
    "archiveCount": number;
    "lastBackupTime"?: time$0.Time | null;
    "lastBackupError"?: string;
    "lastBackupWarning"?: string;
    "storageUsed": number;
    "queuedOperations": (QueuedOperation | null)[];
    "activeOperation"?: QueuedOperation | null;

    /** Creates a new RepositoryWithQueue instance. */
    constructor($$source: Partial<RepositoryWithQueue> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("url" in $$source)) {
            this["url"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = (new LocationUnion());
        }
        if (!("state" in $$source)) {
            this["state"] = (new statemachine$0.RepositoryStateUnion());
        }
        if (!("archiveCount" in $$source)) {
            this["archiveCount"] = 0;
        }
        if (!("storageUsed" in $$source)) {
            this["storageUsed"] = 0;
        }
        if (!("queuedOperations" in $$source)) {
            this["queuedOperations"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RepositoryWithQueue instance from a string or object.
     */
    static createFrom($$source: any = {}): RepositoryWithQueue {
        const $$createField3_0 = $$createType12;
        const $$createField4_0 = $$createType13;
        const $$createField10_0 = $$createType16;
        const $$createField11_0 = $$createType15;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("type" in $$parsedSource) {
            $$parsedSource["type"] = $$createField3_0($$parsedSource["type"]);
        }
        if ("state" in $$parsedSource) {
            $$parsedSource["state"] = $$createField4_0($$parsedSource["state"]);
        }
        if ("queuedOperations" in $$parsedSource) {
            $$parsedSource["queuedOperations"] = $$createField10_0($$parsedSource["queuedOperations"]);
        }
        if ("activeOperation" in $$parsedSource) {
            $$parsedSource["activeOperation"] = $$createField11_0($$parsedSource["activeOperation"]);
        }
        return new RepositoryWithQueue($$parsedSource as Partial<RepositoryWithQueue>);
    }
}

/**
 * TestRepoConnectionResult represents the result of testing repository connection
 */
export class TestRepoConnectionResult {
    "success": boolean;
    "needsPassword": boolean;
    "isPasswordValid": boolean;
    "isBorgRepo": boolean;

    /** Creates a new TestRepoConnectionResult instance. */
    constructor($$source: Partial<TestRepoConnectionResult> = {}) {
        if (!("success" in $$source)) {
            this["success"] = false;
        }
        if (!("needsPassword" in $$source)) {
            this["needsPassword"] = false;
        }
        if (!("isPasswordValid" in $$source)) {
            this["isPasswordValid"] = false;
        }
        if (!("isBorgRepo" in $$source)) {
            this["isBorgRepo"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TestRepoConnectionResult instance from a string or object.
     */
    static createFrom($$source: any = {}): TestRepoConnectionResult {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TestRepoConnectionResult($$parsedSource as Partial<TestRepoConnectionResult>);
    }
}

// Private type creation functions
const $$createType0 = types$0.BackupId.createFrom;
const $$createType1 = Local.createFrom;
const $$createType2 = $Create.Nullable($$createType1);
const $$createType3 = Remote.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = ArcoCloud.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = ent$0.Archive.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
const $$createType9 = $Create.Array($$createType8);
const $$createType10 = PruningDate.createFrom;
const $$createType11 = $Create.Array($$createType10);
const $$createType12 = LocationUnion.createFrom;
const $$createType13 = statemachine$0.RepositoryStateUnion.createFrom;
const $$createType14 = QueuedOperation.createFrom;
const $$createType15 = $Create.Nullable($$createType14);
const $$createType16 = $Create.Array($$createType15);
