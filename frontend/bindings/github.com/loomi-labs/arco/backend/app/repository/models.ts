// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as statemachine$0 from "../statemachine/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../../ent/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../../time/models.js";

export class ArcoCloud {
    "cloudId": string;

    /** Creates a new ArcoCloud instance. */
    constructor($$source: Partial<ArcoCloud> = {}) {
        if (!("cloudId" in $$source)) {
            this["cloudId"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ArcoCloud instance from a string or object.
     */
    static createFrom($$source: any = {}): ArcoCloud {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ArcoCloud($$parsedSource as Partial<ArcoCloud>);
    }
}

/**
 * BackupProfileFilter represents filters for backup profiles
 */
export class BackupProfileFilter {
    "id"?: number;
    "name": string;
    "isAllFilter": boolean;
    "isUnknownFilter": boolean;

    /** Creates a new BackupProfileFilter instance. */
    constructor($$source: Partial<BackupProfileFilter> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("isAllFilter" in $$source)) {
            this["isAllFilter"] = false;
        }
        if (!("isUnknownFilter" in $$source)) {
            this["isUnknownFilter"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new BackupProfileFilter instance from a string or object.
     */
    static createFrom($$source: any = {}): BackupProfileFilter {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new BackupProfileFilter($$parsedSource as Partial<BackupProfileFilter>);
    }
}

export class Completed {
    "completedAt": time$0.Time;

    /** Creates a new Completed instance. */
    constructor($$source: Partial<Completed> = {}) {
        if (!("completedAt" in $$source)) {
            this["completedAt"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Completed instance from a string or object.
     */
    static createFrom($$source: any = {}): Completed {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Completed($$parsedSource as Partial<Completed>);
    }
}

/**
 * ExaminePruningResult represents the result of examining pruning operations
 */
export class ExaminePruningResult {
    "backupId": types$0.BackupId;
    "repositoryName": string;
    "cntArchivesToBeDeleted": number;
    "error"?: any;

    /** Creates a new ExaminePruningResult instance. */
    constructor($$source: Partial<ExaminePruningResult> = {}) {
        if (!("backupId" in $$source)) {
            this["backupId"] = (new types$0.BackupId());
        }
        if (!("repositoryName" in $$source)) {
            this["repositoryName"] = "";
        }
        if (!("cntArchivesToBeDeleted" in $$source)) {
            this["cntArchivesToBeDeleted"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExaminePruningResult instance from a string or object.
     */
    static createFrom($$source: any = {}): ExaminePruningResult {
        const $$createField0_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("backupId" in $$parsedSource) {
            $$parsedSource["backupId"] = $$createField0_0($$parsedSource["backupId"]);
        }
        return new ExaminePruningResult($$parsedSource as Partial<ExaminePruningResult>);
    }
}

export class Expired {
    "expiredAt": time$0.Time;

    /** Creates a new Expired instance. */
    constructor($$source: Partial<Expired> = {}) {
        if (!("expiredAt" in $$source)) {
            this["expiredAt"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Expired instance from a string or object.
     */
    static createFrom($$source: any = {}): Expired {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Expired($$parsedSource as Partial<Expired>);
    }
}

export class Failed {
    "error": string;
    "failedAt": time$0.Time;

    /** Creates a new Failed instance. */
    constructor($$source: Partial<Failed> = {}) {
        if (!("error" in $$source)) {
            this["error"] = "";
        }
        if (!("failedAt" in $$source)) {
            this["failedAt"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Failed instance from a string or object.
     */
    static createFrom($$source: any = {}): Failed {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Failed($$parsedSource as Partial<Failed>);
    }
}

/**
 * Repository type variants
 */
export class Local {

    /** Creates a new Local instance. */
    constructor($$source: Partial<Local> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Local instance from a string or object.
     */
    static createFrom($$source: any = {}): Local {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Local($$parsedSource as Partial<Local>);
    }
}

/**
 * LocationType is the discriminator enum for Location
 */
export enum LocationType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    LocationTypeArcoCloud = "ArcoCloud",
    LocationTypeLocal = "Local",
    LocationTypeRemote = "Remote",
};

/**
 * LocationUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
 */
export class LocationUnion {
    /**
     * Discriminator field
     */
    "type": LocationType;

    /**
     * Variant fields - only one will be non-nil
     */
    "local"?: Local | null;
    "remote"?: Remote | null;
    "arcoCloud"?: ArcoCloud | null;

    /** Creates a new LocationUnion instance. */
    constructor($$source: Partial<LocationUnion> = {}) {
        if (!("type" in $$source)) {
            this["type"] = LocationType.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LocationUnion instance from a string or object.
     */
    static createFrom($$source: any = {}): LocationUnion {
        const $$createField1_0 = $$createType2;
        const $$createField2_0 = $$createType4;
        const $$createField3_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("local" in $$parsedSource) {
            $$parsedSource["local"] = $$createField1_0($$parsedSource["local"]);
        }
        if ("remote" in $$parsedSource) {
            $$parsedSource["remote"] = $$createField2_0($$parsedSource["remote"]);
        }
        if ("arcoCloud" in $$parsedSource) {
            $$parsedSource["arcoCloud"] = $$createField3_0($$parsedSource["arcoCloud"]);
        }
        return new LocationUnion($$parsedSource as Partial<LocationUnion>);
    }
}

/**
 * OperationStatusType is the discriminator enum for OperationStatus
 */
export enum OperationStatusType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    OperationStatusTypeCompleted = "Completed",
    OperationStatusTypeExpired = "Expired",
    OperationStatusTypeFailed = "Failed",
    OperationStatusTypeQueued = "Queued",
    OperationStatusTypeRunning = "Running",
};

/**
 * OperationStatusUnion is a concrete struct that Wails3 can serialize to TypeScript discriminated unions
 */
export class OperationStatusUnion {
    /**
     * Discriminator field
     */
    "type": OperationStatusType;

    /**
     * Variant fields - only one will be non-nil
     */
    "queued"?: Queued | null;
    "running"?: Running | null;
    "completed"?: Completed | null;
    "failed"?: Failed | null;
    "expired"?: Expired | null;

    /** Creates a new OperationStatusUnion instance. */
    constructor($$source: Partial<OperationStatusUnion> = {}) {
        if (!("type" in $$source)) {
            this["type"] = OperationStatusType.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OperationStatusUnion instance from a string or object.
     */
    static createFrom($$source: any = {}): OperationStatusUnion {
        const $$createField1_0 = $$createType8;
        const $$createField2_0 = $$createType10;
        const $$createField3_0 = $$createType12;
        const $$createField4_0 = $$createType14;
        const $$createField5_0 = $$createType16;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("queued" in $$parsedSource) {
            $$parsedSource["queued"] = $$createField1_0($$parsedSource["queued"]);
        }
        if ("running" in $$parsedSource) {
            $$parsedSource["running"] = $$createField2_0($$parsedSource["running"]);
        }
        if ("completed" in $$parsedSource) {
            $$parsedSource["completed"] = $$createField3_0($$parsedSource["completed"]);
        }
        if ("failed" in $$parsedSource) {
            $$parsedSource["failed"] = $$createField4_0($$parsedSource["failed"]);
        }
        if ("expired" in $$parsedSource) {
            $$parsedSource["expired"] = $$createField5_0($$parsedSource["expired"]);
        }
        return new OperationStatusUnion($$parsedSource as Partial<OperationStatusUnion>);
    }
}

/**
 * PaginatedArchivesRequest represents a request for paginated archives
 */
export class PaginatedArchivesRequest {
    /**
     * Required
     */
    "repositoryId": number;
    "page": number;
    "pageSize": number;

    /**
     * Optional
     */
    "backupProfileFilter"?: BackupProfileFilter | null;
    "search"?: string;
    "startDate"?: time$0.Time;
    "endDate"?: time$0.Time;

    /** Creates a new PaginatedArchivesRequest instance. */
    constructor($$source: Partial<PaginatedArchivesRequest> = {}) {
        if (!("repositoryId" in $$source)) {
            this["repositoryId"] = 0;
        }
        if (!("page" in $$source)) {
            this["page"] = 0;
        }
        if (!("pageSize" in $$source)) {
            this["pageSize"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PaginatedArchivesRequest instance from a string or object.
     */
    static createFrom($$source: any = {}): PaginatedArchivesRequest {
        const $$createField3_0 = $$createType18;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("backupProfileFilter" in $$parsedSource) {
            $$parsedSource["backupProfileFilter"] = $$createField3_0($$parsedSource["backupProfileFilter"]);
        }
        return new PaginatedArchivesRequest($$parsedSource as Partial<PaginatedArchivesRequest>);
    }
}

/**
 * PaginatedArchivesResponse represents the response for paginated archives
 */
export class PaginatedArchivesResponse {
    "archives": (ent$0.Archive | null)[];
    "total": number;

    /** Creates a new PaginatedArchivesResponse instance. */
    constructor($$source: Partial<PaginatedArchivesResponse> = {}) {
        if (!("archives" in $$source)) {
            this["archives"] = [];
        }
        if (!("total" in $$source)) {
            this["total"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PaginatedArchivesResponse instance from a string or object.
     */
    static createFrom($$source: any = {}): PaginatedArchivesResponse {
        const $$createField0_0 = $$createType21;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("archives" in $$parsedSource) {
            $$parsedSource["archives"] = $$createField0_0($$parsedSource["archives"]);
        }
        return new PaginatedArchivesResponse($$parsedSource as Partial<PaginatedArchivesResponse>);
    }
}

/**
 * Progress represents generic progress information
 */
export class Progress {
    "current": number;
    "total": number;
    "message"?: string;

    /** Creates a new Progress instance. */
    constructor($$source: Partial<Progress> = {}) {
        if (!("current" in $$source)) {
            this["current"] = 0;
        }
        if (!("total" in $$source)) {
            this["total"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Progress instance from a string or object.
     */
    static createFrom($$source: any = {}): Progress {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Progress($$parsedSource as Partial<Progress>);
    }
}

/**
 * PruningDate represents pruning information for a single archive
 */
export class PruningDate {
    "archiveId": number;
    "date": time$0.Time;

    /** Creates a new PruningDate instance. */
    constructor($$source: Partial<PruningDate> = {}) {
        if (!("archiveId" in $$source)) {
            this["archiveId"] = 0;
        }
        if (!("date" in $$source)) {
            this["date"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PruningDate instance from a string or object.
     */
    static createFrom($$source: any = {}): PruningDate {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PruningDate($$parsedSource as Partial<PruningDate>);
    }
}

/**
 * PruningDates represents pruning date information for archives
 */
export class PruningDates {
    "dates": PruningDate[];

    /** Creates a new PruningDates instance. */
    constructor($$source: Partial<PruningDates> = {}) {
        if (!("dates" in $$source)) {
            this["dates"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PruningDates instance from a string or object.
     */
    static createFrom($$source: any = {}): PruningDates {
        const $$createField0_0 = $$createType23;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("dates" in $$parsedSource) {
            $$parsedSource["dates"] = $$createField0_0($$parsedSource["dates"]);
        }
        return new PruningDates($$parsedSource as Partial<PruningDates>);
    }
}

export class Queued {
    /**
     * Position in queue
     */
    "position": number;

    /** Creates a new Queued instance. */
    constructor($$source: Partial<Queued> = {}) {
        if (!("position" in $$source)) {
            this["position"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Queued instance from a string or object.
     */
    static createFrom($$source: any = {}): Queued {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Queued($$parsedSource as Partial<Queued>);
    }
}

export class Remote {

    /** Creates a new Remote instance. */
    constructor($$source: Partial<Remote> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Remote instance from a string or object.
     */
    static createFrom($$source: any = {}): Remote {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Remote($$parsedSource as Partial<Remote>);
    }
}

/**
 * Repository represents the consolidated repository data structure
 */
export class Repository {
    /**
     * Core fields
     */
    "id": number;
    "name": string;
    "url": string;

    /**
     * Repository type with associated data
     */
    "type": LocationUnion;

    /**
     * Current state
     */
    "state": statemachine$0.RepositoryStateUnion;

    /**
     * Metadata
     */
    "archiveCount": number;
    "lastBackupTime"?: time$0.Time | null;
    "lastBackupError"?: string;
    "lastBackupWarning"?: string;
    "storageUsed": number;

    /** Creates a new Repository instance. */
    constructor($$source: Partial<Repository> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("url" in $$source)) {
            this["url"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = (new LocationUnion());
        }
        if (!("state" in $$source)) {
            this["state"] = (new statemachine$0.RepositoryStateUnion());
        }
        if (!("archiveCount" in $$source)) {
            this["archiveCount"] = 0;
        }
        if (!("storageUsed" in $$source)) {
            this["storageUsed"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Repository instance from a string or object.
     */
    static createFrom($$source: any = {}): Repository {
        const $$createField3_0 = $$createType24;
        const $$createField4_0 = $$createType25;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("type" in $$parsedSource) {
            $$parsedSource["type"] = $$createField3_0($$parsedSource["type"]);
        }
        if ("state" in $$parsedSource) {
            $$parsedSource["state"] = $$createField4_0($$parsedSource["state"]);
        }
        return new Repository($$parsedSource as Partial<Repository>);
    }
}

/**
 * RepositoryWithQueue extends Repository with queue information for frontend
 */
export class RepositoryWithQueue {
    /**
     * Core fields
     */
    "id": number;
    "name": string;
    "url": string;

    /**
     * Repository type with associated data
     */
    "type": LocationUnion;

    /**
     * Current state
     */
    "state": statemachine$0.RepositoryStateUnion;

    /**
     * Metadata
     */
    "archiveCount": number;
    "lastBackupTime"?: time$0.Time | null;
    "lastBackupError"?: string;
    "lastBackupWarning"?: string;
    "storageUsed": number;
    "queuedOperations": (SerializableQueuedOperation | null)[];
    "activeOperation"?: SerializableQueuedOperation | null;

    /** Creates a new RepositoryWithQueue instance. */
    constructor($$source: Partial<RepositoryWithQueue> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("url" in $$source)) {
            this["url"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = (new LocationUnion());
        }
        if (!("state" in $$source)) {
            this["state"] = (new statemachine$0.RepositoryStateUnion());
        }
        if (!("archiveCount" in $$source)) {
            this["archiveCount"] = 0;
        }
        if (!("storageUsed" in $$source)) {
            this["storageUsed"] = 0;
        }
        if (!("queuedOperations" in $$source)) {
            this["queuedOperations"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RepositoryWithQueue instance from a string or object.
     */
    static createFrom($$source: any = {}): RepositoryWithQueue {
        const $$createField3_0 = $$createType24;
        const $$createField4_0 = $$createType25;
        const $$createField10_0 = $$createType28;
        const $$createField11_0 = $$createType27;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("type" in $$parsedSource) {
            $$parsedSource["type"] = $$createField3_0($$parsedSource["type"]);
        }
        if ("state" in $$parsedSource) {
            $$parsedSource["state"] = $$createField4_0($$parsedSource["state"]);
        }
        if ("queuedOperations" in $$parsedSource) {
            $$parsedSource["queuedOperations"] = $$createField10_0($$parsedSource["queuedOperations"]);
        }
        if ("activeOperation" in $$parsedSource) {
            $$parsedSource["activeOperation"] = $$createField11_0($$parsedSource["activeOperation"]);
        }
        return new RepositoryWithQueue($$parsedSource as Partial<RepositoryWithQueue>);
    }
}

export class Running {
    "progress"?: Progress | null;
    "startedAt": time$0.Time;

    /** Creates a new Running instance. */
    constructor($$source: Partial<Running> = {}) {
        if (!("startedAt" in $$source)) {
            this["startedAt"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Running instance from a string or object.
     */
    static createFrom($$source: any = {}): Running {
        const $$createField0_0 = $$createType30;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("progress" in $$parsedSource) {
            $$parsedSource["progress"] = $$createField0_0($$parsedSource["progress"]);
        }
        return new Running($$parsedSource as Partial<Running>);
    }
}

/**
 * SerializableQueuedOperation represents a queued repository operation with JSON-serializable Union types
 */
export class SerializableQueuedOperation {
    /**
     * Unique operation ID (UUID) - enables idempotency and deduplication
     */
    "id": string;
    "repoId": number;
    "backupProfileId": number | null;

    /**
     * Serializable operation with type and parameters
     */
    "operationUnion": statemachine$0.OperationUnion;

    /**
     * Serializable status with progress, error
     */
    "statusUnion": OperationStatusUnion;
    "createdAt": time$0.Time;

    /**
     * Auto-expire if not started
     */
    "validUntil": time$0.Time | null;

    /**
     * Must start immediately or fail
     */
    "immediate": boolean;

    /** Creates a new SerializableQueuedOperation instance. */
    constructor($$source: Partial<SerializableQueuedOperation> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("repoId" in $$source)) {
            this["repoId"] = 0;
        }
        if (!("backupProfileId" in $$source)) {
            this["backupProfileId"] = null;
        }
        if (!("operationUnion" in $$source)) {
            this["operationUnion"] = (new statemachine$0.OperationUnion());
        }
        if (!("statusUnion" in $$source)) {
            this["statusUnion"] = (new OperationStatusUnion());
        }
        if (!("createdAt" in $$source)) {
            this["createdAt"] = null;
        }
        if (!("validUntil" in $$source)) {
            this["validUntil"] = null;
        }
        if (!("immediate" in $$source)) {
            this["immediate"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SerializableQueuedOperation instance from a string or object.
     */
    static createFrom($$source: any = {}): SerializableQueuedOperation {
        const $$createField3_0 = $$createType31;
        const $$createField4_0 = $$createType32;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("operationUnion" in $$parsedSource) {
            $$parsedSource["operationUnion"] = $$createField3_0($$parsedSource["operationUnion"]);
        }
        if ("statusUnion" in $$parsedSource) {
            $$parsedSource["statusUnion"] = $$createField4_0($$parsedSource["statusUnion"]);
        }
        return new SerializableQueuedOperation($$parsedSource as Partial<SerializableQueuedOperation>);
    }
}

/**
 * TestRepoConnectionResult represents the result of testing repository connection
 */
export class TestRepoConnectionResult {
    "success": boolean;
    "needsPassword": boolean;
    "isPasswordValid": boolean;
    "isBorgRepo": boolean;

    /** Creates a new TestRepoConnectionResult instance. */
    constructor($$source: Partial<TestRepoConnectionResult> = {}) {
        if (!("success" in $$source)) {
            this["success"] = false;
        }
        if (!("needsPassword" in $$source)) {
            this["needsPassword"] = false;
        }
        if (!("isPasswordValid" in $$source)) {
            this["isPasswordValid"] = false;
        }
        if (!("isBorgRepo" in $$source)) {
            this["isBorgRepo"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TestRepoConnectionResult instance from a string or object.
     */
    static createFrom($$source: any = {}): TestRepoConnectionResult {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TestRepoConnectionResult($$parsedSource as Partial<TestRepoConnectionResult>);
    }
}

/**
 * UpdateRequest represents fields that can be updated for a repository
 */
export class UpdateRequest {
    /**
     * Repository name
     */
    "name"?: string;

    /** Creates a new UpdateRequest instance. */
    constructor($$source: Partial<UpdateRequest> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UpdateRequest instance from a string or object.
     */
    static createFrom($$source: any = {}): UpdateRequest {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UpdateRequest($$parsedSource as Partial<UpdateRequest>);
    }
}

// Private type creation functions
const $$createType0 = types$0.BackupId.createFrom;
const $$createType1 = Local.createFrom;
const $$createType2 = $Create.Nullable($$createType1);
const $$createType3 = Remote.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = ArcoCloud.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = Queued.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
const $$createType9 = Running.createFrom;
const $$createType10 = $Create.Nullable($$createType9);
const $$createType11 = Completed.createFrom;
const $$createType12 = $Create.Nullable($$createType11);
const $$createType13 = Failed.createFrom;
const $$createType14 = $Create.Nullable($$createType13);
const $$createType15 = Expired.createFrom;
const $$createType16 = $Create.Nullable($$createType15);
const $$createType17 = BackupProfileFilter.createFrom;
const $$createType18 = $Create.Nullable($$createType17);
const $$createType19 = ent$0.Archive.createFrom;
const $$createType20 = $Create.Nullable($$createType19);
const $$createType21 = $Create.Array($$createType20);
const $$createType22 = PruningDate.createFrom;
const $$createType23 = $Create.Array($$createType22);
const $$createType24 = LocationUnion.createFrom;
const $$createType25 = statemachine$0.RepositoryStateUnion.createFrom;
const $$createType26 = SerializableQueuedOperation.createFrom;
const $$createType27 = $Create.Nullable($$createType26);
const $$createType28 = $Create.Array($$createType27);
const $$createType29 = Progress.createFrom;
const $$createType30 = $Create.Nullable($$createType29);
const $$createType31 = statemachine$0.OperationUnion.createFrom;
const $$createType32 = OperationStatusUnion.createFrom;
