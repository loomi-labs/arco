// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service contains the business logic and provides methods exposed to the frontend
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as arcov1$0 from "../../api/v1/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as state$0 from "../state/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as statemachine$0 from "../statemachine/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$1 from "../../borg/types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../../ent/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as platform$0 from "../../platform/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * AbortBackup immediately aborts a running backup operation
 */
export function AbortBackup(backupId: types$0.BackupId): $CancellablePromise<void> {
    return $Call.ByID(1933267942, backupId);
}

/**
 * AbortBackupJobs is an alias for AbortBackups
 */
export function AbortBackupJobs(backupIds: types$0.BackupId[]): $CancellablePromise<void> {
    return $Call.ByID(2061823790, backupIds);
}

/**
 * AbortBackups aborts multiple running backup operations
 */
export function AbortBackups(backupIds: types$0.BackupId[]): $CancellablePromise<void> {
    return $Call.ByID(4217672591, backupIds);
}

/**
 * All retrieves all repositories
 */
export function All(): $CancellablePromise<($models.Repository | null)[]> {
    return $Call.ByID(593256237).then(($result: any) => {
        return $$createType2($result);
    });
}

/**
 * AllWithQueue retrieves all repositories with queue information
 */
export function AllWithQueue(): $CancellablePromise<($models.RepositoryWithQueue | null)[]> {
    return $Call.ByID(2041334972).then(($result: any) => {
        return $$createType5($result);
    });
}

/**
 * BreakLock breaks a repository lock
 */
export function BreakLock(repoId: number): $CancellablePromise<void> {
    return $Call.ByID(4281482770, repoId);
}

/**
 * CancelOperation cancels a queued or running operation
 */
export function CancelOperation(repositoryId: number, operationId: string): $CancellablePromise<void> {
    return $Call.ByID(3062607757, repositoryId, operationId);
}

/**
 * ChangePassword changes the password for a repository
 */
export function ChangePassword(repoId: number, password: string): $CancellablePromise<void> {
    return $Call.ByID(2850019591, repoId, password);
}

/**
 * Create creates a new repository
 */
export function Create(name: string, location: string, password: string, noPassword: boolean): $CancellablePromise<$models.Repository | null> {
    return $Call.ByID(3296679418, name, location, password, noPassword).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * CreateCloudRepository creates a new ArcoCloud repository
 */
export function CreateCloudRepository(name: string, password: string, location: arcov1$0.RepositoryLocation): $CancellablePromise<$models.Repository | null> {
    return $Call.ByID(2968644739, name, password, location).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * Delete deletes a repository completely. This cancels all other operations
 */
export function Delete(id: number): $CancellablePromise<void> {
    return $Call.ByID(1592048265, id);
}

/**
 * ExaminePrunes analyzes what would be pruned with given rules
 */
export function ExaminePrunes(backupProfileId: number, pruningRule: ent$0.PruningRule | null, saveResults: boolean): $CancellablePromise<$models.ExaminePruningResult[]> {
    return $Call.ByID(166629156, backupProfileId, pruningRule, saveResults).then(($result: any) => {
        return $$createType7($result);
    });
}

/**
 * Get retrieves a repository by ID
 */
export function Get(repoId: number): $CancellablePromise<$models.Repository | null> {
    return $Call.ByID(2350435594, repoId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetActiveOperation(repoId: number, operationType: statemachine$0.OperationType | null): $CancellablePromise<$models.SerializableQueuedOperation | null> {
    return $Call.ByID(3370809829, repoId, operationType).then(($result: any) => {
        return $$createType9($result);
    });
}

/**
 * GetArchiveMountStates gets archive mount states for a repository
 */
export function GetArchiveMountStates(repoId: number): $CancellablePromise<{ [_: `${number}`]: platform$0.MountState | null }> {
    return $Call.ByID(1005351287, repoId).then(($result: any) => {
        return $$createType12($result);
    });
}

/**
 * GetBackupButtonStatus gets backup button status for given backup IDs
 */
export function GetBackupButtonStatus(backupIds: types$0.BackupId[]): $CancellablePromise<state$0.BackupButtonStatus> {
    return $Call.ByID(1281128506, backupIds);
}

/**
 * GetBackupProfilesThatHaveOnlyRepo gets backup profiles that only have this repo
 */
export function GetBackupProfilesThatHaveOnlyRepo(repoId: number): $CancellablePromise<(ent$0.BackupProfile | null)[]> {
    return $Call.ByID(2432944859, repoId).then(($result: any) => {
        return $$createType15($result);
    });
}

/**
 * GetBackupState gets backup state for given backup ID
 */
export function GetBackupState(backupId: types$0.BackupId): $CancellablePromise<statemachine$0.Backup | null> {
    return $Call.ByID(2620182497, backupId).then(($result: any) => {
        return $$createType17($result);
    });
}

/**
 * GetByBackupId retrieves a repository by backup ID
 */
export function GetByBackupId(bId: types$0.BackupId): $CancellablePromise<$models.Repository | null> {
    return $Call.ByID(1062575188, bId).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * GetCombinedBackupProgress gets backup progress for given backup IDs
 */
export function GetCombinedBackupProgress(backupIds: types$0.BackupId[]): $CancellablePromise<types$1.BackupProgress | null> {
    return $Call.ByID(3581877548, backupIds).then(($result: any) => {
        return $$createType19($result);
    });
}

/**
 * GetConnectedRemoteHosts gets connected remote hosts
 */
export function GetConnectedRemoteHosts(): $CancellablePromise<string[]> {
    return $Call.ByID(423138286).then(($result: any) => {
        return $$createType20($result);
    });
}

/**
 * GetLastArchiveByBackupId gets last archive for backup profile
 */
export function GetLastArchiveByBackupId(backupId: types$0.BackupId): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(2844713878, backupId).then(($result: any) => {
        return $$createType22($result);
    });
}

/**
 * GetLastArchiveByRepoId gets last archive for repository
 */
export function GetLastArchiveByRepoId(repoId: number): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(3556071828, repoId).then(($result: any) => {
        return $$createType22($result);
    });
}

export function GetLastBackupErrorMsgByBackupId(backupId: types$0.BackupId): $CancellablePromise<string> {
    return $Call.ByID(4136556109, backupId);
}

/**
 * GetPaginatedArchives retrieves paginated archives for a repository
 */
export function GetPaginatedArchives(req: $models.PaginatedArchivesRequest | null): $CancellablePromise<$models.PaginatedArchivesResponse | null> {
    return $Call.ByID(3644900762, req).then(($result: any) => {
        return $$createType24($result);
    });
}

/**
 * GetPruningDates retrieves pruning dates for specified archives
 */
export function GetPruningDates(archiveIds: number[]): $CancellablePromise<$models.PruningDates> {
    return $Call.ByID(2102076250, archiveIds).then(($result: any) => {
        return $$createType25($result);
    });
}

/**
 * GetQueuedOperations returns all operations for a repository, optionally filtered by operation type
 */
export function GetQueuedOperations(repoId: number, operationType: statemachine$0.OperationType | null): $CancellablePromise<($models.SerializableQueuedOperation | null)[]> {
    return $Call.ByID(1376269121, repoId, operationType).then(($result: any) => {
        return $$createType26($result);
    });
}

/**
 * GetState returns the current state of a repository
 */
export function GetState(repositoryId: number): $CancellablePromise<statemachine$0.RepositoryState | null> {
    return $Call.ByID(3151631583, repositoryId);
}

/**
 * GetWithQueue retrieves a repository with queue information
 */
export function GetWithQueue(repoId: number): $CancellablePromise<$models.RepositoryWithQueue | null> {
    return $Call.ByID(144266353, repoId).then(($result: any) => {
        return $$createType4($result);
    });
}

/**
 * IsBorgRepository checks if a path contains a borg repository
 */
export function IsBorgRepository(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(101129870, path);
}

/**
 * Mount mounts a repository
 */
export function Mount(repoId: number): $CancellablePromise<string> {
    return $Call.ByID(967190463, repoId);
}

/**
 * MountArchive mounts a specific archive
 */
export function MountArchive(archiveId: number): $CancellablePromise<string> {
    return $Call.ByID(1226599023, archiveId);
}

/**
 * QueueArchiveDelete queues an archive deletion operation
 */
export function QueueArchiveDelete(archiveId: number): $CancellablePromise<string> {
    return $Call.ByID(3548195286, archiveId);
}

/**
 * QueueArchiveRename queues an archive rename operation
 */
export function QueueArchiveRename(archiveId: number, prefix: string, name: string): $CancellablePromise<string> {
    return $Call.ByID(4267028159, archiveId, prefix, name);
}

/**
 * QueueBackup queues a backup operation
 */
export function QueueBackup(backupId: types$0.BackupId): $CancellablePromise<string> {
    return $Call.ByID(875725915, backupId);
}

/**
 * QueueBackups queues multiple backup operations (convenience method)
 */
export function QueueBackups(backupIds: types$0.BackupId[]): $CancellablePromise<string[]> {
    return $Call.ByID(1401293560, backupIds).then(($result: any) => {
        return $$createType20($result);
    });
}

/**
 * QueuePrune queues a prune operation
 */
export function QueuePrune(backupId: types$0.BackupId): $CancellablePromise<string> {
    return $Call.ByID(295202139, backupId);
}

/**
 * RefreshArchives refreshes all archives of a repository
 */
export function RefreshArchives(repoId: number): $CancellablePromise<string> {
    return $Call.ByID(812894242, repoId);
}

/**
 * RegenerateSSHKey regenerates SSH key for ArcoCloud repositories
 */
export function RegenerateSSHKey(): $CancellablePromise<void> {
    return $Call.ByID(3683576253);
}

/**
 * Remove removes a repository from database only (does not delete physical repo)
 */
export function Remove(id: number): $CancellablePromise<void> {
    return $Call.ByID(2560302714, id);
}

/**
 * RenameArchive is an alias for QueueArchiveRename
 */
export function RenameArchive(archiveId: number, prefix: string, name: string): $CancellablePromise<string> {
    return $Call.ByID(1548605398, archiveId, prefix, name);
}

/**
 * SaveIntegrityCheckSettings saves integrity check settings
 */
export function SaveIntegrityCheckSettings(repoId: number, enabled: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2401324943, repoId, enabled).then(($result: any) => {
        return $$createType28($result);
    });
}

/**
 * StartBackupJobs is an alias for QueueBackups
 */
export function StartBackupJobs(backupIds: types$0.BackupId[]): $CancellablePromise<string[]> {
    return $Call.ByID(1937468008, backupIds).then(($result: any) => {
        return $$createType20($result);
    });
}

/**
 * StartPruneJob is an alias for QueuePrune
 */
export function StartPruneJob(backupId: types$0.BackupId): $CancellablePromise<string> {
    return $Call.ByID(889384509, backupId);
}

/**
 * TestRepoConnection tests connection to a repository
 */
export function TestRepoConnection(path: string, password: string): $CancellablePromise<$models.TestRepoConnectionResult> {
    return $Call.ByID(1151269054, path, password).then(($result: any) => {
        return $$createType29($result);
    });
}

/**
 * Unmount unmounts a repository
 */
export function Unmount(repoId: number): $CancellablePromise<string> {
    return $Call.ByID(3507624802, repoId);
}

/**
 * UnmountAllForRepos unmounts all mounts for specified repositories
 */
export function UnmountAllForRepos(repoIds: number[]): $CancellablePromise<any[]> {
    return $Call.ByID(1105783937, repoIds).then(($result: any) => {
        return $$createType30($result);
    });
}

/**
 * UnmountArchive unmounts a specific archive
 */
export function UnmountArchive(archiveId: number): $CancellablePromise<string> {
    return $Call.ByID(2999465112, archiveId);
}

/**
 * Update updates a repository with provided changes
 */
export function Update(repoId: number, updateReq: $models.UpdateRequest | null): $CancellablePromise<$models.Repository | null> {
    return $Call.ByID(3450666087, repoId, updateReq).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * ValidateArchiveName validates an archive name
 */
export function ValidateArchiveName(archiveId: number, prefix: string, name: string): $CancellablePromise<string> {
    return $Call.ByID(392924285, archiveId, prefix, name);
}

/**
 * ValidateRepoName validates a repository name
 */
export function ValidateRepoName(name: string): $CancellablePromise<string> {
    return $Call.ByID(3060066791, name);
}

/**
 * ValidateRepoPath validates a repository path
 */
export function ValidateRepoPath(path: string, isLocal: boolean): $CancellablePromise<string> {
    return $Call.ByID(2882211019, path, isLocal);
}

// Private type creation functions
const $$createType0 = $models.Repository.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $models.RepositoryWithQueue.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $models.ExaminePruningResult.createFrom;
const $$createType7 = $Create.Array($$createType6);
const $$createType8 = $models.SerializableQueuedOperation.createFrom;
const $$createType9 = $Create.Nullable($$createType8);
const $$createType10 = platform$0.MountState.createFrom;
const $$createType11 = $Create.Nullable($$createType10);
const $$createType12 = $Create.Map($Create.Any, $$createType11);
const $$createType13 = ent$0.BackupProfile.createFrom;
const $$createType14 = $Create.Nullable($$createType13);
const $$createType15 = $Create.Array($$createType14);
const $$createType16 = statemachine$0.Backup.createFrom;
const $$createType17 = $Create.Nullable($$createType16);
const $$createType18 = types$1.BackupProgress.createFrom;
const $$createType19 = $Create.Nullable($$createType18);
const $$createType20 = $Create.Array($Create.Any);
const $$createType21 = ent$0.Archive.createFrom;
const $$createType22 = $Create.Nullable($$createType21);
const $$createType23 = $models.PaginatedArchivesResponse.createFrom;
const $$createType24 = $Create.Nullable($$createType23);
const $$createType25 = $models.PruningDates.createFrom;
const $$createType26 = $Create.Array($$createType9);
const $$createType27 = ent$0.Repository.createFrom;
const $$createType28 = $Create.Nullable($$createType27);
const $$createType29 = $models.TestRepoConnectionResult.createFrom;
const $$createType30 = $Create.Array($Create.Any);
