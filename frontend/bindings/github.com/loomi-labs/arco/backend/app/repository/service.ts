// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service contains the business logic and provides methods exposed to the frontend
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as arcov1$0 from "../../api/v1/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as state$0 from "../state/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ent$0 from "../../ent/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function All(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(593256237).then(($result: any) => {
        return $$createType2($result);
    });
}

export function BreakLock(id: number): $CancellablePromise<void> {
    return $Call.ByID(4281482770, id);
}

export function Create(name: string, location: string, password: string, noPassword: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(3296679418, name, location, password, noPassword).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * CreateCloudRepository creates a new ArcoCloud repository
 */
export function CreateCloudRepository(name: string, password: string, location: arcov1$0.RepositoryLocation): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2968644739, name, password, location).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * Delete deletes the repository with the given ID and all its backup profiles if they only have this repository
 * It also deletes the physical repository on disk or cloud
 */
export function Delete(id: number): $CancellablePromise<void> {
    return $Call.ByID(1592048265, id);
}

export function DeleteArchive(id: number): $CancellablePromise<void> {
    return $Call.ByID(2710326337, id);
}

export function Get(repoId: number): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2350435594, repoId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetArchive(id: number): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(3790326640, id).then(($result: any) => {
        return $$createType4($result);
    });
}

export function GetArchiveMountStates(repoId: number): $CancellablePromise<{ [_: `${number}`]: types$0.MountState }> {
    return $Call.ByID(1005351287, repoId).then(($result: any) => {
        return $$createType6($result);
    });
}

/**
 * GetBackupProfilesThatHaveOnlyRepo returns all backup profiles that only have the given repository
 */
export function GetBackupProfilesThatHaveOnlyRepo(repoId: number): $CancellablePromise<(ent$0.BackupProfile | null)[]> {
    return $Call.ByID(2432944859, repoId).then(($result: any) => {
        return $$createType9($result);
    });
}

export function GetByBackupId(bId: types$0.BackupId): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(1062575188, bId).then(($result: any) => {
        return $$createType1($result);
    });
}

export function GetConnectedRemoteHosts(): $CancellablePromise<string[]> {
    return $Call.ByID(423138286).then(($result: any) => {
        return $$createType10($result);
    });
}

export function GetLastArchiveByBackupId(backupId: types$0.BackupId): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(2844713878, backupId).then(($result: any) => {
        return $$createType4($result);
    });
}

export function GetLastArchiveByRepoId(repoId: number): $CancellablePromise<ent$0.Archive | null> {
    return $Call.ByID(3556071828, repoId).then(($result: any) => {
        return $$createType4($result);
    });
}

export function GetLastBackupErrorMsg(repoId: number): $CancellablePromise<string> {
    return $Call.ByID(2621487963, repoId);
}

export function GetLocked(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(1830241644).then(($result: any) => {
        return $$createType2($result);
    });
}

export function GetNbrOfArchives(repoId: number): $CancellablePromise<number> {
    return $Call.ByID(17058278, repoId);
}

export function GetPaginatedArchives(req: $models.PaginatedArchivesRequest | null): $CancellablePromise<$models.PaginatedArchivesResponse | null> {
    return $Call.ByID(3644900762, req).then(($result: any) => {
        return $$createType12($result);
    });
}

export function GetPruningDates(archiveIds: number[]): $CancellablePromise<$models.PruningDates> {
    return $Call.ByID(2102076250, archiveIds).then(($result: any) => {
        return $$createType13($result);
    });
}

export function GetRepoMountState(repoId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(2042207536, repoId).then(($result: any) => {
        return $$createType5($result);
    });
}

export function GetState(id: number): $CancellablePromise<state$0.RepoState> {
    return $Call.ByID(3151631583, id).then(($result: any) => {
        return $$createType14($result);
    });
}

export function GetWithActiveMounts(): $CancellablePromise<(ent$0.Repository | null)[]> {
    return $Call.ByID(518029914).then(($result: any) => {
        return $$createType2($result);
    });
}

export function IsBorgRepository(path: string): $CancellablePromise<boolean> {
    return $Call.ByID(101129870, path);
}

export function MountArchive(archiveId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(1226599023, archiveId).then(($result: any) => {
        return $$createType5($result);
    });
}

export function MountRepository(repoId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(3803510467, repoId).then(($result: any) => {
        return $$createType5($result);
    });
}

export function RefreshArchives(repoId: number): $CancellablePromise<(ent$0.Archive | null)[]> {
    return $Call.ByID(812894242, repoId).then(($result: any) => {
        return $$createType15($result);
    });
}

/**
 * Remove deletes the repository with the given ID and all its backup profiles if they only have this repository
 * It does not delete the physical repository on disk
 */
export function Remove(id: number): $CancellablePromise<void> {
    return $Call.ByID(2560302714, id);
}

/**
 * RenameArchive requires access to validation client
 */
export function RenameArchive(id: number, prefix: string, name: string): $CancellablePromise<void> {
    return $Call.ByID(1548605398, id, prefix, name);
}

export function SaveIntegrityCheckSettings(repoId: number, enabled: boolean): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(2401324943, repoId, enabled).then(($result: any) => {
        return $$createType1($result);
    });
}

export function TestRepoConnection(path: string, password: string): $CancellablePromise<$models.TestRepoConnectionResult> {
    return $Call.ByID(1151269054, path, password).then(($result: any) => {
        return $$createType16($result);
    });
}

export function UnmountAllForRepos(repoIds: number[]): $CancellablePromise<void> {
    return $Call.ByID(1105783937, repoIds);
}

export function UnmountArchive(archiveId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(2999465112, archiveId).then(($result: any) => {
        return $$createType5($result);
    });
}

export function UnmountRepository(repoId: number): $CancellablePromise<types$0.MountState> {
    return $Call.ByID(2002243586, repoId).then(($result: any) => {
        return $$createType5($result);
    });
}

export function Update(repository: ent$0.Repository | null): $CancellablePromise<ent$0.Repository | null> {
    return $Call.ByID(3450666087, repository).then(($result: any) => {
        return $$createType1($result);
    });
}

// Private type creation functions
const $$createType0 = ent$0.Repository.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = ent$0.Archive.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = types$0.MountState.createFrom;
const $$createType6 = $Create.Map($Create.Any, $$createType5);
const $$createType7 = ent$0.BackupProfile.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
const $$createType9 = $Create.Array($$createType8);
const $$createType10 = $Create.Array($Create.Any);
const $$createType11 = $models.PaginatedArchivesResponse.createFrom;
const $$createType12 = $Create.Nullable($$createType11);
const $$createType13 = $models.PruningDates.createFrom;
const $$createType14 = state$0.RepoState.createFrom;
const $$createType15 = $Create.Array($$createType4);
const $$createType16 = $models.TestRepoConnectionResult.createFrom;
