syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";
import "api/v1/plan.proto";

option go_package = "github.com/loomi-labs/arco/backend/api/v1;arcov1";

// SubscriptionService manages user subscriptions and integrates with payment providers.
//
// This service handles the complete subscription lifecycle including plan
// selection, payment processing, upgrades, downgrades, and cancellations.
service SubscriptionService {
  // GetSubscription retrieves the current user's subscription details.
  //
  // Returns the user's active subscription including plan information,
  // billing cycle, storage usage, and current status. Returns null if
  // the user has no active subscription.
  //
  // Requires authentication. Users can only access their own subscription.
  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {}

  // CreateCheckoutSession creates a payment checkout session for plan purchase or upgrade.
  //
  // Initiates the payment flow by creating a checkout session with
  // the specified plan and billing cycle. Returns a checkout URL
  // that users can visit to complete payment.
  //
  // Rate limited to prevent abuse. Requires authentication and
  // automatically creates customer if needed.
  //
  // Use WaitForCheckoutCompletion to receive real-time payment status updates.
  rpc CreateCheckoutSession(CreateCheckoutSessionRequest) returns (CreateCheckoutSessionResponse) {}

  // WaitForCheckoutCompletion provides real-time streaming updates for payment completion.
  //
  // Desktop applications should call this immediately after CreateCheckoutSession
  // to receive instant notifications when payment is completed, failed, or expired.
  //
  // The stream automatically times out when the checkout session expires and
  // provides periodic keepalive messages to prevent client timeout.
  rpc WaitForCheckoutCompletion(WaitForCheckoutCompletionRequest) returns (stream WaitForCheckoutCompletionResponse) {}

  // CancelSubscription schedules subscription cancellation at the end of the current billing period.
  //
  // Users retain access to their subscription until the current period ends.
  // The subscription can be reactivated before the period ends using ReactivateSubscription.
  //
  // Requires authentication and subscription ownership validation.
  rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse) {}

  // ReactivateSubscription removes scheduled cancellation before it takes effect.
  //
  // Can only be used on subscriptions that are scheduled for cancellation
  // but have not yet been fully canceled. Once a subscription is fully
  // canceled, users must create a new subscription.
  //
  // Requires authentication and subscription ownership validation.
  rpc ReactivateSubscription(ReactivateSubscriptionRequest) returns (ReactivateSubscriptionResponse) {}

  // UpgradeSubscription performs immediate plan upgrade with proration.
  //
  // Upgrades an existing subscription to a higher-tier plan with immediate effect.
  // The upgrade includes proration for the remaining billing period, charging
  // the difference between plans immediately.
  //
  // Requires active subscription and authentication.
  rpc UpgradeSubscription(UpgradeSubscriptionRequest) returns (UpgradeSubscriptionResponse) {}

  // DowngradeSubscription schedules plan downgrades to take effect at the end of the current billing period.
  //
  // Supports downgrades to lower-tier plans with effect at the end of the current billing period.
  // Users retain access to their current plan features until the period ends, then are
  // automatically moved to the lower-tier plan without additional charges.
  //
  // Requires active subscription and authentication.
  rpc DowngradeSubscription(DowngradeSubscriptionRequest) returns (DowngradeSubscriptionResponse) {}
}

// GetSubscriptionRequest initiates retrieval of the current user's subscription.
message GetSubscriptionRequest {
}

// GetSubscriptionResponse contains the user's subscription details.
//
// Returns null subscription field if the user has no active subscription.
message GetSubscriptionResponse {
  // The user's current subscription.
  // Null if the user has no active subscription.
  Subscription subscription = 1;
}

// SubscriptionStatus represents the current state of a subscription.
//
// These statuses determine subscription behavior and access permissions.
enum SubscriptionStatus {
  // Default unspecified status.
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0;

  // Subscription created but payment not completed.
  // User has limited or no access until payment succeeds.
  SUBSCRIPTION_STATUS_INCOMPLETE = 1;

  // Incomplete subscription has expired.
  // Payment was never completed within the allowed timeframe.
  SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED = 2;

  // Subscription is in trial period.
  // User has full access without payment required yet.
  SUBSCRIPTION_STATUS_TRIALING = 3;

  // Subscription is active and paid.
  // User has full access to plan features.
  SUBSCRIPTION_STATUS_ACTIVE = 4;

  // Payment failed but subscription is still active.
  // User retains access while payment issues are resolved.
  SUBSCRIPTION_STATUS_PAST_DUE = 5;

  // Subscription has been canceled.
  // User loses access at the end of the billing period.
  SUBSCRIPTION_STATUS_CANCELED = 6;

  // Subscription is unpaid and access is revoked.
  // Similar to past_due but with access restrictions.
  SUBSCRIPTION_STATUS_UNPAID = 7;
}

// Subscription represents a user's active subscription with complete details.
//
// Contains subscription metadata, billing information, usage tracking,
// and plan details.
message Subscription {
  // Unique subscription identifier.
  string id = 1;

  // Plan identifier (e.g., "BASIC", "PRO").
  string plan_id = 2;

  // Current subscription status.
  SubscriptionStatus status = 3;

  // Start of the current billing period.
  google.protobuf.Timestamp current_period_start = 4;

  // End of the current billing period.
  // New billing cycles begin immediately after this time.
  google.protobuf.Timestamp current_period_end = 5;

  // Whether the subscription will cancel at the end of the current period.
  // If true, subscription ends at current_period_end without renewal.
  bool cancel_at_period_end = 6;

  // When the subscription was canceled (if applicable).
  // Set when cancel_at_period_end is enabled.
  google.protobuf.Timestamp canceled_at = 7;

  // When the subscription was originally created.
  google.protobuf.Timestamp created_at = 8;

  // When the subscription was last updated.
  google.protobuf.Timestamp updated_at = 9;

  // Complete plan details including pricing and features.
  Plan plan = 10;

  // Current storage usage in GB.
  int64 storage_used_gb = 11;

  // Maximum storage allowed before overage charges apply.
  int64 storage_limit_gb = 12;

  // Overage rate per GB in cents.
  double overage_rate_per_gb_cents = 13;
}

// CreateCheckoutSessionRequest initiates payment checkout for plan purchase.
//
// Creates a checkout session for the specified plan.
// Rate limited to prevent payment abuse.
message CreateCheckoutSessionRequest {
  // Plan to purchase.
  // Must correspond to an available plan from PlanService.
  string plan_id = 1;
}

// CreateCheckoutSessionResponse contains payment checkout session details.
//
// Provides the checkout URL for payment completion and session ID
// for tracking payment status via WaitForCheckoutCompletion.
message CreateCheckoutSessionResponse {
  // Checkout session ID for tracking.
  // Use this with WaitForCheckoutCompletion for real-time updates.
  string session_id = 1;

  // Checkout URL for payment completion.
  // Users should be redirected to this URL to complete payment.
  string checkout_url = 2;
}

// CancelSubscriptionRequest initiates subscription cancellation.
//
// Schedules the subscription to cancel at the end of the current billing period.
// Users retain access until the period ends and can reactivate before then.
message CancelSubscriptionRequest {
  // Subscription ID to cancel.
  // Must be owned by the authenticated user.
  string subscription_id = 1;
}

// CancelSubscriptionResponse confirms cancellation scheduling.
//
// Indicates successful cancellation scheduling and when access will end.
// Users can still reactivate before the effective date.
message CancelSubscriptionResponse {
  // Whether the cancellation was successfully scheduled.
  bool success = 1;

  // When the subscription will actually end.
  // Users retain access until this time.
  google.protobuf.Timestamp effective_date = 2;
}

// WaitForCheckoutCompletionRequest initiates streaming payment status monitoring.
//
// Begins streaming real-time updates for the specified checkout session.
// Should be called immediately after CreateCheckoutSession.
message WaitForCheckoutCompletionRequest {
  // Checkout session ID to monitor.
  // Must be a valid session created by the authenticated user.
  string session_id = 1;
}

// WaitForCheckoutCompletionResponse provides real-time payment status updates.
//
// Streamed continuously until payment is completed, failed, or expired.
message WaitForCheckoutCompletionResponse {
  // Current checkout session status.
  CheckoutStatus status = 1;

  // Created subscription ID when payment succeeds.
  // Only populated when status = CHECKOUT_STATUS_COMPLETED.
  string subscription_id = 2;

  // Error details when payment fails.
  // Only populated when status = CHECKOUT_STATUS_FAILED.
  string error_message = 3;
}

// CheckoutStatus represents the current state of a payment checkout session.
//
// These statuses track payment progress from creation through completion
// or failure, enabling real-time UI updates during the payment flow.
enum CheckoutStatus {
  // Default unspecified status.
  CHECKOUT_STATUS_UNSPECIFIED = 0;

  // Payment is in progress, waiting for user completion.
  CHECKOUT_STATUS_PENDING = 1;

  // Payment completed successfully.
  // Subscription is now active and accessible.
  CHECKOUT_STATUS_COMPLETED = 2;

  // Payment failed due to card decline or other issues.
  // User can retry payment with a different method.
  CHECKOUT_STATUS_FAILED = 3;

  // Checkout session expired without completion.
  // User must create a new checkout session to retry.
  CHECKOUT_STATUS_EXPIRED = 4;
}


// ReactivateSubscriptionRequest removes scheduled cancellation.
//
// Prevents a subscription from canceling at the end of the current period.
// Only works on subscriptions that are scheduled for cancellation but not yet canceled.
message ReactivateSubscriptionRequest {
  // Subscription ID to reactivate.
  // Must be owned by the authenticated user and scheduled for cancellation.
  string subscription_id = 1;
}

// ReactivateSubscriptionResponse confirms cancellation removal.
//
// Indicates successful reactivation of a previously canceled subscription.
message ReactivateSubscriptionResponse {
  // Whether the reactivation was successful.
  bool success = 1;
}

// UpgradeSubscriptionRequest initiates immediate plan upgrade.
//
// Performs immediate plan upgrade with proration for the remaining
// billing period.
message UpgradeSubscriptionRequest {
  // Subscription ID to upgrade.
  // Must be owned by the authenticated user.
  string subscription_id = 1;

  // Target plan ID for upgrade.
  // Must be a higher-tier plan than the current subscription.
  // Use DowngradeSubscription for downgrades.
  string plan_id = 2;
}

// UpgradeSubscriptionResponse confirms immediate upgrade completion.
//
// Indicates successful upgrade with immediate effect and proration.
message UpgradeSubscriptionResponse {
  // Whether the upgrade was successful.
  bool success = 1;

  // When the upgrade took effect.
  // Always immediate for upgrades (no delay).
  google.protobuf.Timestamp effective_date = 2;
}

// DowngradeSubscriptionRequest schedules plan downgrade for end of billing period.
//
// Schedules a downgrade to a lower-tier plan that will take effect at the end of the
// current billing period. User retains current plan access until then.
message DowngradeSubscriptionRequest {
  // Subscription ID to downgrade.
  // Must be owned by the authenticated user.
  string subscription_id = 1;

  // Target plan ID for downgrade.
  // Must be a lower-tier plan than the current subscription.
  string plan_id = 2;
}

// DowngradeSubscriptionResponse confirms downgrade scheduling.
//
// Indicates successful downgrade scheduling with effect at end of current billing period.
message DowngradeSubscriptionResponse {
  // Whether the downgrade was successfully scheduled.
  bool success = 1;

  // When the downgrade will take effect.
  // Always at the end of the current billing period.
  google.protobuf.Timestamp effective_date = 2;
}
