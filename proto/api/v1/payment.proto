syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/loomi-labs/arco/backend/api/v1;arcov1";

// PaymentService manages payment methods and billing history for users.
//
// This service handles payment method management and billing history retrieval
// through Stripe integration. All endpoints require user authentication via JWT tokens.
// Users can only access and manage their own payment information.
//
// Key features:
// - Add and manage payment methods (credit cards, bank accounts)
// - Set default payment methods for subscriptions
// - List all saved payment methods with security-safe details
// - Retrieve comprehensive payment and billing history
// - Secure handling of sensitive payment data through Stripe
// - Automatic Stripe customer creation when needed
//
// Payment methods are stored securely in Stripe and referenced by ID.
// Only non-sensitive information (last 4 digits, expiry, brand) is exposed.
// All payment processing and PCI compliance is handled by Stripe.
service PaymentService {
  // AddPaymentMethod adds a new payment method to the user's account.
  //
  // Attaches a Stripe payment method to the user's Stripe customer account.
  // Creates a Stripe customer automatically if one doesn't exist.
  // Optionally sets the new payment method as the default for future charges.
  //
  // Requires authentication. The payment method must be created client-side
  // using Stripe.js or mobile SDKs before calling this endpoint.
  rpc AddPaymentMethod(AddPaymentMethodRequest) returns (AddPaymentMethodResponse) {}

  // ListPaymentMethods retrieves all saved payment methods for the user.
  //
  // Returns a list of payment methods with security-safe details (last 4 digits,
  // expiry date, brand) and indicates which is set as the default.
  // Only includes payment methods attached to the user's Stripe customer.
  //
  // Requires authentication. Returns empty list if user has no payment methods.
  rpc ListPaymentMethods(ListPaymentMethodsRequest) returns (ListPaymentMethodsResponse) {}

  // GetPaymentHistory retrieves the user's payment and billing history.
  //
  // Returns paginated payment history including successful payments, failed attempts,
  // refunds, and associated invoice details. Includes payment method information
  // and links to Stripe-hosted invoice PDFs.
  //
  // Requires authentication. Supports cursor-based pagination for large histories.
  // Currently returns unimplemented status - implementation in progress.
  rpc GetPaymentHistory(GetPaymentHistoryRequest) returns (GetPaymentHistoryResponse) {}
}

// AddPaymentMethodRequest attaches a payment method to the user's account.
//
// The payment method must be created client-side using Stripe.js or mobile SDKs
// before calling this endpoint. This ensures sensitive card data never touches our servers.
message AddPaymentMethodRequest {
  // Stripe payment method ID from client-side creation.
  // Must be a valid payment method created using Stripe.js or mobile SDKs.
  // The payment method will be attached to the user's Stripe customer.
  string payment_method_id = 1;

  // Whether to set this payment method as the default for future charges.
  // If true, this becomes the default payment method for subscriptions and invoices.
  bool set_as_default = 2;
}

// AddPaymentMethodResponse contains the newly added payment method details.
//
// Returns the payment method with security-safe information after successful
// attachment to the user's Stripe customer account.
message AddPaymentMethodResponse {
  // The newly added payment method with security-safe details.
  PaymentMethod payment_method = 1;
}

// ListPaymentMethodsRequest retrieves all payment methods for the user.
//
// No parameters required - returns all payment methods for the authenticated user.
message ListPaymentMethodsRequest {}

// ListPaymentMethodsResponse contains all user payment methods.
//
// Returns payment methods with security-safe details and default method indication.
message ListPaymentMethodsResponse {
  // All payment methods attached to the user's account.
  repeated PaymentMethod payment_methods = 1;

  // ID of the default payment method for charges.
  // Empty string if no default is set.
  string default_payment_method_id = 2;
}

// PaymentMethod represents a stored payment method with security-safe details.
//
// Contains only non-sensitive information about payment methods.
// Full card details are stored securely in Stripe and never exposed.
message PaymentMethod {
  // Unique Stripe payment method identifier.
  string id = 1;

  // Payment method type (e.g., "card", "bank_account").
  // Currently only "card" type is supported.
  string type = 2;

  // Card brand (e.g., "visa", "mastercard", "amex").
  // Only populated for card payment methods.
  string brand = 3;

  // Last 4 digits of the card number.
  // Only populated for card payment methods.
  string last4 = 4;

  // Card expiration month (1-12).
  // Only populated for card payment methods.
  int32 exp_month = 5;

  // Card expiration year (4 digits).
  // Only populated for card payment methods.
  int32 exp_year = 6;

  // Whether this is the default payment method for charges.
  bool is_default = 7;

  // When this payment method was added to the account.
  google.protobuf.Timestamp created_at = 8;
}

// GetPaymentHistoryRequest retrieves paginated payment history.
//
// Supports cursor-based pagination for efficient browsing of large payment histories.
// Returns payments in reverse chronological order (newest first).
message GetPaymentHistoryRequest {
  // Maximum number of payments to return (1-100).
  // Defaults to 20 if not specified. Higher limits may impact performance.
  int32 limit = 1;

  // Cursor for pagination - returns payments after this cursor.
  // Use the next_cursor from previous response to fetch the next page.
  // Omit for the first page of results.
  string starting_after = 2;
}

// GetPaymentHistoryResponse contains paginated payment history.
//
// Returns payments with complete details including associated invoices
// and payment method information used for each transaction.
message GetPaymentHistoryResponse {
  // List of payments in reverse chronological order.
  repeated Payment payments = 1;

  // Whether there are more payments available after this page.
  // If true, use next_cursor to fetch additional results.
  bool has_more = 2;

  // Cursor for the next page of results.
  // Use this value as starting_after in the next request.
  // Empty if has_more is false.
  string next_cursor = 3;
}

// Payment represents a billing transaction with complete details.
//
// Contains payment information including amount, status, associated invoice,
// and payment method used. Integrates with Stripe for payment processing.
message Payment {
  // Unique payment identifier from Stripe.
  string id = 1;

  // Payment amount in cents (e.g., 1500 = $15.00).
  // Always positive for charges, negative for refunds.
  int64 amount_cents = 2;

  // Payment currency (e.g., "usd", "eur", "chf").
  // Corresponds to the subscription currency at time of payment.
  string currency = 3;

  // Payment status indicating current state.
  // Valid values: "succeeded", "pending", "failed", "canceled", "refunded"
  string status = 4;

  // Human-readable description of the payment.
  // Typically includes subscription period and plan information.
  string description = 5;

  // When the payment was created/attempted.
  google.protobuf.Timestamp created_at = 6;

  // Associated Stripe invoice ID for this payment.
  // Can be used to retrieve detailed invoice information from Stripe.
  string invoice_id = 7;

  // Direct URL to the Stripe-hosted invoice PDF.
  // Users can view and download official invoices for accounting purposes.
  string invoice_url = 8;

  // ID of the payment method used for this payment.
  // References the PaymentMethod that was charged.
  string payment_method_id = 9;

  // Complete payment method details used for this payment.
  // Includes security-safe information about the card or payment method.
  PaymentMethod payment_method = 10;
}
