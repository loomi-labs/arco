syntax = "proto3";

package arco.v1;

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/loomi-labs/arco/backend/api/v1;arcov1";

// AuthService provides magic link authentication for both desktop and web applications.
// 
// The service supports magic link authentication with real-time status updates.
// Desktop apps initiate auth and wait for magic link clicks, while web browsers
// handle the magic link verification directly.
service AuthService {
  // Register initiates user registration by sending a magic link.
  // 
  // If the user already exists, this gracefully falls back to login behavior.
  // Rate limited to 5 requests per hour per email address.
  //
  // Returns a session_id that can be used with:
  // - WaitForAuthentication (for real-time status updates)
  // - Magic link verification (via web REST endpoint)
  rpc Register(RegisterRequest) returns (RegisterResponse);
  
  // Login initiates authentication for existing users only.
  //
  // Sends a magic link to the user's email.
  // Returns an error if no account exists with the provided email.
  // Rate limited to 5 requests per hour per email address.
  //
  // Returns a session_id that can be used with:
  // - WaitForAuthentication (for real-time status updates)
  // - Magic link verification (via web REST endpoint)
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // WaitForAuthentication provides real-time streaming updates for authentication status.
  //
  // Desktop applications should call this immediately after Register/Login to
  // receive instant notifications when the user completes authentication via
  // magic link.
  //
  // The stream automatically times out after 10 minutes and provides instant
  // notifications when authentication is completed or expired.
  rpc WaitForAuthentication(WaitForAuthRequest) returns (stream AuthStatusResponse);
  
  // RefreshToken exchanges a refresh token for new access and refresh tokens.
  //
  // Access tokens expire after a short duration (typically 15 minutes).
  // Refresh tokens are long-lived (360 days) and should be used to obtain
  // new access tokens without requiring re-authentication.
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
}

// RegisterRequest initiates user registration.
message RegisterRequest {
  // The email address for the new user account.
  // Must be a valid email format.
  string email = 1 [(buf.validate.field).string.email = true];
}

// RegisterResponse contains the result of a registration initiation.
message RegisterResponse {
  // Whether the email was successfully sent.
  bool sent = 1;
  
  // Unique session identifier for this authentication attempt.
  // Use this with WaitForAuthentication.
  string session_id = 2;
  
  // When the authentication session expires.
  google.protobuf.Timestamp expires_at = 3;
}

// LoginRequest initiates authentication for existing users.
message LoginRequest {
  // The email address of the existing user account.
  // Must be a valid email format and correspond to an existing user.
  string email = 1 [(buf.validate.field).string.email = true];
}

// LoginResponse contains the result of a login initiation.
message LoginResponse {
  // Whether the email was successfully sent.
  bool sent = 1;
  
  // Unique session identifier for this authentication attempt.
  // Use this with WaitForAuthentication.
  string session_id = 2;
  
  // When the authentication session expires.
  google.protobuf.Timestamp expires_at = 3;
}

// WaitForAuthRequest initiates streaming authentication status monitoring.
message WaitForAuthRequest {
  // The session ID returned from Register or Login calls.
  string session_id = 1 [(buf.validate.field).string.uuid = true];
}

// AuthStatusResponse provides real-time authentication status updates.
message AuthStatusResponse {
  // Current authentication status.
  AuthStatus status = 1;
  
  // JWT access token (only set when status = AUTHENTICATED).
  string access_token = 2;
  
  // Long-lived refresh token (only set when status = AUTHENTICATED).
  string refresh_token = 3;
  
  // Access token lifetime in seconds (only set when status = AUTHENTICATED).
  int64 access_token_expires_in = 4;
  
  // Refresh token lifetime in seconds (only set when status = AUTHENTICATED).
  int64 refresh_token_expires_in = 5;

  // User information (only set when status = AUTHENTICATED).
  User user = 6;
}


// AuthStatus represents the current state of an authentication session.
enum AuthStatus {
  // Authentication is in progress, waiting for user action.
  PENDING = 0;
  
  // User has successfully authenticated via magic link.
  AUTHENTICATED = 1;
  
  // Authentication session has expired (10 minutes timeout).
  EXPIRED = 2;
  
  // Authentication was cancelled by the user or system.
  CANCELLED = 3;
}

// RefreshTokenRequest exchanges a refresh token for new tokens.
message RefreshTokenRequest {
  // The long-lived refresh token obtained from authentication.
  string refresh_token = 1 [(buf.validate.field).string.pattern = "^[a-zA-Z0-9]{1,}$"];
}

// RefreshTokenResponse contains new authentication tokens.
message RefreshTokenResponse {
  // New JWT access token for API authentication.
  string access_token = 1;
  
  // New long-lived refresh token (rotated for security).
  string refresh_token = 2;
  
  // New access token lifetime in seconds.
  int64 access_token_expires_in = 3;
  
  // New refresh token lifetime in seconds.
  int64 refresh_token_expires_in = 4;
}

// User represents a user account in the system.
message User {
  // Unique user identifier.
  string id = 1;
  
  // User's email address (verified via authentication).
  string email = 2;
  
  // Timestamp of the user's last successful authentication.
  // Null for users who have registered but never logged in.
  google.protobuf.Timestamp last_logged_in = 3;
  
  // When the user account was created.
  google.protobuf.Timestamp created_at = 4;
  
  // When the user account was last updated.
  google.protobuf.Timestamp updated_at = 5;
}
