version: '3'

includes:
  common: ./build/Taskfile.yml
  windows: ./build/windows/Taskfile.yml
  darwin: ./build/darwin/Taskfile.yml
  linux: ./build/linux/Taskfile.yml
  db: ./Taskfile.db.yml
  dev: ./Taskfile.dev.yml
  proto: ./proto/Taskfile.proto.yml

vars:
  APP_NAME: "arco"
  BIN_DIR: "bin"
  VITE_PORT: '{{.WAILS_VITE_PORT | default 9245}}'
  VERSION:
    sh: sed -n 's/.*"\."\s*:\s*"\([0-9.]*\)".*/\1/p' .release-please-manifest.json

tasks:
  build:
    desc: Builds the application
    cmds:
      - task: '{{if eq .PLATFORM "darwin/universal"}}darwin:build:universal{{else}}{{OS}}:build{{end}}'

  package:
    desc: Packages a production build of the application
    cmds:
      - task: '{{if eq .PLATFORM "darwin/universal"}}darwin:package:universal{{else}}{{OS}}:package{{end}}'

  run:
    desc: Runs the application
    cmds:
      - task: "{{OS}}:run"

  test:
    desc: Run tests
    silent: true
    preconditions:
      - mkdir -p frontend/dist
      - touch frontend/dist/index.html
    cmds:
      - |
        go test -cover -mod=readonly --timeout 5m $(go list ./... | grep -v ent) -json | \
        tee >(./scripts/test-output-processor.sh) | \
        ./scripts/test-summary.sh

  test:raw:
    desc: Run tests with raw output
    preconditions:
      - mkdir -p frontend/dist
      - touch frontend/dist/index.html
    cmds:
      - go test -v -cover -mod=readonly --timeout 5m $(go list ./... | grep -v ent)

  test:detailed:
    desc: Run tests with detailed output
    silent: true
    preconditions:
      - mkdir -p frontend/dist
      - touch frontend/dist/index.html
    cmds:
      - |
        go test -cover -mod=readonly --timeout 5m $(go list ./... | grep -v ent) -json | \
        tee >(jq --unbuffered -r '
          if .Action == "run" and .Test == null then
            "üîÑ Starting: " + .Package
          elif .Action == "pass" and .Test == null then
            "‚úÖ " + .Package + " (" + (.Elapsed // 0 | . * 100 | round / 100 | tostring) + "s)"
          elif .Action == "fail" and .Test == null then
            "‚ùå " + .Package + " - FAILED (" + (.Elapsed // 0 | . * 100 | round / 100 | tostring) + "s)"
          elif .Action == "pass" and .Test != null then
            "  ‚úÖ " + .Test + " (" + (.Elapsed // 0 | . * 100 | round / 100 | tostring) + "s)"
          elif .Action == "fail" and .Test != null then
            "  ‚ùå " + .Test + " (" + (.Elapsed // 0 | . * 100 | round / 100 | tostring) + "s)"
          elif .Action == "output" and (.Output // "" | type == "string") and (.Output | test("^coverage: [0-9.]+% of statements$")) then
            "  üìä " + (.Output | gsub("\\t|\\n"; "") | gsub("^\\s+|\\s+$"; ""))
          else
            empty
          end
        ') | \
        ./scripts/test-summary.sh

  test:integration:
    desc: Runs integration tests against real borg instances
    preconditions:
      - sh: command -v docker
        msg: "Docker is required for integration tests"
    cmds:
      - go test -tags=integration -cover -mod=readonly --timeout 10m ./backend/borg/...

  test:integration:docker:
    desc: Runs integration tests in containerized environment (optional with custom client/server/image version)
    preconditions:
      - sh: command -v docker
        msg: "Docker is required for integration tests"
    cmds:
      - ./scripts/run-integration-test.sh --client-version {{.CLIENT_VERSION | default "1.4.1"}} --server-version {{.SERVER_VERSION | default "1.4.1"}} --base-image {{.BASE_IMAGE | default "ubuntu:24.04"}}

  test:integration:all:
    desc: Runs integration tests with multiple borg version combinations
    preconditions:
      - sh: command -v docker
        msg: "Docker is required for integration tests"
    cmds:
      - echo "Testing all borg versions..."
      - ./scripts/run-integration-test.sh --client-version 1.4.0 --server-version 1.4.0
      - ./scripts/run-integration-test.sh --client-version 1.4.1 --server-version 1.4.1
      - echo "Integration testing completed successfully!"
